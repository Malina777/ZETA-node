// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	paramstypes "github.com/cosmos/cosmos-sdk/x/params/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// EmissionParamStore is an autogenerated mock type for the EmissionParamStore type
type EmissionParamStore struct {
	mock.Mock
}

// GetParamSetIfExists provides a mock function with given fields: ctx, ps
func (_m *EmissionParamStore) GetParamSetIfExists(ctx types.Context, ps paramstypes.ParamSet) {
	_m.Called(ctx, ps)
}

// HasKeyTable provides a mock function with given fields:
func (_m *EmissionParamStore) HasKeyTable() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HasKeyTable")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetParamSet provides a mock function with given fields: ctx, ps
func (_m *EmissionParamStore) SetParamSet(ctx types.Context, ps paramstypes.ParamSet) {
	_m.Called(ctx, ps)
}

// WithKeyTable provides a mock function with given fields: table
func (_m *EmissionParamStore) WithKeyTable(table paramstypes.KeyTable) paramstypes.Subspace {
	ret := _m.Called(table)

	if len(ret) == 0 {
		panic("no return value specified for WithKeyTable")
	}

	var r0 paramstypes.Subspace
	if rf, ok := ret.Get(0).(func(paramstypes.KeyTable) paramstypes.Subspace); ok {
		r0 = rf(table)
	} else {
		r0 = ret.Get(0).(paramstypes.Subspace)
	}

	return r0
}

// NewEmissionParamStore creates a new instance of EmissionParamStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEmissionParamStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *EmissionParamStore {
	mock := &EmissionParamStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
