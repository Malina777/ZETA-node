// Code generated by mockery v2.39.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	"github.com/zeta-chain/zetacore/common"
	observertypes "github.com/zeta-chain/zetacore/x/observer/types"

	types "github.com/cosmos/cosmos-sdk/types"
)

// FungibleObserverKeeper is an autogenerated mock type for the FungibleObserverKeeper type
type FungibleObserverKeeper struct {
	mock.Mock
}

// GetAllBallots provides a mock function with given fields: ctx
func (_m *FungibleObserverKeeper) GetAllBallots(ctx types.Context) []*observertypes.Ballot {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBallots")
	}

	var r0 []*observertypes.Ballot
	if rf, ok := ret.Get(0).(func(types.Context) []*observertypes.Ballot); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*observertypes.Ballot)
		}
	}

	return r0
}

// GetBallot provides a mock function with given fields: ctx, index
func (_m *FungibleObserverKeeper) GetBallot(ctx types.Context, index string) (observertypes.Ballot, bool) {
	ret := _m.Called(ctx, index)

	if len(ret) == 0 {
		panic("no return value specified for GetBallot")
	}

	var r0 observertypes.Ballot
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, string) (observertypes.Ballot, bool)); ok {
		return rf(ctx, index)
	}
	if rf, ok := ret.Get(0).(func(types.Context, string) observertypes.Ballot); ok {
		r0 = rf(ctx, index)
	} else {
		r0 = ret.Get(0).(observertypes.Ballot)
	}

	if rf, ok := ret.Get(1).(func(types.Context, string) bool); ok {
		r1 = rf(ctx, index)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetChainParamsByChainID provides a mock function with given fields: ctx, chainID
func (_m *FungibleObserverKeeper) GetChainParamsByChainID(ctx types.Context, chainID int64) (*observertypes.ChainParams, bool) {
	ret := _m.Called(ctx, chainID)

	if len(ret) == 0 {
		panic("no return value specified for GetChainParamsByChainID")
	}

	var r0 *observertypes.ChainParams
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context, int64) (*observertypes.ChainParams, bool)); ok {
		return rf(ctx, chainID)
	}
	if rf, ok := ret.Get(0).(func(types.Context, int64) *observertypes.ChainParams); ok {
		r0 = rf(ctx, chainID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*observertypes.ChainParams)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Context, int64) bool); ok {
		r1 = rf(ctx, chainID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetMaturedBallotList provides a mock function with given fields: ctx
func (_m *FungibleObserverKeeper) GetMaturedBallotList(ctx types.Context) []string {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMaturedBallotList")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func(types.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetObserverSet provides a mock function with given fields: ctx
func (_m *FungibleObserverKeeper) GetObserverSet(ctx types.Context) (observertypes.ObserverSet, bool) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetObserverSet")
	}

	var r0 observertypes.ObserverSet
	var r1 bool
	if rf, ok := ret.Get(0).(func(types.Context) (observertypes.ObserverSet, bool)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(types.Context) observertypes.ObserverSet); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(observertypes.ObserverSet)
	}

	if rf, ok := ret.Get(1).(func(types.Context) bool); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetParams provides a mock function with given fields: ctx
func (_m *FungibleObserverKeeper) GetParams(ctx types.Context) observertypes.Params {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetParams")
	}

	var r0 observertypes.Params
	if rf, ok := ret.Get(0).(func(types.Context) observertypes.Params); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(observertypes.Params)
	}

	return r0
}

// GetSupportedChains provides a mock function with given fields: ctx
func (_m *FungibleObserverKeeper) GetSupportedChains(ctx types.Context) []*common.Chain {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSupportedChains")
	}

	var r0 []*common.Chain
	if rf, ok := ret.Get(0).(func(types.Context) []*common.Chain); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*common.Chain)
		}
	}

	return r0
}

// SetBallot provides a mock function with given fields: ctx, ballot
func (_m *FungibleObserverKeeper) SetBallot(ctx types.Context, ballot *observertypes.Ballot) {
	_m.Called(ctx, ballot)
}

// SetObservers provides a mock function with given fields: ctx, om
func (_m *FungibleObserverKeeper) SetObservers(ctx types.Context, om observertypes.ObserverSet) {
	_m.Called(ctx, om)
}

// NewFungibleObserverKeeper creates a new instance of FungibleObserverKeeper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFungibleObserverKeeper(t interface {
	mock.TestingT
	Cleanup(func())
}) *FungibleObserverKeeper {
	mock := &FungibleObserverKeeper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
