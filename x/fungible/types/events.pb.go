// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: fungible/events.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/zeta-chain/zetacore/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventSystemContractUpdated struct {
	MsgTypeUrl         string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	NewContractAddress string `protobuf:"bytes,2,opt,name=new_contract_address,json=newContractAddress,proto3" json:"new_contract_address,omitempty"`
	OldContractAddress string `protobuf:"bytes,3,opt,name=old_contract_address,json=oldContractAddress,proto3" json:"old_contract_address,omitempty"`
	Signer             string `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventSystemContractUpdated) Reset()         { *m = EventSystemContractUpdated{} }
func (m *EventSystemContractUpdated) String() string { return proto.CompactTextString(m) }
func (*EventSystemContractUpdated) ProtoMessage()    {}
func (*EventSystemContractUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_858e6494730deffd, []int{0}
}
func (m *EventSystemContractUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventSystemContractUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventSystemContractUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventSystemContractUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventSystemContractUpdated.Merge(m, src)
}
func (m *EventSystemContractUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventSystemContractUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventSystemContractUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventSystemContractUpdated proto.InternalMessageInfo

func (m *EventSystemContractUpdated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventSystemContractUpdated) GetNewContractAddress() string {
	if m != nil {
		return m.NewContractAddress
	}
	return ""
}

func (m *EventSystemContractUpdated) GetOldContractAddress() string {
	if m != nil {
		return m.OldContractAddress
	}
	return ""
}

func (m *EventSystemContractUpdated) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type EventZRC20Deployed struct {
	MsgTypeUrl string          `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	ChainId    int64           `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Contract   string          `protobuf:"bytes,3,opt,name=contract,proto3" json:"contract,omitempty"`
	Name       string          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Symbol     string          `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals   int64           `protobuf:"varint,6,opt,name=decimals,proto3" json:"decimals,omitempty"`
	CoinType   common.CoinType `protobuf:"varint,7,opt,name=coin_type,json=coinType,proto3,enum=common.CoinType" json:"coin_type,omitempty"`
	Erc20      string          `protobuf:"bytes,8,opt,name=erc20,proto3" json:"erc20,omitempty"`
	GasLimit   int64           `protobuf:"varint,9,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"`
}

func (m *EventZRC20Deployed) Reset()         { *m = EventZRC20Deployed{} }
func (m *EventZRC20Deployed) String() string { return proto.CompactTextString(m) }
func (*EventZRC20Deployed) ProtoMessage()    {}
func (*EventZRC20Deployed) Descriptor() ([]byte, []int) {
	return fileDescriptor_858e6494730deffd, []int{1}
}
func (m *EventZRC20Deployed) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventZRC20Deployed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventZRC20Deployed.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventZRC20Deployed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventZRC20Deployed.Merge(m, src)
}
func (m *EventZRC20Deployed) XXX_Size() int {
	return m.Size()
}
func (m *EventZRC20Deployed) XXX_DiscardUnknown() {
	xxx_messageInfo_EventZRC20Deployed.DiscardUnknown(m)
}

var xxx_messageInfo_EventZRC20Deployed proto.InternalMessageInfo

func (m *EventZRC20Deployed) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventZRC20Deployed) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *EventZRC20Deployed) GetContract() string {
	if m != nil {
		return m.Contract
	}
	return ""
}

func (m *EventZRC20Deployed) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *EventZRC20Deployed) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *EventZRC20Deployed) GetDecimals() int64 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *EventZRC20Deployed) GetCoinType() common.CoinType {
	if m != nil {
		return m.CoinType
	}
	return common.CoinType_Zeta
}

func (m *EventZRC20Deployed) GetErc20() string {
	if m != nil {
		return m.Erc20
	}
	return ""
}

func (m *EventZRC20Deployed) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

type EventZRC20WithdrawFeeUpdated struct {
	MsgTypeUrl     string          `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	ChainId        int64           `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	CoinType       common.CoinType `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=common.CoinType" json:"coin_type,omitempty"`
	Zrc20Address   string          `protobuf:"bytes,4,opt,name=zrc20_address,json=zrc20Address,proto3" json:"zrc20_address,omitempty"`
	OldWithdrawFee string          `protobuf:"bytes,5,opt,name=old_withdraw_fee,json=oldWithdrawFee,proto3" json:"old_withdraw_fee,omitempty"`
	NewWithdrawFee string          `protobuf:"bytes,6,opt,name=new_withdraw_fee,json=newWithdrawFee,proto3" json:"new_withdraw_fee,omitempty"`
	Signer         string          `protobuf:"bytes,7,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventZRC20WithdrawFeeUpdated) Reset()         { *m = EventZRC20WithdrawFeeUpdated{} }
func (m *EventZRC20WithdrawFeeUpdated) String() string { return proto.CompactTextString(m) }
func (*EventZRC20WithdrawFeeUpdated) ProtoMessage()    {}
func (*EventZRC20WithdrawFeeUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_858e6494730deffd, []int{2}
}
func (m *EventZRC20WithdrawFeeUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventZRC20WithdrawFeeUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventZRC20WithdrawFeeUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventZRC20WithdrawFeeUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventZRC20WithdrawFeeUpdated.Merge(m, src)
}
func (m *EventZRC20WithdrawFeeUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventZRC20WithdrawFeeUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventZRC20WithdrawFeeUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventZRC20WithdrawFeeUpdated proto.InternalMessageInfo

func (m *EventZRC20WithdrawFeeUpdated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventZRC20WithdrawFeeUpdated) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *EventZRC20WithdrawFeeUpdated) GetCoinType() common.CoinType {
	if m != nil {
		return m.CoinType
	}
	return common.CoinType_Zeta
}

func (m *EventZRC20WithdrawFeeUpdated) GetZrc20Address() string {
	if m != nil {
		return m.Zrc20Address
	}
	return ""
}

func (m *EventZRC20WithdrawFeeUpdated) GetOldWithdrawFee() string {
	if m != nil {
		return m.OldWithdrawFee
	}
	return ""
}

func (m *EventZRC20WithdrawFeeUpdated) GetNewWithdrawFee() string {
	if m != nil {
		return m.NewWithdrawFee
	}
	return ""
}

func (m *EventZRC20WithdrawFeeUpdated) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

type EventZRC20PausedStatusUpdated struct {
	MsgTypeUrl     string                   `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	Zrc20Addresses []string                 `protobuf:"bytes,2,rep,name=zrc20_addresses,json=zrc20Addresses,proto3" json:"zrc20_addresses,omitempty"`
	Action         UpdatePausedStatusAction `protobuf:"varint,3,opt,name=action,proto3,enum=zetachain.zetacore.fungible.UpdatePausedStatusAction" json:"action,omitempty"`
	Signer         string                   `protobuf:"bytes,4,opt,name=signer,proto3" json:"signer,omitempty"`
}

func (m *EventZRC20PausedStatusUpdated) Reset()         { *m = EventZRC20PausedStatusUpdated{} }
func (m *EventZRC20PausedStatusUpdated) String() string { return proto.CompactTextString(m) }
func (*EventZRC20PausedStatusUpdated) ProtoMessage()    {}
func (*EventZRC20PausedStatusUpdated) Descriptor() ([]byte, []int) {
	return fileDescriptor_858e6494730deffd, []int{3}
}
func (m *EventZRC20PausedStatusUpdated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventZRC20PausedStatusUpdated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventZRC20PausedStatusUpdated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventZRC20PausedStatusUpdated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventZRC20PausedStatusUpdated.Merge(m, src)
}
func (m *EventZRC20PausedStatusUpdated) XXX_Size() int {
	return m.Size()
}
func (m *EventZRC20PausedStatusUpdated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventZRC20PausedStatusUpdated.DiscardUnknown(m)
}

var xxx_messageInfo_EventZRC20PausedStatusUpdated proto.InternalMessageInfo

func (m *EventZRC20PausedStatusUpdated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventZRC20PausedStatusUpdated) GetZrc20Addresses() []string {
	if m != nil {
		return m.Zrc20Addresses
	}
	return nil
}

func (m *EventZRC20PausedStatusUpdated) GetAction() UpdatePausedStatusAction {
	if m != nil {
		return m.Action
	}
	return UpdatePausedStatusAction_PAUSE
}

func (m *EventZRC20PausedStatusUpdated) GetSigner() string {
	if m != nil {
		return m.Signer
	}
	return ""
}

func init() {
	proto.RegisterType((*EventSystemContractUpdated)(nil), "zetachain.zetacore.fungible.EventSystemContractUpdated")
	proto.RegisterType((*EventZRC20Deployed)(nil), "zetachain.zetacore.fungible.EventZRC20Deployed")
	proto.RegisterType((*EventZRC20WithdrawFeeUpdated)(nil), "zetachain.zetacore.fungible.EventZRC20WithdrawFeeUpdated")
	proto.RegisterType((*EventZRC20PausedStatusUpdated)(nil), "zetachain.zetacore.fungible.EventZRC20PausedStatusUpdated")
}

func init() { proto.RegisterFile("fungible/events.proto", fileDescriptor_858e6494730deffd) }

var fileDescriptor_858e6494730deffd = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xdd, 0x6e, 0xd3, 0x30,
	0x14, 0xc7, 0x97, 0x75, 0xeb, 0x5a, 0x6b, 0x8c, 0x61, 0x0a, 0x0a, 0x1d, 0x44, 0x55, 0xb9, 0xa0,
	0x37, 0x4b, 0xaa, 0x22, 0x1e, 0x60, 0x14, 0x90, 0x26, 0x81, 0x84, 0x3a, 0x26, 0xa4, 0xdd, 0x44,
	0x6e, 0x7c, 0x96, 0x5a, 0x4a, 0xec, 0x28, 0x76, 0xe9, 0xb2, 0xa7, 0xe0, 0x8e, 0x0b, 0xde, 0x84,
	0x27, 0xe0, 0x72, 0xdc, 0x71, 0x89, 0xda, 0x17, 0x41, 0x76, 0xdc, 0x2f, 0x10, 0xa3, 0x57, 0x3d,
	0xc7, 0x3d, 0x1f, 0x3f, 0xff, 0xcf, 0x89, 0xd1, 0x83, 0xcb, 0x31, 0x8f, 0xd9, 0x30, 0x81, 0x00,
	0x3e, 0x01, 0x57, 0xd2, 0xcf, 0x72, 0xa1, 0x04, 0x3e, 0xba, 0x06, 0x45, 0xa2, 0x11, 0x61, 0xdc,
	0x37, 0x96, 0xc8, 0xc1, 0x9f, 0x47, 0x36, 0xef, 0x47, 0x22, 0x4d, 0x05, 0x0f, 0xca, 0x9f, 0x32,
	0xa3, 0xd9, 0x88, 0x45, 0x2c, 0x8c, 0x19, 0x68, 0xcb, 0x9e, 0xde, 0x5b, 0x94, 0x57, 0x57, 0xe5,
	0x51, 0xfb, 0x9b, 0x83, 0x9a, 0xaf, 0x75, 0xaf, 0xb3, 0x42, 0x2a, 0x48, 0xfb, 0x82, 0xab, 0x9c,
	0x44, 0xea, 0x3c, 0xa3, 0x44, 0x01, 0xc5, 0x2d, 0xb4, 0x9f, 0xca, 0x38, 0x54, 0x45, 0x06, 0xe1,
	0x38, 0x4f, 0x5c, 0xa7, 0xe5, 0x74, 0xea, 0x03, 0x94, 0xca, 0xf8, 0x43, 0x91, 0xc1, 0x79, 0x9e,
	0xe0, 0x2e, 0x6a, 0x70, 0x98, 0x84, 0x91, 0x4d, 0x0c, 0x09, 0xa5, 0x39, 0x48, 0xe9, 0x6e, 0x9b,
	0x48, 0xcc, 0x61, 0x32, 0xaf, 0x79, 0x52, 0xfe, 0xa3, 0x33, 0x44, 0x42, 0xff, 0xce, 0xa8, 0x94,
	0x19, 0x22, 0xa1, 0x7f, 0x66, 0x3c, 0x44, 0x55, 0xc9, 0x62, 0x0e, 0xb9, 0xbb, 0x63, 0x62, 0xac,
	0xd7, 0xfe, 0xb2, 0x8d, 0xb0, 0x81, 0xbf, 0x18, 0xf4, 0x7b, 0xdd, 0x57, 0x90, 0x25, 0xa2, 0xd8,
	0x08, 0xfa, 0x11, 0xaa, 0x19, 0x39, 0x43, 0x46, 0x0d, 0x68, 0x65, 0xb0, 0x67, 0xfc, 0x53, 0x8a,
	0x9b, 0xa8, 0x36, 0x27, 0xb3, 0x44, 0x0b, 0x1f, 0x63, 0xb4, 0xc3, 0x49, 0x0a, 0x96, 0xc2, 0xd8,
	0x86, 0xad, 0x48, 0x87, 0x22, 0x71, 0x77, 0x2d, 0x9b, 0xf1, 0x74, 0x1d, 0x0a, 0x11, 0x4b, 0x49,
	0x22, 0xdd, 0xaa, 0x69, 0xb1, 0xf0, 0xf1, 0x31, 0xaa, 0x47, 0x82, 0x71, 0x43, 0xe8, 0xee, 0xb5,
	0x9c, 0xce, 0x41, 0xef, 0xd0, 0xb7, 0xf3, 0xeb, 0x0b, 0xc6, 0x35, 0xa6, 0x6e, 0x5b, 0x5a, 0xb8,
	0x81, 0x76, 0x21, 0x8f, 0x7a, 0x5d, 0xb7, 0x66, 0x3a, 0x94, 0x0e, 0x3e, 0x42, 0xf5, 0x98, 0xc8,
	0x30, 0x61, 0x29, 0x53, 0x6e, 0xbd, 0xec, 0x10, 0x13, 0xf9, 0x56, 0xfb, 0xed, 0xaf, 0xdb, 0xe8,
	0xf1, 0x52, 0x99, 0x8f, 0x4c, 0x8d, 0x68, 0x4e, 0x26, 0x6f, 0x00, 0x36, 0x1f, 0xec, 0x2d, 0x1a,
	0xad, 0xf1, 0x57, 0xfe, 0xcb, 0xff, 0x14, 0xdd, 0xb9, 0xd6, 0xc8, 0x8b, 0x49, 0x97, 0xfa, 0xed,
	0x9b, 0xc3, 0xf9, 0x8c, 0x3b, 0xe8, 0x50, 0x6f, 0xc5, 0xc4, 0xa2, 0x86, 0x97, 0x00, 0x56, 0xd1,
	0x03, 0x91, 0xd0, 0x95, 0x1b, 0xe8, 0x48, 0xbd, 0x71, 0x6b, 0x91, 0xd5, 0x32, 0x92, 0xc3, 0x64,
	0x35, 0x72, 0xb9, 0x37, 0x7b, 0x6b, 0x7b, 0xf3, 0xc3, 0x41, 0x4f, 0x96, 0xea, 0xbc, 0x27, 0x63,
	0x09, 0xf4, 0x4c, 0x11, 0x35, 0x96, 0x9b, 0xcb, 0xf3, 0x0c, 0xdd, 0x5d, 0xbb, 0x14, 0xe8, 0x95,
	0xaf, 0x68, 0x88, 0xd5, 0x6b, 0x81, 0xc4, 0xef, 0x50, 0x95, 0x44, 0x8a, 0x09, 0x6e, 0x95, 0x7a,
	0xe1, 0xdf, 0xf2, 0x35, 0xfb, 0x25, 0xc0, 0x2a, 0xd2, 0x89, 0x49, 0x1e, 0xd8, 0x22, 0xff, 0xfa,
	0x16, 0x5e, 0x9e, 0x7e, 0x9f, 0x7a, 0xce, 0xcd, 0xd4, 0x73, 0x7e, 0x4d, 0x3d, 0xe7, 0xf3, 0xcc,
	0xdb, 0xba, 0x99, 0x79, 0x5b, 0x3f, 0x67, 0xde, 0xd6, 0x45, 0x10, 0x33, 0x35, 0x1a, 0x0f, 0xf5,
	0x80, 0x02, 0xdd, 0xf0, 0xd8, 0xf4, 0x0e, 0xe6, 0xbd, 0x83, 0xab, 0x60, 0xf9, 0x2c, 0x14, 0x19,
	0xc8, 0x61, 0xd5, 0x3c, 0x0d, 0xcf, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0xdf, 0xfc, 0x68, 0x12,
	0x8e, 0x04, 0x00, 0x00,
}

func (m *EventSystemContractUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventSystemContractUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventSystemContractUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldContractAddress) > 0 {
		i -= len(m.OldContractAddress)
		copy(dAtA[i:], m.OldContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldContractAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.NewContractAddress) > 0 {
		i -= len(m.NewContractAddress)
		copy(dAtA[i:], m.NewContractAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventZRC20Deployed) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventZRC20Deployed) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventZRC20Deployed) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasLimit != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Erc20) > 0 {
		i -= len(m.Erc20)
		copy(dAtA[i:], m.Erc20)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Erc20)))
		i--
		dAtA[i] = 0x42
	}
	if m.CoinType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x38
	}
	if m.Decimals != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventZRC20WithdrawFeeUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventZRC20WithdrawFeeUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventZRC20WithdrawFeeUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.NewWithdrawFee) > 0 {
		i -= len(m.NewWithdrawFee)
		copy(dAtA[i:], m.NewWithdrawFee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewWithdrawFee)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OldWithdrawFee) > 0 {
		i -= len(m.OldWithdrawFee)
		copy(dAtA[i:], m.OldWithdrawFee)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldWithdrawFee)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Zrc20Address) > 0 {
		i -= len(m.Zrc20Address)
		copy(dAtA[i:], m.Zrc20Address)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Zrc20Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.CoinType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x18
	}
	if m.ChainId != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventZRC20PausedStatusUpdated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventZRC20PausedStatusUpdated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventZRC20PausedStatusUpdated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signer) > 0 {
		i -= len(m.Signer)
		copy(dAtA[i:], m.Signer)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Signer)))
		i--
		dAtA[i] = 0x22
	}
	if m.Action != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.Action))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Zrc20Addresses) > 0 {
		for iNdEx := len(m.Zrc20Addresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Zrc20Addresses[iNdEx])
			copy(dAtA[i:], m.Zrc20Addresses[iNdEx])
			i = encodeVarintEvents(dAtA, i, uint64(len(m.Zrc20Addresses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventSystemContractUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldContractAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventZRC20Deployed) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovEvents(uint64(m.ChainId))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovEvents(uint64(m.Decimals))
	}
	if m.CoinType != 0 {
		n += 1 + sovEvents(uint64(m.CoinType))
	}
	l = len(m.Erc20)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.GasLimit != 0 {
		n += 1 + sovEvents(uint64(m.GasLimit))
	}
	return n
}

func (m *EventZRC20WithdrawFeeUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovEvents(uint64(m.ChainId))
	}
	if m.CoinType != 0 {
		n += 1 + sovEvents(uint64(m.CoinType))
	}
	l = len(m.Zrc20Address)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldWithdrawFee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewWithdrawFee)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventZRC20PausedStatusUpdated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Zrc20Addresses) > 0 {
		for _, s := range m.Zrc20Addresses {
			l = len(s)
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	if m.Action != 0 {
		n += 1 + sovEvents(uint64(m.Action))
	}
	l = len(m.Signer)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventSystemContractUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventSystemContractUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventSystemContractUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventZRC20Deployed) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventZRC20Deployed: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventZRC20Deployed: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= common.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Erc20", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Erc20 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventZRC20WithdrawFeeUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventZRC20WithdrawFeeUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventZRC20WithdrawFeeUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= common.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zrc20Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zrc20Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldWithdrawFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldWithdrawFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewWithdrawFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewWithdrawFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventZRC20PausedStatusUpdated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventZRC20PausedStatusUpdated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventZRC20PausedStatusUpdated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zrc20Addresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Zrc20Addresses = append(m.Zrc20Addresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			m.Action = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Action |= UpdatePausedStatusAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
