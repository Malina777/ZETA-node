// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: emissions/emission_tracker.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EmissionCategory int32

const (
	EmissionCategory_ObserverEmission  EmissionCategory = 0
	EmissionCategory_ValidatorEmission EmissionCategory = 1
	EmissionCategory_TssSignerEmission EmissionCategory = 2
)

var EmissionCategory_name = map[int32]string{
	0: "ObserverEmission",
	1: "ValidatorEmission",
	2: "TssSignerEmission",
}

var EmissionCategory_value = map[string]int32{
	"ObserverEmission":  0,
	"ValidatorEmission": 1,
	"TssSignerEmission": 2,
}

func (x EmissionCategory) String() string {
	return proto.EnumName(EmissionCategory_name, int32(x))
}

func (EmissionCategory) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_505f49a0e8f6bd11, []int{0}
}

type EmissionTracker struct {
	Category            EmissionCategory                         `protobuf:"varint,1,opt,name=category,proto3,enum=zetachain.zetacore.emissions.EmissionCategory" json:"category,omitempty"`
	UndistributedAmount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,opt,name=undistributed_amount,json=undistributedAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Coins" json:"undistributed_amount" yaml:"undistributed_amount"`
}

func (m *EmissionTracker) Reset()         { *m = EmissionTracker{} }
func (m *EmissionTracker) String() string { return proto.CompactTextString(m) }
func (*EmissionTracker) ProtoMessage()    {}
func (*EmissionTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_505f49a0e8f6bd11, []int{0}
}
func (m *EmissionTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmissionTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmissionTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmissionTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmissionTracker.Merge(m, src)
}
func (m *EmissionTracker) XXX_Size() int {
	return m.Size()
}
func (m *EmissionTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_EmissionTracker.DiscardUnknown(m)
}

var xxx_messageInfo_EmissionTracker proto.InternalMessageInfo

func (m *EmissionTracker) GetCategory() EmissionCategory {
	if m != nil {
		return m.Category
	}
	return EmissionCategory_ObserverEmission
}

func init() {
	proto.RegisterEnum("zetachain.zetacore.emissions.EmissionCategory", EmissionCategory_name, EmissionCategory_value)
	proto.RegisterType((*EmissionTracker)(nil), "zetachain.zetacore.emissions.EmissionTracker")
}

func init() { proto.RegisterFile("emissions/emission_tracker.proto", fileDescriptor_505f49a0e8f6bd11) }

var fileDescriptor_505f49a0e8f6bd11 = []byte{
	// 334 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x48, 0xcd, 0xcd, 0x2c,
	0x2e, 0xce, 0xcc, 0xcf, 0x2b, 0xd6, 0x87, 0xb1, 0xe2, 0x4b, 0x8a, 0x12, 0x93, 0xb3, 0x53, 0x8b,
	0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0x64, 0xaa, 0x52, 0x4b, 0x12, 0x93, 0x33, 0x12, 0x33,
	0xf3, 0xf4, 0xc0, 0xac, 0xfc, 0xa2, 0x54, 0x3d, 0xb8, 0x26, 0x29, 0x91, 0xf4, 0xfc, 0xf4, 0x7c,
	0xb0, 0x42, 0x7d, 0x10, 0x0b, 0xa2, 0x47, 0xe9, 0x11, 0x23, 0x17, 0xbf, 0x2b, 0x54, 0x4d, 0x08,
	0xc4, 0x34, 0x21, 0x2f, 0x2e, 0x8e, 0xe4, 0xc4, 0x92, 0xd4, 0xf4, 0xfc, 0xa2, 0x4a, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0x3e, 0x23, 0x3d, 0x3d, 0x7c, 0x46, 0xeb, 0xc1, 0x0c, 0x70, 0x86, 0xea, 0x0a,
	0x82, 0xeb, 0x17, 0x6a, 0x62, 0xe4, 0x12, 0x29, 0xcd, 0x4b, 0xc9, 0x2c, 0x2e, 0x29, 0xca, 0x4c,
	0x2a, 0x2d, 0x49, 0x4d, 0x89, 0x4f, 0xcc, 0xcd, 0x2f, 0xcd, 0x2b, 0x91, 0x60, 0x52, 0x60, 0xd4,
	0xe0, 0x74, 0xf2, 0x3f, 0x71, 0x4f, 0x9e, 0xe1, 0xd6, 0x3d, 0x79, 0x8d, 0xf4, 0xcc, 0x92, 0x8c,
	0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0xfd, 0xe4, 0xfc, 0xe2, 0xdc, 0xfc, 0x62, 0x28, 0xa5, 0x5b,
	0x9c, 0x92, 0xad, 0x5f, 0x52, 0x59, 0x90, 0x5a, 0xac, 0xe7, 0x9c, 0x9f, 0x99, 0x57, 0xfc, 0xe9,
	0x9e, 0xbc, 0x74, 0x65, 0x62, 0x6e, 0x8e, 0x95, 0x12, 0x36, 0x53, 0x95, 0x82, 0x84, 0x51, 0x84,
	0x1d, 0xc1, 0xa2, 0x5a, 0x31, 0x5c, 0x02, 0xe8, 0x4e, 0x14, 0x12, 0xe1, 0x12, 0xf0, 0x4f, 0x2a,
	0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0x82, 0xc9, 0x09, 0x30, 0x08, 0x89, 0x72, 0x09, 0x86, 0x25, 0xe6,
	0x64, 0xa6, 0x24, 0x96, 0xe4, 0x23, 0x84, 0x19, 0x41, 0xc2, 0x21, 0xc5, 0xc5, 0xc1, 0x99, 0xe9,
	0x79, 0x48, 0xaa, 0x99, 0xa4, 0x58, 0x56, 0x2c, 0x91, 0x63, 0x74, 0xf2, 0x3a, 0xf1, 0x48, 0x8e,
	0xf1, 0xc2, 0x23, 0x39, 0xc6, 0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58,
	0x8e, 0xe1, 0xc6, 0x63, 0x39, 0x86, 0x28, 0x03, 0x24, 0x5f, 0x81, 0x82, 0x4d, 0x17, 0x1c, 0x82,
	0xfa, 0xb0, 0x10, 0xd4, 0xaf, 0xd0, 0x47, 0xc4, 0x29, 0xd8, 0x8f, 0x49, 0x6c, 0xe0, 0x58, 0x31,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x94, 0x2b, 0x27, 0x4f, 0xed, 0x01, 0x00, 0x00,
}

func (m *EmissionTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmissionTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmissionTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.UndistributedAmount.Size()
		i -= size
		if _, err := m.UndistributedAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEmissionTracker(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.Category != 0 {
		i = encodeVarintEmissionTracker(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintEmissionTracker(dAtA []byte, offset int, v uint64) int {
	offset -= sovEmissionTracker(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EmissionTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != 0 {
		n += 1 + sovEmissionTracker(uint64(m.Category))
	}
	l = m.UndistributedAmount.Size()
	n += 1 + l + sovEmissionTracker(uint64(l))
	return n
}

func sovEmissionTracker(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEmissionTracker(x uint64) (n int) {
	return sovEmissionTracker(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EmissionTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEmissionTracker
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmissionTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmissionTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmissionTracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= EmissionCategory(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UndistributedAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEmissionTracker
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEmissionTracker
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEmissionTracker
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UndistributedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEmissionTracker(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEmissionTracker
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEmissionTracker(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEmissionTracker
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmissionTracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEmissionTracker
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEmissionTracker
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEmissionTracker
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEmissionTracker
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEmissionTracker        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEmissionTracker          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEmissionTracker = fmt.Errorf("proto: unexpected end of group")
)
