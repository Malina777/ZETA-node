// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/emissions/events.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EmissionType int32

const (
	EmissionType_Slash   EmissionType = 0
	EmissionType_Rewards EmissionType = 1
)

var EmissionType_name = map[int32]string{
	0: "Slash",
	1: "Rewards",
}

var EmissionType_value = map[string]int32{
	"Slash":   0,
	"Rewards": 1,
}

func (x EmissionType) String() string {
	return proto.EnumName(EmissionType_name, int32(x))
}

func (EmissionType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_4915791d20923f90, []int{0}
}

type ObserverEmission struct {
	EmissionType    EmissionType                           `protobuf:"varint,1,opt,name=emission_type,json=emissionType,proto3,enum=zetachain.zetacore.emissions.EmissionType" json:"emission_type,omitempty"`
	ObserverAddress string                                 `protobuf:"bytes,2,opt,name=observer_address,json=observerAddress,proto3" json:"observer_address,omitempty"`
	Amount          github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,3,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
}

func (m *ObserverEmission) Reset()         { *m = ObserverEmission{} }
func (m *ObserverEmission) String() string { return proto.CompactTextString(m) }
func (*ObserverEmission) ProtoMessage()    {}
func (*ObserverEmission) Descriptor() ([]byte, []int) {
	return fileDescriptor_4915791d20923f90, []int{0}
}
func (m *ObserverEmission) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ObserverEmission) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ObserverEmission.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ObserverEmission) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ObserverEmission.Merge(m, src)
}
func (m *ObserverEmission) XXX_Size() int {
	return m.Size()
}
func (m *ObserverEmission) XXX_DiscardUnknown() {
	xxx_messageInfo_ObserverEmission.DiscardUnknown(m)
}

var xxx_messageInfo_ObserverEmission proto.InternalMessageInfo

func (m *ObserverEmission) GetEmissionType() EmissionType {
	if m != nil {
		return m.EmissionType
	}
	return EmissionType_Slash
}

func (m *ObserverEmission) GetObserverAddress() string {
	if m != nil {
		return m.ObserverAddress
	}
	return ""
}

type EventObserverEmissions struct {
	MsgTypeUrl string              `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	Emissions  []*ObserverEmission `protobuf:"bytes,2,rep,name=emissions,proto3" json:"emissions,omitempty"`
}

func (m *EventObserverEmissions) Reset()         { *m = EventObserverEmissions{} }
func (m *EventObserverEmissions) String() string { return proto.CompactTextString(m) }
func (*EventObserverEmissions) ProtoMessage()    {}
func (*EventObserverEmissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4915791d20923f90, []int{1}
}
func (m *EventObserverEmissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventObserverEmissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventObserverEmissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventObserverEmissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventObserverEmissions.Merge(m, src)
}
func (m *EventObserverEmissions) XXX_Size() int {
	return m.Size()
}
func (m *EventObserverEmissions) XXX_DiscardUnknown() {
	xxx_messageInfo_EventObserverEmissions.DiscardUnknown(m)
}

var xxx_messageInfo_EventObserverEmissions proto.InternalMessageInfo

func (m *EventObserverEmissions) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventObserverEmissions) GetEmissions() []*ObserverEmission {
	if m != nil {
		return m.Emissions
	}
	return nil
}

type EventBlockEmissions struct {
	MsgTypeUrl               string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	BondFactor               string `protobuf:"bytes,2,opt,name=bond_factor,json=bondFactor,proto3" json:"bond_factor,omitempty"`
	ReservesFactor           string `protobuf:"bytes,3,opt,name=reserves_factor,json=reservesFactor,proto3" json:"reserves_factor,omitempty"`
	DurationFactor           string `protobuf:"bytes,4,opt,name=duration_factor,json=durationFactor,proto3" json:"duration_factor,omitempty"`
	ValidatorRewardsForBlock string `protobuf:"bytes,5,opt,name=validator_rewards_for_block,json=validatorRewardsForBlock,proto3" json:"validator_rewards_for_block,omitempty"`
	ObserverRewardsForBlock  string `protobuf:"bytes,6,opt,name=observer_rewards_for_block,json=observerRewardsForBlock,proto3" json:"observer_rewards_for_block,omitempty"`
	TssRewardsForBlock       string `protobuf:"bytes,7,opt,name=tss_rewards_for_block,json=tssRewardsForBlock,proto3" json:"tss_rewards_for_block,omitempty"`
}

func (m *EventBlockEmissions) Reset()         { *m = EventBlockEmissions{} }
func (m *EventBlockEmissions) String() string { return proto.CompactTextString(m) }
func (*EventBlockEmissions) ProtoMessage()    {}
func (*EventBlockEmissions) Descriptor() ([]byte, []int) {
	return fileDescriptor_4915791d20923f90, []int{2}
}
func (m *EventBlockEmissions) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventBlockEmissions) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventBlockEmissions.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventBlockEmissions) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventBlockEmissions.Merge(m, src)
}
func (m *EventBlockEmissions) XXX_Size() int {
	return m.Size()
}
func (m *EventBlockEmissions) XXX_DiscardUnknown() {
	xxx_messageInfo_EventBlockEmissions.DiscardUnknown(m)
}

var xxx_messageInfo_EventBlockEmissions proto.InternalMessageInfo

func (m *EventBlockEmissions) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventBlockEmissions) GetBondFactor() string {
	if m != nil {
		return m.BondFactor
	}
	return ""
}

func (m *EventBlockEmissions) GetReservesFactor() string {
	if m != nil {
		return m.ReservesFactor
	}
	return ""
}

func (m *EventBlockEmissions) GetDurationFactor() string {
	if m != nil {
		return m.DurationFactor
	}
	return ""
}

func (m *EventBlockEmissions) GetValidatorRewardsForBlock() string {
	if m != nil {
		return m.ValidatorRewardsForBlock
	}
	return ""
}

func (m *EventBlockEmissions) GetObserverRewardsForBlock() string {
	if m != nil {
		return m.ObserverRewardsForBlock
	}
	return ""
}

func (m *EventBlockEmissions) GetTssRewardsForBlock() string {
	if m != nil {
		return m.TssRewardsForBlock
	}
	return ""
}

func init() {
	proto.RegisterEnum("zetachain.zetacore.emissions.EmissionType", EmissionType_name, EmissionType_value)
	proto.RegisterType((*ObserverEmission)(nil), "zetachain.zetacore.emissions.ObserverEmission")
	proto.RegisterType((*EventObserverEmissions)(nil), "zetachain.zetacore.emissions.EventObserverEmissions")
	proto.RegisterType((*EventBlockEmissions)(nil), "zetachain.zetacore.emissions.EventBlockEmissions")
}

func init() { proto.RegisterFile("zetachain/emissions/events.proto", fileDescriptor_4915791d20923f90) }

var fileDescriptor_4915791d20923f90 = []byte{
	// 496 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcf, 0x6e, 0xd3, 0x40,
	0x10, 0xc6, 0xb3, 0x69, 0x9b, 0x2a, 0x93, 0xd0, 0x46, 0xcb, 0x3f, 0x2b, 0x20, 0x27, 0xca, 0x01,
	0x42, 0x45, 0x6d, 0x28, 0x47, 0xc4, 0x81, 0x48, 0x8d, 0x04, 0x42, 0xaa, 0x64, 0xe0, 0xc2, 0xc5,
	0x5a, 0xdb, 0x5b, 0xc7, 0xaa, 0xed, 0x8d, 0x76, 0x36, 0x81, 0xf2, 0x04, 0x1c, 0x79, 0x08, 0x0e,
	0x3c, 0x4a, 0x8f, 0x3d, 0x21, 0xe0, 0x50, 0xa1, 0xe4, 0x45, 0x90, 0xd7, 0x7f, 0x1a, 0x05, 0x54,
	0xa9, 0xa7, 0x6c, 0x3e, 0xfd, 0x3e, 0xcf, 0x7c, 0x3b, 0x3b, 0xd0, 0xff, 0xcc, 0x15, 0xf3, 0x27,
	0x2c, 0x4a, 0x6d, 0x9e, 0x44, 0x88, 0x91, 0x48, 0xd1, 0xe6, 0x73, 0x9e, 0x2a, 0xb4, 0xa6, 0x52,
	0x28, 0x41, 0xef, 0x57, 0x84, 0xa5, 0x4f, 0x42, 0x72, 0xab, 0x42, 0xbb, 0xb7, 0x42, 0x11, 0x0a,
	0x0d, 0xda, 0xd9, 0x29, 0xf7, 0x0c, 0x7e, 0x10, 0xe8, 0x1c, 0x79, 0xc8, 0xe5, 0x9c, 0xcb, 0xc3,
	0x82, 0xa5, 0x47, 0x70, 0xa3, 0xf4, 0xb9, 0xea, 0x74, 0xca, 0x0d, 0xd2, 0x27, 0xc3, 0x9d, 0x83,
	0x3d, 0xeb, 0xaa, 0x02, 0x56, 0x69, 0x7f, 0x77, 0x3a, 0xe5, 0x4e, 0x9b, 0xaf, 0xfc, 0xa3, 0x8f,
	0xa0, 0x23, 0x8a, 0x22, 0x2e, 0x0b, 0x02, 0xc9, 0x11, 0x8d, 0x7a, 0x9f, 0x0c, 0x9b, 0xce, 0x6e,
	0xa9, 0xbf, 0xcc, 0x65, 0x3a, 0x86, 0x06, 0x4b, 0xc4, 0x2c, 0x55, 0xc6, 0x46, 0x06, 0x8c, 0xac,
	0xb3, 0x8b, 0x5e, 0xed, 0xf7, 0x45, 0xef, 0x41, 0x18, 0xa9, 0xc9, 0xcc, 0xb3, 0x7c, 0x91, 0xd8,
	0xbe, 0xc0, 0x44, 0x60, 0xf1, 0xb3, 0x8f, 0xc1, 0x89, 0x9d, 0x75, 0x89, 0xd6, 0xab, 0x54, 0x39,
	0x85, 0x7b, 0xf0, 0x85, 0xc0, 0x9d, 0xc3, 0xec, 0x76, 0xd6, 0xd3, 0x21, 0xed, 0x43, 0x3b, 0xc1,
	0x50, 0x27, 0x73, 0x67, 0x32, 0xd6, 0xe9, 0x9a, 0x0e, 0x24, 0x18, 0x66, 0xcd, 0xbe, 0x97, 0x31,
	0x7d, 0x03, 0xcd, 0x2a, 0x97, 0x51, 0xef, 0x6f, 0x0c, 0x5b, 0x07, 0xd6, 0xd5, 0xe1, 0xd7, 0xab,
	0x38, 0x97, 0x1f, 0x18, 0xfc, 0xaa, 0xc3, 0x4d, 0xdd, 0xca, 0x28, 0x16, 0xfe, 0xc9, 0x75, 0xfa,
	0xe8, 0x41, 0xcb, 0x13, 0x69, 0xe0, 0x1e, 0x33, 0x5f, 0x09, 0x59, 0x5c, 0x19, 0x64, 0xd2, 0x58,
	0x2b, 0xf4, 0x21, 0xec, 0x4a, 0xae, 0x2b, 0x63, 0x09, 0xe9, 0x6b, 0x73, 0x76, 0x4a, 0xf9, 0x12,
	0x0c, 0x66, 0x92, 0xa9, 0x6c, 0xa4, 0x05, 0xb8, 0x99, 0x83, 0xa5, 0x5c, 0x80, 0x2f, 0xe0, 0xde,
	0x9c, 0xc5, 0x51, 0xc0, 0x94, 0x90, 0xae, 0xe4, 0x1f, 0x99, 0x0c, 0xd0, 0x3d, 0x16, 0xd2, 0xf5,
	0xb2, 0xe6, 0x8d, 0x2d, 0x6d, 0x32, 0x2a, 0xc4, 0xc9, 0x89, 0xb1, 0x90, 0x3a, 0x1c, 0x7d, 0x0e,
	0xdd, 0x6a, 0xd2, 0xff, 0xba, 0x1b, 0xda, 0x7d, 0xb7, 0x24, 0xd6, 0xcd, 0x4f, 0xe1, 0xb6, 0x42,
	0xfc, 0x8f, 0x6f, 0x5b, 0xfb, 0xa8, 0x42, 0x5c, 0xb3, 0xec, 0x3d, 0x86, 0xf6, 0xea, 0xbb, 0xa3,
	0x4d, 0xd8, 0x7a, 0x1b, 0x33, 0x9c, 0x74, 0x6a, 0xb4, 0x05, 0xdb, 0x05, 0xdd, 0x21, 0xdd, 0xcd,
	0xef, 0xdf, 0x4c, 0x32, 0x7a, 0x7d, 0xb6, 0x30, 0xc9, 0xf9, 0xc2, 0x24, 0x7f, 0x16, 0x26, 0xf9,
	0xba, 0x34, 0x6b, 0xe7, 0x4b, 0xb3, 0xf6, 0x73, 0x69, 0xd6, 0x3e, 0x3c, 0x59, 0x79, 0x5e, 0xd9,
	0x78, 0xf7, 0xf3, 0x4d, 0x2b, 0x27, 0x6d, 0x7f, 0x5a, 0x59, 0x3a, 0xfd, 0xd8, 0xbc, 0x86, 0x5e,
	0xa0, 0x67, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x5f, 0xff, 0xf3, 0x98, 0x03, 0x00, 0x00,
}

func (m *ObserverEmission) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ObserverEmission) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ObserverEmission) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintEvents(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ObserverAddress) > 0 {
		i -= len(m.ObserverAddress)
		copy(dAtA[i:], m.ObserverAddress)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ObserverAddress)))
		i--
		dAtA[i] = 0x12
	}
	if m.EmissionType != 0 {
		i = encodeVarintEvents(dAtA, i, uint64(m.EmissionType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EventObserverEmissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventObserverEmissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventObserverEmissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Emissions) > 0 {
		for iNdEx := len(m.Emissions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Emissions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintEvents(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventBlockEmissions) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventBlockEmissions) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventBlockEmissions) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TssRewardsForBlock) > 0 {
		i -= len(m.TssRewardsForBlock)
		copy(dAtA[i:], m.TssRewardsForBlock)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TssRewardsForBlock)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ObserverRewardsForBlock) > 0 {
		i -= len(m.ObserverRewardsForBlock)
		copy(dAtA[i:], m.ObserverRewardsForBlock)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ObserverRewardsForBlock)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ValidatorRewardsForBlock) > 0 {
		i -= len(m.ValidatorRewardsForBlock)
		copy(dAtA[i:], m.ValidatorRewardsForBlock)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ValidatorRewardsForBlock)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DurationFactor) > 0 {
		i -= len(m.DurationFactor)
		copy(dAtA[i:], m.DurationFactor)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.DurationFactor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.ReservesFactor) > 0 {
		i -= len(m.ReservesFactor)
		copy(dAtA[i:], m.ReservesFactor)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ReservesFactor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BondFactor) > 0 {
		i -= len(m.BondFactor)
		copy(dAtA[i:], m.BondFactor)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.BondFactor)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ObserverEmission) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EmissionType != 0 {
		n += 1 + sovEvents(uint64(m.EmissionType))
	}
	l = len(m.ObserverAddress)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovEvents(uint64(l))
	return n
}

func (m *EventObserverEmissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	if len(m.Emissions) > 0 {
		for _, e := range m.Emissions {
			l = e.Size()
			n += 1 + l + sovEvents(uint64(l))
		}
	}
	return n
}

func (m *EventBlockEmissions) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.BondFactor)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ReservesFactor)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.DurationFactor)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ValidatorRewardsForBlock)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ObserverRewardsForBlock)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TssRewardsForBlock)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ObserverEmission) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ObserverEmission: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ObserverEmission: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmissionType", wireType)
			}
			m.EmissionType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EmissionType |= EmissionType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventObserverEmissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventObserverEmissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventObserverEmissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emissions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Emissions = append(m.Emissions, &ObserverEmission{})
			if err := m.Emissions[len(m.Emissions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventBlockEmissions) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventBlockEmissions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventBlockEmissions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BondFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BondFactor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReservesFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReservesFactor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DurationFactor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DurationFactor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorRewardsForBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorRewardsForBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserverRewardsForBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserverRewardsForBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssRewardsForBlock", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssRewardsForBlock = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
