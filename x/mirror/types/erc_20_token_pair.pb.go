// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: mirror/erc_20_token_pair.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ERC20TokenPair struct {
	HomeChain                  string `protobuf:"bytes,1,opt,name=homeChain,proto3" json:"homeChain,omitempty"`
	HomeERC20ContractAddress   string `protobuf:"bytes,2,opt,name=homeERC20ContractAddress,proto3" json:"homeERC20ContractAddress,omitempty"`
	Name                       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Symbol                     string `protobuf:"bytes,4,opt,name=symbol,proto3" json:"symbol,omitempty"`
	Decimals                   uint32 `protobuf:"varint,5,opt,name=decimals,proto3" json:"decimals,omitempty"`
	MirrorERC20ContractAddress string `protobuf:"bytes,6,opt,name=mirrorERC20ContractAddress,proto3" json:"mirrorERC20ContractAddress,omitempty"`
}

func (m *ERC20TokenPair) Reset()         { *m = ERC20TokenPair{} }
func (m *ERC20TokenPair) String() string { return proto.CompactTextString(m) }
func (*ERC20TokenPair) ProtoMessage()    {}
func (*ERC20TokenPair) Descriptor() ([]byte, []int) {
	return fileDescriptor_41d9b772762db712, []int{0}
}
func (m *ERC20TokenPair) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ERC20TokenPair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ERC20TokenPair.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ERC20TokenPair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ERC20TokenPair.Merge(m, src)
}
func (m *ERC20TokenPair) XXX_Size() int {
	return m.Size()
}
func (m *ERC20TokenPair) XXX_DiscardUnknown() {
	xxx_messageInfo_ERC20TokenPair.DiscardUnknown(m)
}

var xxx_messageInfo_ERC20TokenPair proto.InternalMessageInfo

func (m *ERC20TokenPair) GetHomeChain() string {
	if m != nil {
		return m.HomeChain
	}
	return ""
}

func (m *ERC20TokenPair) GetHomeERC20ContractAddress() string {
	if m != nil {
		return m.HomeERC20ContractAddress
	}
	return ""
}

func (m *ERC20TokenPair) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ERC20TokenPair) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *ERC20TokenPair) GetDecimals() uint32 {
	if m != nil {
		return m.Decimals
	}
	return 0
}

func (m *ERC20TokenPair) GetMirrorERC20ContractAddress() string {
	if m != nil {
		return m.MirrorERC20ContractAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*ERC20TokenPair)(nil), "zetachain.zetacore.mirror.ERC20TokenPair")
}

func init() { proto.RegisterFile("mirror/erc_20_token_pair.proto", fileDescriptor_41d9b772762db712) }

var fileDescriptor_41d9b772762db712 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0xcd, 0x2c, 0x2a,
	0xca, 0x2f, 0xd2, 0x4f, 0x2d, 0x4a, 0x8e, 0x37, 0x32, 0x88, 0x2f, 0xc9, 0xcf, 0x4e, 0xcd, 0x8b,
	0x2f, 0x48, 0xcc, 0x2c, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x92, 0xac, 0x4a, 0x2d, 0x49,
	0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0x03, 0xb3, 0xf2, 0x8b, 0x52, 0xf5, 0x20, 0x5a, 0x94, 0x3e,
	0x31, 0x72, 0xf1, 0xb9, 0x06, 0x39, 0x1b, 0x19, 0x84, 0x80, 0x34, 0x05, 0x24, 0x66, 0x16, 0x09,
	0xc9, 0x70, 0x71, 0x66, 0xe4, 0xe7, 0xa6, 0x3a, 0x83, 0xd4, 0x4b, 0x30, 0x2a, 0x30, 0x6a, 0x70,
	0x06, 0x21, 0x04, 0x84, 0xac, 0xb8, 0x24, 0x40, 0x1c, 0xb0, 0x1e, 0xe7, 0xfc, 0xbc, 0x92, 0xa2,
	0xc4, 0xe4, 0x12, 0xc7, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0x09, 0x26, 0xb0, 0x62, 0x9c, 0xf2,
	0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12, 0xcc, 0x60, 0x75, 0x60, 0xb6, 0x90, 0x18,
	0x17, 0x5b, 0x71, 0x65, 0x6e, 0x52, 0x7e, 0x8e, 0x04, 0x0b, 0x58, 0x14, 0xca, 0x13, 0x92, 0xe2,
	0xe2, 0x48, 0x49, 0x4d, 0xce, 0xcc, 0x4d, 0xcc, 0x29, 0x96, 0x60, 0x55, 0x60, 0xd4, 0xe0, 0x0d,
	0x82, 0xf3, 0x85, 0xec, 0xb8, 0xa4, 0x20, 0xce, 0xc7, 0xea, 0x0a, 0x36, 0xb0, 0x39, 0x78, 0x54,
	0x38, 0xb9, 0x9f, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13,
	0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x6e, 0x7a, 0x66,
	0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0x28, 0xa8, 0x74, 0xc1, 0xa1, 0xa6, 0x0f,
	0x0b, 0x35, 0xfd, 0x0a, 0x7d, 0x68, 0x50, 0x97, 0x54, 0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0xc3,
	0xd7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x00, 0x09, 0x11, 0x14, 0x81, 0x01, 0x00, 0x00,
}

func (m *ERC20TokenPair) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ERC20TokenPair) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ERC20TokenPair) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MirrorERC20ContractAddress) > 0 {
		i -= len(m.MirrorERC20ContractAddress)
		copy(dAtA[i:], m.MirrorERC20ContractAddress)
		i = encodeVarintErc_20TokenPair(dAtA, i, uint64(len(m.MirrorERC20ContractAddress)))
		i--
		dAtA[i] = 0x32
	}
	if m.Decimals != 0 {
		i = encodeVarintErc_20TokenPair(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintErc_20TokenPair(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintErc_20TokenPair(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.HomeERC20ContractAddress) > 0 {
		i -= len(m.HomeERC20ContractAddress)
		copy(dAtA[i:], m.HomeERC20ContractAddress)
		i = encodeVarintErc_20TokenPair(dAtA, i, uint64(len(m.HomeERC20ContractAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.HomeChain) > 0 {
		i -= len(m.HomeChain)
		copy(dAtA[i:], m.HomeChain)
		i = encodeVarintErc_20TokenPair(dAtA, i, uint64(len(m.HomeChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintErc_20TokenPair(dAtA []byte, offset int, v uint64) int {
	offset -= sovErc_20TokenPair(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ERC20TokenPair) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HomeChain)
	if l > 0 {
		n += 1 + l + sovErc_20TokenPair(uint64(l))
	}
	l = len(m.HomeERC20ContractAddress)
	if l > 0 {
		n += 1 + l + sovErc_20TokenPair(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovErc_20TokenPair(uint64(l))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovErc_20TokenPair(uint64(l))
	}
	if m.Decimals != 0 {
		n += 1 + sovErc_20TokenPair(uint64(m.Decimals))
	}
	l = len(m.MirrorERC20ContractAddress)
	if l > 0 {
		n += 1 + l + sovErc_20TokenPair(uint64(l))
	}
	return n
}

func sovErc_20TokenPair(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozErc_20TokenPair(x uint64) (n int) {
	return sovErc_20TokenPair(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ERC20TokenPair) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowErc_20TokenPair
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ERC20TokenPair: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ERC20TokenPair: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc_20TokenPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HomeERC20ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc_20TokenPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HomeERC20ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc_20TokenPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc_20TokenPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc_20TokenPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MirrorERC20ContractAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowErc_20TokenPair
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MirrorERC20ContractAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipErc_20TokenPair(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthErc_20TokenPair
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipErc_20TokenPair(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowErc_20TokenPair
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErc_20TokenPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowErc_20TokenPair
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthErc_20TokenPair
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupErc_20TokenPair
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthErc_20TokenPair
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthErc_20TokenPair        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowErc_20TokenPair          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupErc_20TokenPair = fmt.Errorf("proto: unexpected end of group")
)
