// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetaobserver/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c8b44c277c1476, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c8b44c277c1476, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryBallotByIdentifierRequest struct {
	BallotIdentifier string `protobuf:"bytes,1,opt,name=ballotIdentifier,proto3" json:"ballotIdentifier,omitempty"`
}

func (m *QueryBallotByIdentifierRequest) Reset()         { *m = QueryBallotByIdentifierRequest{} }
func (m *QueryBallotByIdentifierRequest) String() string { return proto.CompactTextString(m) }
func (*QueryBallotByIdentifierRequest) ProtoMessage()    {}
func (*QueryBallotByIdentifierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c8b44c277c1476, []int{2}
}
func (m *QueryBallotByIdentifierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotByIdentifierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotByIdentifierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotByIdentifierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotByIdentifierRequest.Merge(m, src)
}
func (m *QueryBallotByIdentifierRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotByIdentifierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotByIdentifierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotByIdentifierRequest proto.InternalMessageInfo

func (m *QueryBallotByIdentifierRequest) GetBallotIdentifier() string {
	if m != nil {
		return m.BallotIdentifier
	}
	return ""
}

type QueryBallotByIdentifierResponse struct {
	Ballot string `protobuf:"bytes,1,opt,name=ballot,proto3" json:"ballot,omitempty"`
}

func (m *QueryBallotByIdentifierResponse) Reset()         { *m = QueryBallotByIdentifierResponse{} }
func (m *QueryBallotByIdentifierResponse) String() string { return proto.CompactTextString(m) }
func (*QueryBallotByIdentifierResponse) ProtoMessage()    {}
func (*QueryBallotByIdentifierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c8b44c277c1476, []int{3}
}
func (m *QueryBallotByIdentifierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryBallotByIdentifierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryBallotByIdentifierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryBallotByIdentifierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryBallotByIdentifierResponse.Merge(m, src)
}
func (m *QueryBallotByIdentifierResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryBallotByIdentifierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryBallotByIdentifierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryBallotByIdentifierResponse proto.InternalMessageInfo

func (m *QueryBallotByIdentifierResponse) GetBallot() string {
	if m != nil {
		return m.Ballot
	}
	return ""
}

type QueryObserversByChainAndTypeRequest struct {
	ObservationChain string `protobuf:"bytes,1,opt,name=observationChain,proto3" json:"observationChain,omitempty"`
	ObservationType  string `protobuf:"bytes,2,opt,name=observationType,proto3" json:"observationType,omitempty"`
}

func (m *QueryObserversByChainAndTypeRequest) Reset()         { *m = QueryObserversByChainAndTypeRequest{} }
func (m *QueryObserversByChainAndTypeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryObserversByChainAndTypeRequest) ProtoMessage()    {}
func (*QueryObserversByChainAndTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c8b44c277c1476, []int{4}
}
func (m *QueryObserversByChainAndTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObserversByChainAndTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObserversByChainAndTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObserversByChainAndTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObserversByChainAndTypeRequest.Merge(m, src)
}
func (m *QueryObserversByChainAndTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryObserversByChainAndTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObserversByChainAndTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObserversByChainAndTypeRequest proto.InternalMessageInfo

func (m *QueryObserversByChainAndTypeRequest) GetObservationChain() string {
	if m != nil {
		return m.ObservationChain
	}
	return ""
}

func (m *QueryObserversByChainAndTypeRequest) GetObservationType() string {
	if m != nil {
		return m.ObservationType
	}
	return ""
}

type QueryObserversByChainAndTypeResponse struct {
	ObserverMapper string `protobuf:"bytes,1,opt,name=observerMapper,proto3" json:"observerMapper,omitempty"`
}

func (m *QueryObserversByChainAndTypeResponse) Reset()         { *m = QueryObserversByChainAndTypeResponse{} }
func (m *QueryObserversByChainAndTypeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryObserversByChainAndTypeResponse) ProtoMessage()    {}
func (*QueryObserversByChainAndTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c8b44c277c1476, []int{5}
}
func (m *QueryObserversByChainAndTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryObserversByChainAndTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryObserversByChainAndTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryObserversByChainAndTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryObserversByChainAndTypeResponse.Merge(m, src)
}
func (m *QueryObserversByChainAndTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryObserversByChainAndTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryObserversByChainAndTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryObserversByChainAndTypeResponse proto.InternalMessageInfo

func (m *QueryObserversByChainAndTypeResponse) GetObserverMapper() string {
	if m != nil {
		return m.ObserverMapper
	}
	return ""
}

type QuerySupportedChains struct {
}

func (m *QuerySupportedChains) Reset()         { *m = QuerySupportedChains{} }
func (m *QuerySupportedChains) String() string { return proto.CompactTextString(m) }
func (*QuerySupportedChains) ProtoMessage()    {}
func (*QuerySupportedChains) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c8b44c277c1476, []int{6}
}
func (m *QuerySupportedChains) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupportedChains) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupportedChains.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupportedChains) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupportedChains.Merge(m, src)
}
func (m *QuerySupportedChains) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupportedChains) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupportedChains.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupportedChains proto.InternalMessageInfo

type QuerySupportedChainsResponse struct {
	Chains string `protobuf:"bytes,1,opt,name=Chains,proto3" json:"Chains,omitempty"`
}

func (m *QuerySupportedChainsResponse) Reset()         { *m = QuerySupportedChainsResponse{} }
func (m *QuerySupportedChainsResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySupportedChainsResponse) ProtoMessage()    {}
func (*QuerySupportedChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_84c8b44c277c1476, []int{7}
}
func (m *QuerySupportedChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySupportedChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySupportedChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySupportedChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySupportedChainsResponse.Merge(m, src)
}
func (m *QuerySupportedChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySupportedChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySupportedChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySupportedChainsResponse proto.InternalMessageInfo

func (m *QuerySupportedChainsResponse) GetChains() string {
	if m != nil {
		return m.Chains
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "zetachain.zetacore.zetaobserver.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "zetachain.zetacore.zetaobserver.QueryParamsResponse")
	proto.RegisterType((*QueryBallotByIdentifierRequest)(nil), "zetachain.zetacore.zetaobserver.QueryBallotByIdentifierRequest")
	proto.RegisterType((*QueryBallotByIdentifierResponse)(nil), "zetachain.zetacore.zetaobserver.QueryBallotByIdentifierResponse")
	proto.RegisterType((*QueryObserversByChainAndTypeRequest)(nil), "zetachain.zetacore.zetaobserver.QueryObserversByChainAndTypeRequest")
	proto.RegisterType((*QueryObserversByChainAndTypeResponse)(nil), "zetachain.zetacore.zetaobserver.QueryObserversByChainAndTypeResponse")
	proto.RegisterType((*QuerySupportedChains)(nil), "zetachain.zetacore.zetaobserver.QuerySupportedChains")
	proto.RegisterType((*QuerySupportedChainsResponse)(nil), "zetachain.zetacore.zetaobserver.QuerySupportedChainsResponse")
}

func init() { proto.RegisterFile("zetaobserver/query.proto", fileDescriptor_84c8b44c277c1476) }

var fileDescriptor_84c8b44c277c1476 = []byte{
	// 595 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x6b, 0x13, 0x41,
	0x18, 0xcd, 0x06, 0x0d, 0x38, 0x82, 0x95, 0x31, 0xd4, 0xb8, 0x94, 0x4d, 0x59, 0xa5, 0x96, 0x82,
	0x3b, 0xa4, 0x51, 0xa1, 0x07, 0x51, 0xa3, 0x05, 0x15, 0xab, 0x35, 0x7a, 0x12, 0x21, 0xcc, 0x26,
	0xe3, 0x76, 0x25, 0xd9, 0x99, 0xee, 0x4c, 0x82, 0x6b, 0xc8, 0xc5, 0x5f, 0x20, 0x7a, 0xf4, 0xdf,
	0x78, 0xea, 0xb1, 0xe0, 0xc5, 0x93, 0x48, 0xe2, 0x45, 0xfc, 0x13, 0xb2, 0x33, 0x93, 0x34, 0xbb,
	0x49, 0x9a, 0xd8, 0xde, 0x66, 0xdf, 0x7c, 0xef, 0x7d, 0xef, 0x7d, 0xf3, 0x25, 0xa0, 0xf0, 0x81,
	0x08, 0x4c, 0x5d, 0x4e, 0xc2, 0x0e, 0x09, 0xd1, 0x7e, 0x9b, 0x84, 0x91, 0xc3, 0x42, 0x2a, 0x28,
	0x2c, 0xc6, 0x37, 0xf5, 0x3d, 0xec, 0x07, 0x8e, 0x3c, 0xd1, 0x90, 0x38, 0xe3, 0xc5, 0xe6, 0x8a,
	0x47, 0xa9, 0xd7, 0x24, 0x08, 0x33, 0x1f, 0xe1, 0x20, 0xa0, 0x02, 0x0b, 0x9f, 0x06, 0x5c, 0xd1,
	0xcd, 0x8d, 0x3a, 0xe5, 0x2d, 0xca, 0x91, 0x8b, 0x39, 0x51, 0xba, 0xa8, 0x53, 0x72, 0x89, 0xc0,
	0x25, 0xc4, 0xb0, 0xe7, 0x07, 0xb2, 0x58, 0xd7, 0xe6, 0x3d, 0xea, 0x51, 0x79, 0x44, 0xf1, 0x49,
	0xa3, 0x57, 0x12, 0xd6, 0x18, 0x0e, 0x71, 0x4b, 0x8b, 0xdb, 0x79, 0x00, 0x5f, 0xc4, 0x92, 0xbb,
	0x12, 0xac, 0x92, 0xfd, 0x36, 0xe1, 0xc2, 0x7e, 0x03, 0x2e, 0x25, 0x50, 0xce, 0x68, 0xc0, 0x09,
	0xdc, 0x06, 0x39, 0x45, 0x2e, 0x18, 0xab, 0xc6, 0xfa, 0xf9, 0xcd, 0xeb, 0xce, 0x9c, 0x64, 0x8e,
	0x12, 0xa8, 0x9c, 0x39, 0xf8, 0x59, 0xcc, 0x54, 0x35, 0xd9, 0x7e, 0x0a, 0x2c, 0xa9, 0x5e, 0xc1,
	0xcd, 0x26, 0x15, 0x95, 0xe8, 0x71, 0x83, 0x04, 0xc2, 0x7f, 0xeb, 0x93, 0x50, 0xf7, 0x87, 0x1b,
	0xe0, 0xa2, 0x2b, 0x2f, 0x8f, 0xae, 0x64, 0xcb, 0x73, 0xd5, 0x09, 0xdc, 0xde, 0x02, 0xc5, 0x99,
	0x6a, 0xda, 0xf7, 0x32, 0xc8, 0x29, 0x9a, 0x16, 0xd1, 0x5f, 0x76, 0x17, 0x5c, 0x95, 0xd4, 0xe7,
	0xda, 0x2e, 0xaf, 0x44, 0x0f, 0xe2, 0x30, 0xf7, 0x83, 0xc6, 0xab, 0x88, 0x91, 0x31, 0x37, 0x2a,
	0x90, 0x9c, 0xb4, 0xac, 0x18, 0xba, 0x49, 0xe3, 0x70, 0x1d, 0x2c, 0x8d, 0x61, 0xb1, 0x4a, 0x21,
	0x2b, 0x4b, 0xd3, 0xb0, 0xfd, 0x0c, 0x5c, 0x3b, 0xbe, 0xb9, 0x36, 0xbf, 0x06, 0x2e, 0x0c, 0xc7,
	0xb9, 0x83, 0x19, 0x1b, 0x4d, 0x22, 0x85, 0xda, 0xcb, 0x20, 0x2f, 0xf5, 0x5e, 0xb6, 0x19, 0xa3,
	0xa1, 0x20, 0x0d, 0xa9, 0xc6, 0xed, 0xdb, 0x60, 0x65, 0x1a, 0x3e, 0x3e, 0x1c, 0x85, 0x0c, 0x87,
	0xa3, 0xbe, 0x36, 0xff, 0xe6, 0xc0, 0x59, 0x49, 0x84, 0x5f, 0x0d, 0x90, 0x53, 0x0f, 0x09, 0xcb,
	0x73, 0x5f, 0x7c, 0x72, 0x9b, 0xcc, 0x9b, 0xff, 0x47, 0x52, 0xbe, 0xec, 0xb5, 0x8f, 0xdf, 0x7f,
	0x7f, 0xc9, 0xae, 0x42, 0x0b, 0x8d, 0xd8, 0x68, 0xca, 0x1e, 0xc3, 0x3f, 0x06, 0x80, 0x93, 0x6f,
	0x0f, 0xef, 0x2e, 0xd6, 0x74, 0xe6, 0x0e, 0x9a, 0xf7, 0x4e, 0x2e, 0xa0, 0x13, 0xec, 0xca, 0x04,
	0x4f, 0xe0, 0x23, 0xe9, 0xfb, 0xc6, 0x51, 0x84, 0x58, 0x2a, 0x99, 0xa5, 0x43, 0x05, 0x09, 0x6b,
	0x6e, 0x54, 0xf3, 0x47, 0x32, 0xa8, 0x9b, 0x5e, 0xf5, 0x1e, 0xfc, 0x9c, 0x05, 0x97, 0x67, 0xec,
	0x0b, 0x7c, 0xb8, 0x98, 0xdf, 0xe3, 0x77, 0xdd, 0xdc, 0x3e, 0xa5, 0x8a, 0x8e, 0xfe, 0x4e, 0x46,
	0x6f, 0x40, 0x77, 0x7e, 0xf4, 0xe1, 0x81, 0xc7, 0xf1, 0x65, 0x61, 0x0d, 0x07, 0x8d, 0x9a, 0x88,
	0x18, 0x41, 0xdd, 0xf4, 0xef, 0xab, 0x97, 0x80, 0xe2, 0x96, 0x3d, 0xf8, 0xcd, 0x00, 0x4b, 0xa9,
	0xe5, 0x86, 0xb7, 0x16, 0x8b, 0x91, 0xa2, 0x99, 0x77, 0x4e, 0x44, 0x1b, 0xa5, 0xde, 0x92, 0xa9,
	0xcb, 0xb0, 0x34, 0x3f, 0x35, 0x4f, 0x4a, 0x54, 0x76, 0x0e, 0xfa, 0x96, 0x71, 0xd8, 0xb7, 0x8c,
	0x5f, 0x7d, 0xcb, 0xf8, 0x34, 0xb0, 0x32, 0x87, 0x03, 0x2b, 0xf3, 0x63, 0x60, 0x65, 0x5e, 0x97,
	0x3d, 0x5f, 0xec, 0xb5, 0x5d, 0xa7, 0x4e, 0x5b, 0x53, 0x65, 0xdf, 0x27, 0x85, 0xe3, 0xb9, 0x71,
	0x37, 0x27, 0xff, 0xdd, 0xcb, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe2, 0x51, 0xc1, 0x48, 0x95,
	0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of VoterByIdentifier items.
	BallotByIdentifier(ctx context.Context, in *QueryBallotByIdentifierRequest, opts ...grpc.CallOption) (*QueryBallotByIdentifierResponse, error)
	// Queries a list of ObserversByChainAndType items.
	ObserversByChainAndType(ctx context.Context, in *QueryObserversByChainAndTypeRequest, opts ...grpc.CallOption) (*QueryObserversByChainAndTypeResponse, error)
	SupportedChains(ctx context.Context, in *QuerySupportedChains, opts ...grpc.CallOption) (*QuerySupportedChainsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetaobserver.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) BallotByIdentifier(ctx context.Context, in *QueryBallotByIdentifierRequest, opts ...grpc.CallOption) (*QueryBallotByIdentifierResponse, error) {
	out := new(QueryBallotByIdentifierResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetaobserver.Query/BallotByIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ObserversByChainAndType(ctx context.Context, in *QueryObserversByChainAndTypeRequest, opts ...grpc.CallOption) (*QueryObserversByChainAndTypeResponse, error) {
	out := new(QueryObserversByChainAndTypeResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetaobserver.Query/ObserversByChainAndType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SupportedChains(ctx context.Context, in *QuerySupportedChains, opts ...grpc.CallOption) (*QuerySupportedChainsResponse, error) {
	out := new(QuerySupportedChainsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetaobserver.Query/SupportedChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of VoterByIdentifier items.
	BallotByIdentifier(context.Context, *QueryBallotByIdentifierRequest) (*QueryBallotByIdentifierResponse, error)
	// Queries a list of ObserversByChainAndType items.
	ObserversByChainAndType(context.Context, *QueryObserversByChainAndTypeRequest) (*QueryObserversByChainAndTypeResponse, error)
	SupportedChains(context.Context, *QuerySupportedChains) (*QuerySupportedChainsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) BallotByIdentifier(ctx context.Context, req *QueryBallotByIdentifierRequest) (*QueryBallotByIdentifierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BallotByIdentifier not implemented")
}
func (*UnimplementedQueryServer) ObserversByChainAndType(ctx context.Context, req *QueryObserversByChainAndTypeRequest) (*QueryObserversByChainAndTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObserversByChainAndType not implemented")
}
func (*UnimplementedQueryServer) SupportedChains(ctx context.Context, req *QuerySupportedChains) (*QuerySupportedChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedChains not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetaobserver.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_BallotByIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryBallotByIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).BallotByIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetaobserver.Query/BallotByIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).BallotByIdentifier(ctx, req.(*QueryBallotByIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ObserversByChainAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryObserversByChainAndTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ObserversByChainAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetaobserver.Query/ObserversByChainAndType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ObserversByChainAndType(ctx, req.(*QueryObserversByChainAndTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SupportedChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySupportedChains)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SupportedChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetaobserver.Query/SupportedChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SupportedChains(ctx, req.(*QuerySupportedChains))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.zetaobserver.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "BallotByIdentifier",
			Handler:    _Query_BallotByIdentifier_Handler,
		},
		{
			MethodName: "ObserversByChainAndType",
			Handler:    _Query_ObserversByChainAndType_Handler,
		},
		{
			MethodName: "SupportedChains",
			Handler:    _Query_SupportedChains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetaobserver/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryBallotByIdentifierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotByIdentifierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotByIdentifierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BallotIdentifier) > 0 {
		i -= len(m.BallotIdentifier)
		copy(dAtA[i:], m.BallotIdentifier)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BallotIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryBallotByIdentifierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryBallotByIdentifierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryBallotByIdentifierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ballot) > 0 {
		i -= len(m.Ballot)
		copy(dAtA[i:], m.Ballot)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Ballot)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryObserversByChainAndTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObserversByChainAndTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObserversByChainAndTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObservationType) > 0 {
		i -= len(m.ObservationType)
		copy(dAtA[i:], m.ObservationType)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ObservationType)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ObservationChain) > 0 {
		i -= len(m.ObservationChain)
		copy(dAtA[i:], m.ObservationChain)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ObservationChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryObserversByChainAndTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryObserversByChainAndTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryObserversByChainAndTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ObserverMapper) > 0 {
		i -= len(m.ObserverMapper)
		copy(dAtA[i:], m.ObserverMapper)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ObserverMapper)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySupportedChains) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupportedChains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupportedChains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySupportedChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySupportedChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySupportedChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chains) > 0 {
		i -= len(m.Chains)
		copy(dAtA[i:], m.Chains)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Chains)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryBallotByIdentifierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BallotIdentifier)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryBallotByIdentifierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Ballot)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryObserversByChainAndTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObservationChain)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ObservationType)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryObserversByChainAndTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ObserverMapper)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySupportedChains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySupportedChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Chains)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotByIdentifierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotByIdentifierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotByIdentifierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BallotIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BallotIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryBallotByIdentifierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryBallotByIdentifierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryBallotByIdentifierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ballot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ballot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObserversByChainAndTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObserversByChainAndTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObserversByChainAndTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservationChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservationChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryObserversByChainAndTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryObserversByChainAndTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryObserversByChainAndTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserverMapper", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserverMapper = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupportedChains) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupportedChains: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupportedChains: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySupportedChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySupportedChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySupportedChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chains", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chains = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
