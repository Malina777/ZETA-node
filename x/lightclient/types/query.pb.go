// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lightclient/query.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	proofs "github.com/zeta-chain/zetacore/pkg/proofs"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryAllBlockHeaderRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockHeaderRequest) Reset()         { *m = QueryAllBlockHeaderRequest{} }
func (m *QueryAllBlockHeaderRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlockHeaderRequest) ProtoMessage()    {}
func (*QueryAllBlockHeaderRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{0}
}
func (m *QueryAllBlockHeaderRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockHeaderRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockHeaderRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockHeaderRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockHeaderRequest.Merge(m, src)
}
func (m *QueryAllBlockHeaderRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockHeaderRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockHeaderRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockHeaderRequest proto.InternalMessageInfo

func (m *QueryAllBlockHeaderRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllBlockHeaderResponse struct {
	BlockHeaders []*proofs.BlockHeader `protobuf:"bytes,1,rep,name=block_headers,json=blockHeaders,proto3" json:"block_headers,omitempty"`
	Pagination   *query.PageResponse   `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllBlockHeaderResponse) Reset()         { *m = QueryAllBlockHeaderResponse{} }
func (m *QueryAllBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllBlockHeaderResponse) ProtoMessage()    {}
func (*QueryAllBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{1}
}
func (m *QueryAllBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllBlockHeaderResponse.Merge(m, src)
}
func (m *QueryAllBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllBlockHeaderResponse proto.InternalMessageInfo

func (m *QueryAllBlockHeaderResponse) GetBlockHeaders() []*proofs.BlockHeader {
	if m != nil {
		return m.BlockHeaders
	}
	return nil
}

func (m *QueryAllBlockHeaderResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetBlockHeaderByHashRequest struct {
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *QueryGetBlockHeaderByHashRequest) Reset()         { *m = QueryGetBlockHeaderByHashRequest{} }
func (m *QueryGetBlockHeaderByHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockHeaderByHashRequest) ProtoMessage()    {}
func (*QueryGetBlockHeaderByHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{2}
}
func (m *QueryGetBlockHeaderByHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockHeaderByHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockHeaderByHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockHeaderByHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockHeaderByHashRequest.Merge(m, src)
}
func (m *QueryGetBlockHeaderByHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockHeaderByHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockHeaderByHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockHeaderByHashRequest proto.InternalMessageInfo

func (m *QueryGetBlockHeaderByHashRequest) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type QueryGetBlockHeaderByHashResponse struct {
	BlockHeader *proofs.BlockHeader `protobuf:"bytes,1,opt,name=block_header,json=blockHeader,proto3" json:"block_header,omitempty"`
}

func (m *QueryGetBlockHeaderByHashResponse) Reset()         { *m = QueryGetBlockHeaderByHashResponse{} }
func (m *QueryGetBlockHeaderByHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetBlockHeaderByHashResponse) ProtoMessage()    {}
func (*QueryGetBlockHeaderByHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{3}
}
func (m *QueryGetBlockHeaderByHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetBlockHeaderByHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetBlockHeaderByHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetBlockHeaderByHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetBlockHeaderByHashResponse.Merge(m, src)
}
func (m *QueryGetBlockHeaderByHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetBlockHeaderByHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetBlockHeaderByHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetBlockHeaderByHashResponse proto.InternalMessageInfo

func (m *QueryGetBlockHeaderByHashResponse) GetBlockHeader() *proofs.BlockHeader {
	if m != nil {
		return m.BlockHeader
	}
	return nil
}

type QueryGetChainStateRequest struct {
	ChainId int64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryGetChainStateRequest) Reset()         { *m = QueryGetChainStateRequest{} }
func (m *QueryGetChainStateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainStateRequest) ProtoMessage()    {}
func (*QueryGetChainStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{4}
}
func (m *QueryGetChainStateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainStateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainStateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainStateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainStateRequest.Merge(m, src)
}
func (m *QueryGetChainStateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainStateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainStateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainStateRequest proto.InternalMessageInfo

func (m *QueryGetChainStateRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type QueryGetChainStateResponse struct {
	ChainState *ChainState `protobuf:"bytes,1,opt,name=chain_state,json=chainState,proto3" json:"chain_state,omitempty"`
}

func (m *QueryGetChainStateResponse) Reset()         { *m = QueryGetChainStateResponse{} }
func (m *QueryGetChainStateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainStateResponse) ProtoMessage()    {}
func (*QueryGetChainStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{5}
}
func (m *QueryGetChainStateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainStateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainStateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainStateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainStateResponse.Merge(m, src)
}
func (m *QueryGetChainStateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainStateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainStateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainStateResponse proto.InternalMessageInfo

func (m *QueryGetChainStateResponse) GetChainState() *ChainState {
	if m != nil {
		return m.ChainState
	}
	return nil
}

type QueryProveRequest struct {
	ChainId   int64         `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	TxHash    string        `protobuf:"bytes,2,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Proof     *proofs.Proof `protobuf:"bytes,3,opt,name=proof,proto3" json:"proof,omitempty"`
	BlockHash string        `protobuf:"bytes,4,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	TxIndex   int64         `protobuf:"varint,5,opt,name=tx_index,json=txIndex,proto3" json:"tx_index,omitempty"`
}

func (m *QueryProveRequest) Reset()         { *m = QueryProveRequest{} }
func (m *QueryProveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProveRequest) ProtoMessage()    {}
func (*QueryProveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{6}
}
func (m *QueryProveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProveRequest.Merge(m, src)
}
func (m *QueryProveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProveRequest proto.InternalMessageInfo

func (m *QueryProveRequest) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *QueryProveRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *QueryProveRequest) GetProof() *proofs.Proof {
	if m != nil {
		return m.Proof
	}
	return nil
}

func (m *QueryProveRequest) GetBlockHash() string {
	if m != nil {
		return m.BlockHash
	}
	return ""
}

func (m *QueryProveRequest) GetTxIndex() int64 {
	if m != nil {
		return m.TxIndex
	}
	return 0
}

type QueryProveResponse struct {
	Valid bool `protobuf:"varint,1,opt,name=valid,proto3" json:"valid,omitempty"`
}

func (m *QueryProveResponse) Reset()         { *m = QueryProveResponse{} }
func (m *QueryProveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProveResponse) ProtoMessage()    {}
func (*QueryProveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_03e46747c4ffba77, []int{7}
}
func (m *QueryProveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProveResponse.Merge(m, src)
}
func (m *QueryProveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProveResponse proto.InternalMessageInfo

func (m *QueryProveResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

func init() {
	proto.RegisterType((*QueryAllBlockHeaderRequest)(nil), "zetachain.zetacore.lightclient.QueryAllBlockHeaderRequest")
	proto.RegisterType((*QueryAllBlockHeaderResponse)(nil), "zetachain.zetacore.lightclient.QueryAllBlockHeaderResponse")
	proto.RegisterType((*QueryGetBlockHeaderByHashRequest)(nil), "zetachain.zetacore.lightclient.QueryGetBlockHeaderByHashRequest")
	proto.RegisterType((*QueryGetBlockHeaderByHashResponse)(nil), "zetachain.zetacore.lightclient.QueryGetBlockHeaderByHashResponse")
	proto.RegisterType((*QueryGetChainStateRequest)(nil), "zetachain.zetacore.lightclient.QueryGetChainStateRequest")
	proto.RegisterType((*QueryGetChainStateResponse)(nil), "zetachain.zetacore.lightclient.QueryGetChainStateResponse")
	proto.RegisterType((*QueryProveRequest)(nil), "zetachain.zetacore.lightclient.QueryProveRequest")
	proto.RegisterType((*QueryProveResponse)(nil), "zetachain.zetacore.lightclient.QueryProveResponse")
}

func init() { proto.RegisterFile("lightclient/query.proto", fileDescriptor_03e46747c4ffba77) }

var fileDescriptor_03e46747c4ffba77 = []byte{
	// 716 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x5d, 0x4f, 0x13, 0x4d,
	0x14, 0xc7, 0x59, 0x78, 0xca, 0xcb, 0x14, 0x2e, 0x9e, 0x79, 0x48, 0x28, 0xfb, 0xc8, 0x8a, 0x6b,
	0x54, 0x42, 0xc2, 0x4e, 0xa8, 0x91, 0x28, 0x46, 0x85, 0x1a, 0x79, 0x89, 0x5e, 0xe0, 0x7a, 0xa7,
	0x17, 0xcd, 0x6c, 0x3b, 0xee, 0x6e, 0x58, 0x76, 0x96, 0xce, 0x40, 0x5a, 0x09, 0x37, 0x7e, 0x02,
	0x13, 0xe3, 0xbd, 0x89, 0x89, 0x9f, 0xc4, 0x0b, 0x2f, 0x49, 0x8c, 0x89, 0x97, 0xa6, 0xf8, 0x41,
	0xcc, 0xbc, 0xac, 0x9d, 0x22, 0x94, 0x8a, 0x57, 0x7b, 0x66, 0x67, 0xcf, 0x39, 0xbf, 0xff, 0x79,
	0x69, 0xc1, 0x54, 0x12, 0x87, 0x11, 0xaf, 0x25, 0x31, 0x49, 0x39, 0xda, 0xdd, 0x23, 0x8d, 0x96,
	0x97, 0x35, 0x28, 0xa7, 0xd0, 0x79, 0x45, 0x38, 0xae, 0x45, 0x38, 0x4e, 0x3d, 0x69, 0xd1, 0x06,
	0xf1, 0x8c, 0x6f, 0xed, 0xf9, 0x1a, 0x65, 0x3b, 0x94, 0xa1, 0x00, 0x33, 0xa2, 0x1c, 0xd1, 0xfe,
	0x62, 0x40, 0x38, 0x5e, 0x44, 0x19, 0x0e, 0xe3, 0x14, 0xf3, 0x98, 0xa6, 0x2a, 0x96, 0x3d, 0x19,
	0xd2, 0x90, 0x4a, 0x13, 0x09, 0x4b, 0xbf, 0xbd, 0x14, 0x52, 0x1a, 0x26, 0x04, 0xe1, 0x2c, 0x46,
	0x38, 0x4d, 0x29, 0x97, 0x2e, 0x4c, 0xdf, 0xce, 0x98, 0x60, 0x92, 0xa3, 0xca, 0x38, 0xe6, 0x44,
	0x5f, 0x4f, 0x65, 0xdb, 0x21, 0xca, 0x1a, 0x94, 0xbe, 0x64, 0xfa, 0xa1, 0x2e, 0xdc, 0x3a, 0xb0,
	0x9f, 0x0a, 0x9a, 0xd5, 0x24, 0xa9, 0x24, 0xb4, 0xb6, 0xbd, 0x41, 0x70, 0x9d, 0x34, 0x7c, 0xb2,
	0xbb, 0x47, 0x18, 0x87, 0x6b, 0x00, 0x74, 0xe8, 0x4a, 0xd6, 0xac, 0x35, 0x57, 0x2c, 0x5f, 0xf7,
	0x94, 0x14, 0x4f, 0x48, 0xf1, 0x54, 0x0d, 0xb4, 0x14, 0x6f, 0x0b, 0x87, 0x44, 0xfb, 0xfa, 0x86,
	0xa7, 0xfb, 0xde, 0x02, 0xff, 0x9f, 0x9a, 0x86, 0x65, 0x34, 0x65, 0x04, 0xde, 0x06, 0x13, 0x81,
	0x78, 0x5d, 0x8d, 0xe4, 0x7b, 0x56, 0xb2, 0x66, 0x87, 0xe6, 0x8a, 0xe5, 0xff, 0x3c, 0xcd, 0x6a,
	0xfa, 0x8c, 0x07, 0x9d, 0x03, 0x83, 0xeb, 0x5d, 0x84, 0x83, 0x92, 0xf0, 0xc6, 0xb9, 0x84, 0x2a,
	0x6d, 0x17, 0xe2, 0x2a, 0x98, 0x95, 0x84, 0xeb, 0x84, 0x1b, 0xd9, 0x2a, 0xad, 0x0d, 0xcc, 0xa2,
	0xbc, 0x1c, 0x33, 0x00, 0x68, 0x4c, 0xcc, 0x22, 0x59, 0x8e, 0x71, 0x7f, 0x4c, 0xe1, 0x60, 0x16,
	0xb9, 0x2f, 0xc0, 0x95, 0x1e, 0x21, 0xb4, 0xd4, 0x25, 0x30, 0x6e, 0x4a, 0xd5, 0x45, 0x3d, 0x55,
	0x69, 0xd1, 0x50, 0xea, 0x2e, 0x81, 0xe9, 0x3c, 0xf8, 0x43, 0xd1, 0xde, 0x67, 0xa2, 0xbb, 0x39,
	0xd8, 0x34, 0x18, 0x55, 0x3d, 0x8f, 0xeb, 0x32, 0xe0, 0x90, 0x3f, 0x22, 0xcf, 0x9b, 0x75, 0x37,
	0xd6, 0x0d, 0x3e, 0xe1, 0xa7, 0x69, 0x1e, 0x83, 0xa2, 0x31, 0x2c, 0x1a, 0x66, 0xde, 0xeb, 0x3d,
	0xcc, 0x9e, 0x11, 0x08, 0xd4, 0x7e, 0xd9, 0xee, 0x47, 0x0b, 0xfc, 0x2b, 0x73, 0x6d, 0x35, 0xe8,
	0x7e, 0x1f, 0x6c, 0x70, 0x0a, 0x8c, 0xf0, 0xa6, 0x2a, 0xa6, 0xe8, 0xdc, 0x98, 0x3f, 0xcc, 0x9b,
	0xa2, 0x58, 0xf0, 0x2a, 0x28, 0xc8, 0x7a, 0x94, 0x86, 0x24, 0xd0, 0x44, 0x5e, 0x9d, 0x2d, 0xf1,
	0xf0, 0xd5, 0xdd, 0x89, 0x6e, 0xfc, 0x23, 0x03, 0x74, 0xba, 0x21, 0xf2, 0xf2, 0x66, 0x35, 0x4e,
	0xeb, 0xa4, 0x59, 0x2a, 0xa8, 0xbc, 0xbc, 0xb9, 0x29, 0x8e, 0xee, 0x3c, 0x80, 0x26, 0xa7, 0xae,
	0xc5, 0x24, 0x28, 0xec, 0xe3, 0x44, 0x53, 0x8e, 0xfa, 0xea, 0x50, 0xfe, 0x30, 0x0c, 0x0a, 0xf2,
	0x63, 0xf8, 0xc9, 0x02, 0x70, 0x9d, 0xf0, 0xee, 0x11, 0x66, 0x70, 0xf9, 0xbc, 0x6a, 0x9d, 0xbd,
	0x5f, 0xf6, 0xdd, 0x0b, 0xf9, 0x2a, 0x5e, 0xf7, 0xd6, 0xeb, 0x2f, 0x3f, 0xde, 0x0e, 0x22, 0xb8,
	0x80, 0x84, 0xeb, 0x82, 0x8c, 0x82, 0xcc, 0x9f, 0x81, 0x90, 0xf0, 0x2a, 0x4e, 0x92, 0x6a, 0xd7,
	0x6a, 0xc1, 0xb6, 0x05, 0x26, 0x4f, 0x9b, 0x50, 0xb8, 0xd2, 0x17, 0x4c, 0x8f, 0xfd, 0xb0, 0x57,
	0xff, 0x22, 0x82, 0x16, 0xf5, 0x48, 0x8a, 0x7a, 0x00, 0xef, 0xf5, 0x12, 0x65, 0x0a, 0xaa, 0x06,
	0x2d, 0x39, 0x00, 0xe8, 0xa0, 0x33, 0x0c, 0x87, 0xf0, 0xab, 0x12, 0xd9, 0x19, 0xd4, 0x4a, 0x4b,
	0xda, 0xf0, 0x4e, 0xbf, 0x88, 0xbf, 0x2d, 0x99, 0xbd, 0x7c, 0x11, 0x57, 0x2d, 0x6b, 0x4d, 0xca,
	0x5a, 0x81, 0xf7, 0x7b, 0xc9, 0x32, 0x36, 0x51, 0xa8, 0xca, 0xb7, 0x06, 0x1d, 0xe4, 0xd6, 0x21,
	0x7c, 0x67, 0x81, 0x82, 0x9c, 0x5a, 0xb8, 0xd8, 0x17, 0x8d, 0xb9, 0x89, 0x76, 0xf9, 0x4f, 0x5c,
	0x34, 0xf8, 0x35, 0x09, 0x7e, 0x19, 0xce, 0x9c, 0x05, 0x9e, 0x89, 0xcf, 0x2b, 0x4f, 0x3e, 0xb7,
	0x1d, 0xeb, 0xa8, 0xed, 0x58, 0xdf, 0xdb, 0x8e, 0xf5, 0xe6, 0xd8, 0x19, 0x38, 0x3a, 0x76, 0x06,
	0xbe, 0x1d, 0x3b, 0x03, 0xcf, 0xcb, 0x61, 0xcc, 0xa3, 0xbd, 0xc0, 0xab, 0xd1, 0x1d, 0x33, 0x44,
	0x9e, 0x1f, 0x35, 0xbb, 0xa2, 0xf1, 0x56, 0x46, 0x58, 0x30, 0x2c, 0xff, 0x9b, 0x6e, 0xfe, 0x0c,
	0x00, 0x00, 0xff, 0xff, 0x3a, 0xcd, 0xc8, 0xe5, 0x6e, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	GetAllBlockHeaders(ctx context.Context, in *QueryAllBlockHeaderRequest, opts ...grpc.CallOption) (*QueryAllBlockHeaderResponse, error)
	GetBlockHeaderByHash(ctx context.Context, in *QueryGetBlockHeaderByHashRequest, opts ...grpc.CallOption) (*QueryGetBlockHeaderByHashResponse, error)
	GetChainStateByChain(ctx context.Context, in *QueryGetChainStateRequest, opts ...grpc.CallOption) (*QueryGetChainStateResponse, error)
	// Prove performs merkle proof verification
	Prove(ctx context.Context, in *QueryProveRequest, opts ...grpc.CallOption) (*QueryProveResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetAllBlockHeaders(ctx context.Context, in *QueryAllBlockHeaderRequest, opts ...grpc.CallOption) (*QueryAllBlockHeaderResponse, error) {
	out := new(QueryAllBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.lightclient.Query/GetAllBlockHeaders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBlockHeaderByHash(ctx context.Context, in *QueryGetBlockHeaderByHashRequest, opts ...grpc.CallOption) (*QueryGetBlockHeaderByHashResponse, error) {
	out := new(QueryGetBlockHeaderByHashResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.lightclient.Query/GetBlockHeaderByHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetChainStateByChain(ctx context.Context, in *QueryGetChainStateRequest, opts ...grpc.CallOption) (*QueryGetChainStateResponse, error) {
	out := new(QueryGetChainStateResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.lightclient.Query/GetChainStateByChain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Prove(ctx context.Context, in *QueryProveRequest, opts ...grpc.CallOption) (*QueryProveResponse, error) {
	out := new(QueryProveResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.lightclient.Query/Prove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	GetAllBlockHeaders(context.Context, *QueryAllBlockHeaderRequest) (*QueryAllBlockHeaderResponse, error)
	GetBlockHeaderByHash(context.Context, *QueryGetBlockHeaderByHashRequest) (*QueryGetBlockHeaderByHashResponse, error)
	GetChainStateByChain(context.Context, *QueryGetChainStateRequest) (*QueryGetChainStateResponse, error)
	// Prove performs merkle proof verification
	Prove(context.Context, *QueryProveRequest) (*QueryProveResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetAllBlockHeaders(ctx context.Context, req *QueryAllBlockHeaderRequest) (*QueryAllBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllBlockHeaders not implemented")
}
func (*UnimplementedQueryServer) GetBlockHeaderByHash(ctx context.Context, req *QueryGetBlockHeaderByHashRequest) (*QueryGetBlockHeaderByHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlockHeaderByHash not implemented")
}
func (*UnimplementedQueryServer) GetChainStateByChain(ctx context.Context, req *QueryGetChainStateRequest) (*QueryGetChainStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainStateByChain not implemented")
}
func (*UnimplementedQueryServer) Prove(ctx context.Context, req *QueryProveRequest) (*QueryProveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prove not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetAllBlockHeaders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllBlockHeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAllBlockHeaders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.lightclient.Query/GetAllBlockHeaders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAllBlockHeaders(ctx, req.(*QueryAllBlockHeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBlockHeaderByHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetBlockHeaderByHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBlockHeaderByHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.lightclient.Query/GetBlockHeaderByHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBlockHeaderByHash(ctx, req.(*QueryGetBlockHeaderByHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetChainStateByChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetChainStateByChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.lightclient.Query/GetChainStateByChain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetChainStateByChain(ctx, req.(*QueryGetChainStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Prove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Prove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.lightclient.Query/Prove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Prove(ctx, req.(*QueryProveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.lightclient.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllBlockHeaders",
			Handler:    _Query_GetAllBlockHeaders_Handler,
		},
		{
			MethodName: "GetBlockHeaderByHash",
			Handler:    _Query_GetBlockHeaderByHash_Handler,
		},
		{
			MethodName: "GetChainStateByChain",
			Handler:    _Query_GetChainStateByChain_Handler,
		},
		{
			MethodName: "Prove",
			Handler:    _Query_Prove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lightclient/query.proto",
}

func (m *QueryAllBlockHeaderRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockHeaderRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockHeaderRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.BlockHeaders) > 0 {
		for iNdEx := len(m.BlockHeaders) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BlockHeaders[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockHeaderByHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockHeaderByHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockHeaderByHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetBlockHeaderByHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetBlockHeaderByHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetBlockHeaderByHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeader != nil {
		{
			size, err := m.BlockHeader.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainStateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainStateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainStateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainStateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainStateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainStateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainState != nil {
		{
			size, err := m.ChainState.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryProveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TxIndex))
		i--
		dAtA[i] = 0x28
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x12
	}
	if m.ChainId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Valid {
		i--
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryAllBlockHeaderRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockHeaders) > 0 {
		for _, e := range m.BlockHeaders {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockHeaderByHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetBlockHeaderByHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeader != nil {
		l = m.BlockHeader.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainStateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	return n
}

func (m *QueryGetChainStateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainState != nil {
		l = m.ChainState.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryProveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovQuery(uint64(m.ChainId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.TxIndex != 0 {
		n += 1 + sovQuery(uint64(m.TxIndex))
	}
	return n
}

func (m *QueryProveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Valid {
		n += 2
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryAllBlockHeaderRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockHeaderRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockHeaderRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaders", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHeaders = append(m.BlockHeaders, &proofs.BlockHeader{})
			if err := m.BlockHeaders[len(m.BlockHeaders)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockHeaderByHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockHeaderByHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockHeaderByHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetBlockHeaderByHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetBlockHeaderByHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetBlockHeaderByHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeader", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeader == nil {
				m.BlockHeader = &proofs.BlockHeader{}
			}
			if err := m.BlockHeader.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainStateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainStateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainStateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainStateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainStateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainStateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainState", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainState == nil {
				m.ChainState = &ChainState{}
			}
			if err := m.ChainState.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &proofs.Proof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxIndex", wireType)
			}
			m.TxIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
