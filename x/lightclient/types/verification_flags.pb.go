// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: lightclient/verification_flags.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// VerificationFlags is a structure containing information which chain types are enabled for block header verification
type VerificationFlags struct {
	EthTypeChainEnabled bool `protobuf:"varint,1,opt,name=ethTypeChainEnabled,proto3" json:"ethTypeChainEnabled,omitempty"`
	BtcTypeChainEnabled bool `protobuf:"varint,2,opt,name=btcTypeChainEnabled,proto3" json:"btcTypeChainEnabled,omitempty"`
}

func (m *VerificationFlags) Reset()         { *m = VerificationFlags{} }
func (m *VerificationFlags) String() string { return proto.CompactTextString(m) }
func (*VerificationFlags) ProtoMessage()    {}
func (*VerificationFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_86eae6d737b3f8cc, []int{0}
}
func (m *VerificationFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerificationFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerificationFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerificationFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerificationFlags.Merge(m, src)
}
func (m *VerificationFlags) XXX_Size() int {
	return m.Size()
}
func (m *VerificationFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_VerificationFlags.DiscardUnknown(m)
}

var xxx_messageInfo_VerificationFlags proto.InternalMessageInfo

func (m *VerificationFlags) GetEthTypeChainEnabled() bool {
	if m != nil {
		return m.EthTypeChainEnabled
	}
	return false
}

func (m *VerificationFlags) GetBtcTypeChainEnabled() bool {
	if m != nil {
		return m.BtcTypeChainEnabled
	}
	return false
}

func init() {
	proto.RegisterType((*VerificationFlags)(nil), "lightclient.VerificationFlags")
}

func init() {
	proto.RegisterFile("lightclient/verification_flags.proto", fileDescriptor_86eae6d737b3f8cc)
}

var fileDescriptor_86eae6d737b3f8cc = []byte{
	// 191 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xc9, 0xc9, 0x4c, 0xcf,
	0x28, 0x49, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0xd1, 0x2f, 0x4b, 0x2d, 0xca, 0x4c, 0xcb, 0x4c, 0x4e,
	0x2c, 0xc9, 0xcc, 0xcf, 0x8b, 0x4f, 0xcb, 0x49, 0x4c, 0x2f, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0xe2, 0x46, 0x52, 0xa5, 0x54, 0xce, 0x25, 0x18, 0x86, 0xa4, 0xd0, 0x0d, 0xa4, 0x4e, 0xc8,
	0x80, 0x4b, 0x38, 0xb5, 0x24, 0x23, 0xa4, 0xb2, 0x20, 0xd5, 0x39, 0x23, 0x31, 0x33, 0xcf, 0x35,
	0x2f, 0x31, 0x29, 0x27, 0x35, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x23, 0x08, 0x9b, 0x14, 0x48,
	0x47, 0x52, 0x49, 0x32, 0x86, 0x0e, 0x26, 0x88, 0x0e, 0x2c, 0x52, 0x4e, 0x3e, 0x27, 0x1e, 0xc9,
	0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e,
	0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10, 0x65, 0x94, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97,
	0x9c, 0x9f, 0xab, 0x5f, 0x95, 0x5a, 0x92, 0xa8, 0x9b, 0x0c, 0xd2, 0x07, 0x66, 0x26, 0xe7, 0x17,
	0xa5, 0xea, 0x57, 0xe8, 0x23, 0x7b, 0xb3, 0xa4, 0xb2, 0x20, 0xb5, 0x38, 0x89, 0x0d, 0xec, 0x35,
	0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0x6a, 0x29, 0x3c, 0x02, 0x01, 0x00, 0x00,
}

func (m *VerificationFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerificationFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerificationFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BtcTypeChainEnabled {
		i--
		if m.BtcTypeChainEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EthTypeChainEnabled {
		i--
		if m.EthTypeChainEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVerificationFlags(dAtA []byte, offset int, v uint64) int {
	offset -= sovVerificationFlags(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VerificationFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EthTypeChainEnabled {
		n += 2
	}
	if m.BtcTypeChainEnabled {
		n += 2
	}
	return n
}

func sovVerificationFlags(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVerificationFlags(x uint64) (n int) {
	return sovVerificationFlags(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VerificationFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVerificationFlags
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerificationFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerificationFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EthTypeChainEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.EthTypeChainEnabled = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BtcTypeChainEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVerificationFlags
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BtcTypeChainEnabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipVerificationFlags(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVerificationFlags
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVerificationFlags(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVerificationFlags
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerificationFlags
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVerificationFlags
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVerificationFlags
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVerificationFlags
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVerificationFlags
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVerificationFlags        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVerificationFlags          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVerificationFlags = fmt.Errorf("proto: unexpected end of group")
)
