// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metacore/send.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type SendStatus int32

const (
	SendStatus_Created   SendStatus = 0
	SendStatus_Finalized SendStatus = 1
	SendStatus_Mined     SendStatus = 2
	SendStatus_Confirmed SendStatus = 3
	SendStatus_Abort     SendStatus = 4
	SendStatus_Reverted  SendStatus = 5
)

var SendStatus_name = map[int32]string{
	0: "Created",
	1: "Finalized",
	2: "Mined",
	3: "Confirmed",
	4: "Abort",
	5: "Reverted",
}

var SendStatus_value = map[string]int32{
	"Created":   0,
	"Finalized": 1,
	"Mined":     2,
	"Confirmed": 3,
	"Abort":     4,
	"Reverted":  5,
}

func (x SendStatus) String() string {
	return proto.EnumName(SendStatus_name, int32(x))
}

func (SendStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c81f0328df818595, []int{0}
}

type Send struct {
	Creator             string     `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index               string     `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Sender              string     `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChain         string     `protobuf:"bytes,4,opt,name=senderChain,proto3" json:"senderChain,omitempty"`
	Receiver            string     `protobuf:"bytes,5,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain       string     `protobuf:"bytes,6,opt,name=receiverChain,proto3" json:"receiverChain,omitempty"`
	MBurnt              string     `protobuf:"bytes,7,opt,name=mBurnt,proto3" json:"mBurnt,omitempty"`
	MMint               string     `protobuf:"bytes,8,opt,name=mMint,proto3" json:"mMint,omitempty"`
	Message             string     `protobuf:"bytes,9,opt,name=message,proto3" json:"message,omitempty"`
	InTxHash            string     `protobuf:"bytes,10,opt,name=inTxHash,proto3" json:"inTxHash,omitempty"`
	InBlockHeight       uint64     `protobuf:"varint,11,opt,name=inBlockHeight,proto3" json:"inBlockHeight,omitempty"`
	FinalizedMetaHeight uint64     `protobuf:"varint,12,opt,name=finalizedMetaHeight,proto3" json:"finalizedMetaHeight,omitempty"`
	Signers             []string   `protobuf:"bytes,13,rep,name=signers,proto3" json:"signers,omitempty"`
	Status              SendStatus `protobuf:"varint,14,opt,name=status,proto3,enum=MetaProtocol.metacore.metacore.SendStatus" json:"status,omitempty"`
	Broadcaster         uint64     `protobuf:"varint,15,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	Nonce               uint64     `protobuf:"varint,16,opt,name=nonce,proto3" json:"nonce,omitempty"`
	GasPrice            string     `protobuf:"bytes,17,opt,name=gasPrice,proto3" json:"gasPrice,omitempty"`
}

func (m *Send) Reset()         { *m = Send{} }
func (m *Send) String() string { return proto.CompactTextString(m) }
func (*Send) ProtoMessage()    {}
func (*Send) Descriptor() ([]byte, []int) {
	return fileDescriptor_c81f0328df818595, []int{0}
}
func (m *Send) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Send) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Send.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Send) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Send.Merge(m, src)
}
func (m *Send) XXX_Size() int {
	return m.Size()
}
func (m *Send) XXX_DiscardUnknown() {
	xxx_messageInfo_Send.DiscardUnknown(m)
}

var xxx_messageInfo_Send proto.InternalMessageInfo

func (m *Send) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Send) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Send) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *Send) GetSenderChain() string {
	if m != nil {
		return m.SenderChain
	}
	return ""
}

func (m *Send) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *Send) GetReceiverChain() string {
	if m != nil {
		return m.ReceiverChain
	}
	return ""
}

func (m *Send) GetMBurnt() string {
	if m != nil {
		return m.MBurnt
	}
	return ""
}

func (m *Send) GetMMint() string {
	if m != nil {
		return m.MMint
	}
	return ""
}

func (m *Send) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Send) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *Send) GetInBlockHeight() uint64 {
	if m != nil {
		return m.InBlockHeight
	}
	return 0
}

func (m *Send) GetFinalizedMetaHeight() uint64 {
	if m != nil {
		return m.FinalizedMetaHeight
	}
	return 0
}

func (m *Send) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *Send) GetStatus() SendStatus {
	if m != nil {
		return m.Status
	}
	return SendStatus_Created
}

func (m *Send) GetBroadcaster() uint64 {
	if m != nil {
		return m.Broadcaster
	}
	return 0
}

func (m *Send) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Send) GetGasPrice() string {
	if m != nil {
		return m.GasPrice
	}
	return ""
}

func init() {
	proto.RegisterEnum("MetaProtocol.metacore.metacore.SendStatus", SendStatus_name, SendStatus_value)
	proto.RegisterType((*Send)(nil), "MetaProtocol.metacore.metacore.Send")
}

func init() { proto.RegisterFile("metacore/send.proto", fileDescriptor_c81f0328df818595) }

var fileDescriptor_c81f0328df818595 = []byte{
	// 480 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xce, 0x36, 0x9b, 0x3f, 0xa7, 0x29, 0x8b, 0x5b, 0x21, 0x2b, 0x87, 0x55, 0x84, 0x38, 0x44,
	0x95, 0xd8, 0xa0, 0xf2, 0x04, 0x24, 0x12, 0xea, 0x81, 0x48, 0x55, 0xca, 0x89, 0x9b, 0xe3, 0x9d,
	0x6e, 0x2c, 0xb2, 0x76, 0x65, 0x3b, 0x55, 0xe0, 0x29, 0x78, 0x04, 0x0e, 0x1c, 0x78, 0x14, 0x8e,
	0x3d, 0x72, 0x44, 0xc9, 0x8b, 0xa0, 0xb1, 0x77, 0xd3, 0x56, 0x42, 0xdc, 0xe6, 0xfb, 0xbe, 0x99,
	0x9d, 0xcf, 0x9f, 0xbd, 0xe4, 0xb4, 0x04, 0xc7, 0x85, 0x36, 0x30, 0xb1, 0xa0, 0xf2, 0xec, 0xd6,
	0x68, 0xa7, 0x69, 0x3a, 0x07, 0xc7, 0xaf, 0xb0, 0x14, 0x7a, 0x9d, 0xd5, 0x1d, 0x87, 0x62, 0x78,
	0x56, 0xe8, 0x42, 0xfb, 0xd6, 0x09, 0x56, 0x61, 0xea, 0xe5, 0xf7, 0x98, 0xc4, 0xd7, 0xa0, 0x72,
	0xca, 0x48, 0x47, 0x18, 0xe0, 0x4e, 0x1b, 0x16, 0x8d, 0xa2, 0x71, 0x6f, 0x51, 0x43, 0x7a, 0x46,
	0x5a, 0x52, 0xe5, 0xb0, 0x65, 0x47, 0x9e, 0x0f, 0x80, 0xbe, 0x20, 0x6d, 0x5c, 0x0e, 0x86, 0x35,
	0x3d, 0x5d, 0x21, 0x3a, 0x22, 0xfd, 0x50, 0xcd, 0x56, 0x5c, 0x2a, 0x16, 0x7b, 0xf1, 0x31, 0x45,
	0x87, 0xa4, 0x6b, 0x40, 0x80, 0xbc, 0x03, 0xc3, 0x5a, 0x5e, 0x3e, 0x60, 0xfa, 0x8a, 0x0c, 0xea,
	0x3a, 0xcc, 0xb7, 0x7d, 0xc3, 0x53, 0x12, 0x77, 0x97, 0xd3, 0x8d, 0x51, 0x8e, 0x75, 0xc2, 0xee,
	0x80, 0xd0, 0x69, 0x39, 0x97, 0xca, 0xb1, 0x6e, 0x70, 0xea, 0x01, 0x9e, 0xac, 0x04, 0x6b, 0x79,
	0x01, 0xac, 0x17, 0x4e, 0x56, 0x41, 0x74, 0x22, 0xd5, 0xc7, 0xed, 0x25, 0xb7, 0x2b, 0x46, 0x82,
	0x93, 0x1a, 0xa3, 0x13, 0xa9, 0xa6, 0x6b, 0x2d, 0x3e, 0x5f, 0x82, 0x2c, 0x56, 0x8e, 0xf5, 0x47,
	0xd1, 0x38, 0x5e, 0x3c, 0x25, 0xe9, 0x1b, 0x72, 0x7a, 0x23, 0x15, 0x5f, 0xcb, 0xaf, 0x90, 0x63,
	0xfe, 0x55, 0xef, 0xb1, 0xef, 0xfd, 0x97, 0x84, 0x6e, 0xac, 0x2c, 0x14, 0x18, 0xcb, 0x06, 0xa3,
	0x26, 0xba, 0xa9, 0x20, 0x9d, 0x92, 0xb6, 0x75, 0xdc, 0x6d, 0x2c, 0x3b, 0x19, 0x45, 0xe3, 0x93,
	0x8b, 0xf3, 0xec, 0xff, 0x37, 0x9a, 0xe1, 0xbd, 0x5d, 0xfb, 0x89, 0x45, 0x35, 0x89, 0xe9, 0x2f,
	0x8d, 0xe6, 0xb9, 0xe0, 0xd6, 0x81, 0x61, 0xcf, 0xbc, 0x8f, 0xc7, 0x14, 0x66, 0xa4, 0xb4, 0x12,
	0xc0, 0x12, 0xaf, 0x05, 0x80, 0x49, 0x14, 0xdc, 0x5e, 0x19, 0x29, 0x80, 0x3d, 0x0f, 0x49, 0xd4,
	0xf8, 0x9c, 0x13, 0xf2, 0xb0, 0x89, 0xf6, 0x49, 0x67, 0x86, 0x0f, 0x03, 0xf2, 0xa4, 0x41, 0x07,
	0xa4, 0xf7, 0xbe, 0x3e, 0x63, 0x12, 0xd1, 0x1e, 0x69, 0xcd, 0xa5, 0x82, 0x3c, 0x39, 0x42, 0x65,
	0xa6, 0xd5, 0x8d, 0x34, 0x25, 0xe4, 0x49, 0x13, 0x95, 0x77, 0x4b, 0x6d, 0x5c, 0x12, 0xd3, 0x63,
	0xd2, 0x5d, 0xc0, 0x1d, 0x18, 0xfc, 0x42, 0x6b, 0x18, 0xff, 0xfc, 0x91, 0x46, 0xd3, 0x0f, 0xbf,
	0x76, 0x69, 0x74, 0xbf, 0x4b, 0xa3, 0x3f, 0xbb, 0x34, 0xfa, 0xb6, 0x4f, 0x1b, 0xf7, 0xfb, 0xb4,
	0xf1, 0x7b, 0x9f, 0x36, 0x3e, 0x5d, 0x14, 0xd2, 0xad, 0x36, 0xcb, 0x4c, 0xe8, 0x72, 0x82, 0x71,
	0xbc, 0xae, 0xf3, 0x98, 0x1c, 0xfe, 0x81, 0xed, 0x43, 0xe9, 0xbe, 0xdc, 0x82, 0x5d, 0xb6, 0xfd,
	0xd3, 0x7e, 0xfb, 0x37, 0x00, 0x00, 0xff, 0xff, 0x55, 0xdd, 0xa8, 0x98, 0x27, 0x03, 0x00, 0x00,
}

func (m *Send) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Send) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Send) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GasPrice) > 0 {
		i -= len(m.GasPrice)
		copy(dAtA[i:], m.GasPrice)
		i = encodeVarintSend(dAtA, i, uint64(len(m.GasPrice)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Nonce != 0 {
		i = encodeVarintSend(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Broadcaster != 0 {
		i = encodeVarintSend(dAtA, i, uint64(m.Broadcaster))
		i--
		dAtA[i] = 0x78
	}
	if m.Status != 0 {
		i = encodeVarintSend(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x70
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintSend(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if m.FinalizedMetaHeight != 0 {
		i = encodeVarintSend(dAtA, i, uint64(m.FinalizedMetaHeight))
		i--
		dAtA[i] = 0x60
	}
	if m.InBlockHeight != 0 {
		i = encodeVarintSend(dAtA, i, uint64(m.InBlockHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintSend(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintSend(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.MMint) > 0 {
		i -= len(m.MMint)
		copy(dAtA[i:], m.MMint)
		i = encodeVarintSend(dAtA, i, uint64(len(m.MMint)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MBurnt) > 0 {
		i -= len(m.MBurnt)
		copy(dAtA[i:], m.MBurnt)
		i = encodeVarintSend(dAtA, i, uint64(len(m.MBurnt)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.ReceiverChain) > 0 {
		i -= len(m.ReceiverChain)
		copy(dAtA[i:], m.ReceiverChain)
		i = encodeVarintSend(dAtA, i, uint64(len(m.ReceiverChain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintSend(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderChain) > 0 {
		i -= len(m.SenderChain)
		copy(dAtA[i:], m.SenderChain)
		i = encodeVarintSend(dAtA, i, uint64(len(m.SenderChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintSend(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintSend(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintSend(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSend(dAtA []byte, offset int, v uint64) int {
	offset -= sovSend(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Send) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.SenderChain)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.ReceiverChain)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.MBurnt)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.MMint)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovSend(uint64(l))
	}
	if m.InBlockHeight != 0 {
		n += 1 + sovSend(uint64(m.InBlockHeight))
	}
	if m.FinalizedMetaHeight != 0 {
		n += 1 + sovSend(uint64(m.FinalizedMetaHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovSend(uint64(l))
		}
	}
	if m.Status != 0 {
		n += 1 + sovSend(uint64(m.Status))
	}
	if m.Broadcaster != 0 {
		n += 1 + sovSend(uint64(m.Broadcaster))
	}
	if m.Nonce != 0 {
		n += 2 + sovSend(uint64(m.Nonce))
	}
	l = len(m.GasPrice)
	if l > 0 {
		n += 2 + l + sovSend(uint64(l))
	}
	return n
}

func sovSend(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSend(x uint64) (n int) {
	return sovSend(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Send) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSend
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Send: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Send: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MBurnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MBurnt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MMint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MMint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlockHeight", wireType)
			}
			m.InBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedMetaHeight", wireType)
			}
			m.FinalizedMetaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedMetaHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= SendStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcaster", wireType)
			}
			m.Broadcaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Broadcaster |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSend
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSend
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSend
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSend(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSend
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSend(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSend
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSend
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSend
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSend
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSend
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSend        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSend          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSend = fmt.Errorf("proto: unexpected end of group")
)
