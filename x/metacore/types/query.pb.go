// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metacore/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # 3
type QueryGetSendRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSendRequest) Reset()         { *m = QueryGetSendRequest{} }
func (m *QueryGetSendRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSendRequest) ProtoMessage()    {}
func (*QueryGetSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{0}
}
func (m *QueryGetSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendRequest.Merge(m, src)
}
func (m *QueryGetSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendRequest proto.InternalMessageInfo

func (m *QueryGetSendRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSendResponse struct {
	Send *Send `protobuf:"bytes,1,opt,name=Send,proto3" json:"Send,omitempty"`
}

func (m *QueryGetSendResponse) Reset()         { *m = QueryGetSendResponse{} }
func (m *QueryGetSendResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSendResponse) ProtoMessage()    {}
func (*QueryGetSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{1}
}
func (m *QueryGetSendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendResponse.Merge(m, src)
}
func (m *QueryGetSendResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendResponse proto.InternalMessageInfo

func (m *QueryGetSendResponse) GetSend() *Send {
	if m != nil {
		return m.Send
	}
	return nil
}

type QueryAllSendRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSendRequest) Reset()         { *m = QueryAllSendRequest{} }
func (m *QueryAllSendRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSendRequest) ProtoMessage()    {}
func (*QueryAllSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{2}
}
func (m *QueryAllSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSendRequest.Merge(m, src)
}
func (m *QueryAllSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSendRequest proto.InternalMessageInfo

func (m *QueryAllSendRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSendResponse struct {
	Send       []*Send             `protobuf:"bytes,1,rep,name=Send,proto3" json:"Send,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSendResponse) Reset()         { *m = QueryAllSendResponse{} }
func (m *QueryAllSendResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSendResponse) ProtoMessage()    {}
func (*QueryAllSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{3}
}
func (m *QueryAllSendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSendResponse.Merge(m, src)
}
func (m *QueryAllSendResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSendResponse proto.InternalMessageInfo

func (m *QueryAllSendResponse) GetSend() []*Send {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *QueryAllSendResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSendVoterRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSendVoterRequest) Reset()         { *m = QueryGetSendVoterRequest{} }
func (m *QueryGetSendVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSendVoterRequest) ProtoMessage()    {}
func (*QueryGetSendVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{4}
}
func (m *QueryGetSendVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendVoterRequest.Merge(m, src)
}
func (m *QueryGetSendVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendVoterRequest proto.InternalMessageInfo

func (m *QueryGetSendVoterRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSendVoterResponse struct {
	SendVoter *SendVoter `protobuf:"bytes,1,opt,name=SendVoter,proto3" json:"SendVoter,omitempty"`
}

func (m *QueryGetSendVoterResponse) Reset()         { *m = QueryGetSendVoterResponse{} }
func (m *QueryGetSendVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSendVoterResponse) ProtoMessage()    {}
func (*QueryGetSendVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{5}
}
func (m *QueryGetSendVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendVoterResponse.Merge(m, src)
}
func (m *QueryGetSendVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendVoterResponse proto.InternalMessageInfo

func (m *QueryGetSendVoterResponse) GetSendVoter() *SendVoter {
	if m != nil {
		return m.SendVoter
	}
	return nil
}

type QueryAllSendVoterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSendVoterRequest) Reset()         { *m = QueryAllSendVoterRequest{} }
func (m *QueryAllSendVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSendVoterRequest) ProtoMessage()    {}
func (*QueryAllSendVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{6}
}
func (m *QueryAllSendVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSendVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSendVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSendVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSendVoterRequest.Merge(m, src)
}
func (m *QueryAllSendVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSendVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSendVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSendVoterRequest proto.InternalMessageInfo

func (m *QueryAllSendVoterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSendVoterResponse struct {
	SendVoter  []*SendVoter        `protobuf:"bytes,1,rep,name=SendVoter,proto3" json:"SendVoter,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSendVoterResponse) Reset()         { *m = QueryAllSendVoterResponse{} }
func (m *QueryAllSendVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSendVoterResponse) ProtoMessage()    {}
func (*QueryAllSendVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{7}
}
func (m *QueryAllSendVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSendVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSendVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSendVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSendVoterResponse.Merge(m, src)
}
func (m *QueryAllSendVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSendVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSendVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSendVoterResponse proto.InternalMessageInfo

func (m *QueryAllSendVoterResponse) GetSendVoter() []*SendVoter {
	if m != nil {
		return m.SendVoter
	}
	return nil
}

func (m *QueryAllSendVoterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTxoutConfirmationRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTxoutConfirmationRequest) Reset()         { *m = QueryGetTxoutConfirmationRequest{} }
func (m *QueryGetTxoutConfirmationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxoutConfirmationRequest) ProtoMessage()    {}
func (*QueryGetTxoutConfirmationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{8}
}
func (m *QueryGetTxoutConfirmationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxoutConfirmationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxoutConfirmationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxoutConfirmationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxoutConfirmationRequest.Merge(m, src)
}
func (m *QueryGetTxoutConfirmationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxoutConfirmationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxoutConfirmationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxoutConfirmationRequest proto.InternalMessageInfo

func (m *QueryGetTxoutConfirmationRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTxoutConfirmationResponse struct {
	TxoutConfirmation *TxoutConfirmation `protobuf:"bytes,1,opt,name=TxoutConfirmation,proto3" json:"TxoutConfirmation,omitempty"`
}

func (m *QueryGetTxoutConfirmationResponse) Reset()         { *m = QueryGetTxoutConfirmationResponse{} }
func (m *QueryGetTxoutConfirmationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxoutConfirmationResponse) ProtoMessage()    {}
func (*QueryGetTxoutConfirmationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{9}
}
func (m *QueryGetTxoutConfirmationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxoutConfirmationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxoutConfirmationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxoutConfirmationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxoutConfirmationResponse.Merge(m, src)
}
func (m *QueryGetTxoutConfirmationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxoutConfirmationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxoutConfirmationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxoutConfirmationResponse proto.InternalMessageInfo

func (m *QueryGetTxoutConfirmationResponse) GetTxoutConfirmation() *TxoutConfirmation {
	if m != nil {
		return m.TxoutConfirmation
	}
	return nil
}

type QueryAllTxoutConfirmationRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTxoutConfirmationRequest) Reset()         { *m = QueryAllTxoutConfirmationRequest{} }
func (m *QueryAllTxoutConfirmationRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTxoutConfirmationRequest) ProtoMessage()    {}
func (*QueryAllTxoutConfirmationRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{10}
}
func (m *QueryAllTxoutConfirmationRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTxoutConfirmationRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTxoutConfirmationRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTxoutConfirmationRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTxoutConfirmationRequest.Merge(m, src)
}
func (m *QueryAllTxoutConfirmationRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTxoutConfirmationRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTxoutConfirmationRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTxoutConfirmationRequest proto.InternalMessageInfo

func (m *QueryAllTxoutConfirmationRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTxoutConfirmationResponse struct {
	TxoutConfirmation []*TxoutConfirmation `protobuf:"bytes,1,rep,name=TxoutConfirmation,proto3" json:"TxoutConfirmation,omitempty"`
	Pagination        *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTxoutConfirmationResponse) Reset()         { *m = QueryAllTxoutConfirmationResponse{} }
func (m *QueryAllTxoutConfirmationResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTxoutConfirmationResponse) ProtoMessage()    {}
func (*QueryAllTxoutConfirmationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{11}
}
func (m *QueryAllTxoutConfirmationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTxoutConfirmationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTxoutConfirmationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTxoutConfirmationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTxoutConfirmationResponse.Merge(m, src)
}
func (m *QueryAllTxoutConfirmationResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTxoutConfirmationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTxoutConfirmationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTxoutConfirmationResponse proto.InternalMessageInfo

func (m *QueryAllTxoutConfirmationResponse) GetTxoutConfirmation() []*TxoutConfirmation {
	if m != nil {
		return m.TxoutConfirmation
	}
	return nil
}

func (m *QueryAllTxoutConfirmationResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTxoutRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryGetTxoutRequest) Reset()         { *m = QueryGetTxoutRequest{} }
func (m *QueryGetTxoutRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxoutRequest) ProtoMessage()    {}
func (*QueryGetTxoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{12}
}
func (m *QueryGetTxoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxoutRequest.Merge(m, src)
}
func (m *QueryGetTxoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxoutRequest proto.InternalMessageInfo

func (m *QueryGetTxoutRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryGetTxoutResponse struct {
	Txout *Txout `protobuf:"bytes,1,opt,name=Txout,proto3" json:"Txout,omitempty"`
}

func (m *QueryGetTxoutResponse) Reset()         { *m = QueryGetTxoutResponse{} }
func (m *QueryGetTxoutResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxoutResponse) ProtoMessage()    {}
func (*QueryGetTxoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{13}
}
func (m *QueryGetTxoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxoutResponse.Merge(m, src)
}
func (m *QueryGetTxoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxoutResponse proto.InternalMessageInfo

func (m *QueryGetTxoutResponse) GetTxout() *Txout {
	if m != nil {
		return m.Txout
	}
	return nil
}

type QueryAllTxoutRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTxoutRequest) Reset()         { *m = QueryAllTxoutRequest{} }
func (m *QueryAllTxoutRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTxoutRequest) ProtoMessage()    {}
func (*QueryAllTxoutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{14}
}
func (m *QueryAllTxoutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTxoutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTxoutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTxoutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTxoutRequest.Merge(m, src)
}
func (m *QueryAllTxoutRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTxoutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTxoutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTxoutRequest proto.InternalMessageInfo

func (m *QueryAllTxoutRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTxoutResponse struct {
	Txout      []*Txout            `protobuf:"bytes,1,rep,name=Txout,proto3" json:"Txout,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTxoutResponse) Reset()         { *m = QueryAllTxoutResponse{} }
func (m *QueryAllTxoutResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTxoutResponse) ProtoMessage()    {}
func (*QueryAllTxoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{15}
}
func (m *QueryAllTxoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTxoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTxoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTxoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTxoutResponse.Merge(m, src)
}
func (m *QueryAllTxoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTxoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTxoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTxoutResponse proto.InternalMessageInfo

func (m *QueryAllTxoutResponse) GetTxout() []*Txout {
	if m != nil {
		return m.Txout
	}
	return nil
}

func (m *QueryAllTxoutResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetNodeAccountRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNodeAccountRequest) Reset()         { *m = QueryGetNodeAccountRequest{} }
func (m *QueryGetNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountRequest) ProtoMessage()    {}
func (*QueryGetNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{16}
}
func (m *QueryGetNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountRequest.Merge(m, src)
}
func (m *QueryGetNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountRequest proto.InternalMessageInfo

func (m *QueryGetNodeAccountRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetNodeAccountResponse struct {
	NodeAccount *NodeAccount `protobuf:"bytes,1,opt,name=NodeAccount,proto3" json:"NodeAccount,omitempty"`
}

func (m *QueryGetNodeAccountResponse) Reset()         { *m = QueryGetNodeAccountResponse{} }
func (m *QueryGetNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountResponse) ProtoMessage()    {}
func (*QueryGetNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{17}
}
func (m *QueryGetNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountResponse.Merge(m, src)
}
func (m *QueryGetNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountResponse proto.InternalMessageInfo

func (m *QueryGetNodeAccountResponse) GetNodeAccount() *NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

type QueryAllNodeAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountRequest) Reset()         { *m = QueryAllNodeAccountRequest{} }
func (m *QueryAllNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountRequest) ProtoMessage()    {}
func (*QueryAllNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{18}
}
func (m *QueryAllNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountRequest.Merge(m, src)
}
func (m *QueryAllNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountRequest proto.InternalMessageInfo

func (m *QueryAllNodeAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNodeAccountResponse struct {
	NodeAccount []*NodeAccount      `protobuf:"bytes,1,rep,name=NodeAccount,proto3" json:"NodeAccount,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountResponse) Reset()         { *m = QueryAllNodeAccountResponse{} }
func (m *QueryAllNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountResponse) ProtoMessage()    {}
func (*QueryAllNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{19}
}
func (m *QueryAllNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountResponse.Merge(m, src)
}
func (m *QueryAllNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountResponse proto.InternalMessageInfo

func (m *QueryAllNodeAccountResponse) GetNodeAccount() []*NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

func (m *QueryAllNodeAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLastMetaHeightRequest struct {
}

func (m *QueryLastMetaHeightRequest) Reset()         { *m = QueryLastMetaHeightRequest{} }
func (m *QueryLastMetaHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastMetaHeightRequest) ProtoMessage()    {}
func (*QueryLastMetaHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{20}
}
func (m *QueryLastMetaHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastMetaHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastMetaHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastMetaHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastMetaHeightRequest.Merge(m, src)
}
func (m *QueryLastMetaHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastMetaHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastMetaHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastMetaHeightRequest proto.InternalMessageInfo

type QueryLastMetaHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (m *QueryLastMetaHeightResponse) Reset()         { *m = QueryLastMetaHeightResponse{} }
func (m *QueryLastMetaHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastMetaHeightResponse) ProtoMessage()    {}
func (*QueryLastMetaHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{21}
}
func (m *QueryLastMetaHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastMetaHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastMetaHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastMetaHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastMetaHeightResponse.Merge(m, src)
}
func (m *QueryLastMetaHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastMetaHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastMetaHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastMetaHeightResponse proto.InternalMessageInfo

func (m *QueryLastMetaHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type QueryGetTxinVoterRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTxinVoterRequest) Reset()         { *m = QueryGetTxinVoterRequest{} }
func (m *QueryGetTxinVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxinVoterRequest) ProtoMessage()    {}
func (*QueryGetTxinVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{22}
}
func (m *QueryGetTxinVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxinVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxinVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxinVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxinVoterRequest.Merge(m, src)
}
func (m *QueryGetTxinVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxinVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxinVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxinVoterRequest proto.InternalMessageInfo

func (m *QueryGetTxinVoterRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTxinVoterResponse struct {
	TxinVoter *TxinVoter `protobuf:"bytes,1,opt,name=TxinVoter,proto3" json:"TxinVoter,omitempty"`
}

func (m *QueryGetTxinVoterResponse) Reset()         { *m = QueryGetTxinVoterResponse{} }
func (m *QueryGetTxinVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxinVoterResponse) ProtoMessage()    {}
func (*QueryGetTxinVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{23}
}
func (m *QueryGetTxinVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxinVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxinVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxinVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxinVoterResponse.Merge(m, src)
}
func (m *QueryGetTxinVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxinVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxinVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxinVoterResponse proto.InternalMessageInfo

func (m *QueryGetTxinVoterResponse) GetTxinVoter() *TxinVoter {
	if m != nil {
		return m.TxinVoter
	}
	return nil
}

type QueryAllTxinVoterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTxinVoterRequest) Reset()         { *m = QueryAllTxinVoterRequest{} }
func (m *QueryAllTxinVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTxinVoterRequest) ProtoMessage()    {}
func (*QueryAllTxinVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{24}
}
func (m *QueryAllTxinVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTxinVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTxinVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTxinVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTxinVoterRequest.Merge(m, src)
}
func (m *QueryAllTxinVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTxinVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTxinVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTxinVoterRequest proto.InternalMessageInfo

func (m *QueryAllTxinVoterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTxinVoterResponse struct {
	TxinVoter  []*TxinVoter        `protobuf:"bytes,1,rep,name=TxinVoter,proto3" json:"TxinVoter,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTxinVoterResponse) Reset()         { *m = QueryAllTxinVoterResponse{} }
func (m *QueryAllTxinVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTxinVoterResponse) ProtoMessage()    {}
func (*QueryAllTxinVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{25}
}
func (m *QueryAllTxinVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTxinVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTxinVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTxinVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTxinVoterResponse.Merge(m, src)
}
func (m *QueryAllTxinVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTxinVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTxinVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTxinVoterResponse proto.InternalMessageInfo

func (m *QueryAllTxinVoterResponse) GetTxinVoter() []*TxinVoter {
	if m != nil {
		return m.TxinVoter
	}
	return nil
}

func (m *QueryAllTxinVoterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTxinRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTxinRequest) Reset()         { *m = QueryGetTxinRequest{} }
func (m *QueryGetTxinRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxinRequest) ProtoMessage()    {}
func (*QueryGetTxinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{26}
}
func (m *QueryGetTxinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxinRequest.Merge(m, src)
}
func (m *QueryGetTxinRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxinRequest proto.InternalMessageInfo

func (m *QueryGetTxinRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTxinResponse struct {
	Txin *Txin `protobuf:"bytes,1,opt,name=Txin,proto3" json:"Txin,omitempty"`
}

func (m *QueryGetTxinResponse) Reset()         { *m = QueryGetTxinResponse{} }
func (m *QueryGetTxinResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxinResponse) ProtoMessage()    {}
func (*QueryGetTxinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{27}
}
func (m *QueryGetTxinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxinResponse.Merge(m, src)
}
func (m *QueryGetTxinResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxinResponse proto.InternalMessageInfo

func (m *QueryGetTxinResponse) GetTxin() *Txin {
	if m != nil {
		return m.Txin
	}
	return nil
}

type QueryAllTxinRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTxinRequest) Reset()         { *m = QueryAllTxinRequest{} }
func (m *QueryAllTxinRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTxinRequest) ProtoMessage()    {}
func (*QueryAllTxinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{28}
}
func (m *QueryAllTxinRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTxinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTxinRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTxinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTxinRequest.Merge(m, src)
}
func (m *QueryAllTxinRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTxinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTxinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTxinRequest proto.InternalMessageInfo

func (m *QueryAllTxinRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTxinResponse struct {
	Txin       []*Txin             `protobuf:"bytes,1,rep,name=Txin,proto3" json:"Txin,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTxinResponse) Reset()         { *m = QueryAllTxinResponse{} }
func (m *QueryAllTxinResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTxinResponse) ProtoMessage()    {}
func (*QueryAllTxinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_dc2a1267d2da6377, []int{29}
}
func (m *QueryAllTxinResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTxinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTxinResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTxinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTxinResponse.Merge(m, src)
}
func (m *QueryAllTxinResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTxinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTxinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTxinResponse proto.InternalMessageInfo

func (m *QueryAllTxinResponse) GetTxin() []*Txin {
	if m != nil {
		return m.Txin
	}
	return nil
}

func (m *QueryAllTxinResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetSendRequest)(nil), "MetaProtocol.metacore.metacore.QueryGetSendRequest")
	proto.RegisterType((*QueryGetSendResponse)(nil), "MetaProtocol.metacore.metacore.QueryGetSendResponse")
	proto.RegisterType((*QueryAllSendRequest)(nil), "MetaProtocol.metacore.metacore.QueryAllSendRequest")
	proto.RegisterType((*QueryAllSendResponse)(nil), "MetaProtocol.metacore.metacore.QueryAllSendResponse")
	proto.RegisterType((*QueryGetSendVoterRequest)(nil), "MetaProtocol.metacore.metacore.QueryGetSendVoterRequest")
	proto.RegisterType((*QueryGetSendVoterResponse)(nil), "MetaProtocol.metacore.metacore.QueryGetSendVoterResponse")
	proto.RegisterType((*QueryAllSendVoterRequest)(nil), "MetaProtocol.metacore.metacore.QueryAllSendVoterRequest")
	proto.RegisterType((*QueryAllSendVoterResponse)(nil), "MetaProtocol.metacore.metacore.QueryAllSendVoterResponse")
	proto.RegisterType((*QueryGetTxoutConfirmationRequest)(nil), "MetaProtocol.metacore.metacore.QueryGetTxoutConfirmationRequest")
	proto.RegisterType((*QueryGetTxoutConfirmationResponse)(nil), "MetaProtocol.metacore.metacore.QueryGetTxoutConfirmationResponse")
	proto.RegisterType((*QueryAllTxoutConfirmationRequest)(nil), "MetaProtocol.metacore.metacore.QueryAllTxoutConfirmationRequest")
	proto.RegisterType((*QueryAllTxoutConfirmationResponse)(nil), "MetaProtocol.metacore.metacore.QueryAllTxoutConfirmationResponse")
	proto.RegisterType((*QueryGetTxoutRequest)(nil), "MetaProtocol.metacore.metacore.QueryGetTxoutRequest")
	proto.RegisterType((*QueryGetTxoutResponse)(nil), "MetaProtocol.metacore.metacore.QueryGetTxoutResponse")
	proto.RegisterType((*QueryAllTxoutRequest)(nil), "MetaProtocol.metacore.metacore.QueryAllTxoutRequest")
	proto.RegisterType((*QueryAllTxoutResponse)(nil), "MetaProtocol.metacore.metacore.QueryAllTxoutResponse")
	proto.RegisterType((*QueryGetNodeAccountRequest)(nil), "MetaProtocol.metacore.metacore.QueryGetNodeAccountRequest")
	proto.RegisterType((*QueryGetNodeAccountResponse)(nil), "MetaProtocol.metacore.metacore.QueryGetNodeAccountResponse")
	proto.RegisterType((*QueryAllNodeAccountRequest)(nil), "MetaProtocol.metacore.metacore.QueryAllNodeAccountRequest")
	proto.RegisterType((*QueryAllNodeAccountResponse)(nil), "MetaProtocol.metacore.metacore.QueryAllNodeAccountResponse")
	proto.RegisterType((*QueryLastMetaHeightRequest)(nil), "MetaProtocol.metacore.metacore.QueryLastMetaHeightRequest")
	proto.RegisterType((*QueryLastMetaHeightResponse)(nil), "MetaProtocol.metacore.metacore.QueryLastMetaHeightResponse")
	proto.RegisterType((*QueryGetTxinVoterRequest)(nil), "MetaProtocol.metacore.metacore.QueryGetTxinVoterRequest")
	proto.RegisterType((*QueryGetTxinVoterResponse)(nil), "MetaProtocol.metacore.metacore.QueryGetTxinVoterResponse")
	proto.RegisterType((*QueryAllTxinVoterRequest)(nil), "MetaProtocol.metacore.metacore.QueryAllTxinVoterRequest")
	proto.RegisterType((*QueryAllTxinVoterResponse)(nil), "MetaProtocol.metacore.metacore.QueryAllTxinVoterResponse")
	proto.RegisterType((*QueryGetTxinRequest)(nil), "MetaProtocol.metacore.metacore.QueryGetTxinRequest")
	proto.RegisterType((*QueryGetTxinResponse)(nil), "MetaProtocol.metacore.metacore.QueryGetTxinResponse")
	proto.RegisterType((*QueryAllTxinRequest)(nil), "MetaProtocol.metacore.metacore.QueryAllTxinRequest")
	proto.RegisterType((*QueryAllTxinResponse)(nil), "MetaProtocol.metacore.metacore.QueryAllTxinResponse")
}

func init() { proto.RegisterFile("metacore/query.proto", fileDescriptor_dc2a1267d2da6377) }

var fileDescriptor_dc2a1267d2da6377 = []byte{
	// 1148 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0x41, 0x6f, 0x1b, 0x45,
	0x18, 0xcd, 0xc4, 0x4d, 0xa1, 0x53, 0x14, 0x89, 0x89, 0x8b, 0x5a, 0xb7, 0xb2, 0xda, 0x15, 0x4d,
	0x4b, 0xd3, 0xec, 0x12, 0xc7, 0x01, 0x93, 0xf6, 0x50, 0x17, 0x89, 0x70, 0x68, 0x51, 0x30, 0x11,
	0x07, 0x24, 0x88, 0xd6, 0xde, 0xc1, 0x5d, 0xb4, 0xd9, 0x75, 0xbd, 0xeb, 0xca, 0x55, 0xd5, 0x0b,
	0xe2, 0x07, 0x20, 0x71, 0xe2, 0xc0, 0x89, 0x03, 0x70, 0xe0, 0x88, 0xb8, 0x20, 0x21, 0x21, 0x0e,
	0x5c, 0x90, 0x2a, 0x71, 0x80, 0x03, 0x07, 0x94, 0xf0, 0x23, 0x38, 0xa2, 0x99, 0xfd, 0xbc, 0x3b,
	0xe3, 0x5d, 0xdb, 0x33, 0xce, 0xe6, 0x16, 0xcf, 0xce, 0xfb, 0xbe, 0xf7, 0xde, 0xb7, 0xbb, 0xf3,
	0x36, 0xb8, 0x7c, 0x40, 0x23, 0xbb, 0x13, 0xf4, 0xa9, 0xf5, 0x70, 0x40, 0xfb, 0x8f, 0xcd, 0x5e,
	0x3f, 0x88, 0x02, 0x52, 0xbd, 0x4f, 0x23, 0x7b, 0x97, 0xfd, 0xd9, 0x09, 0x3c, 0x73, 0xb4, 0x25,
	0xf9, 0xa3, 0x72, 0xa9, 0x1b, 0x04, 0x5d, 0x8f, 0x5a, 0x76, 0xcf, 0xb5, 0x6c, 0xdf, 0x0f, 0x22,
	0x3b, 0x72, 0x03, 0x3f, 0x8c, 0xd1, 0x95, 0x1b, 0x9d, 0x20, 0x3c, 0x08, 0x42, 0xab, 0x6d, 0x87,
	0x50, 0xd6, 0x7a, 0xb4, 0xd1, 0xa6, 0x91, 0xbd, 0x61, 0xf5, 0xec, 0xae, 0xeb, 0xf3, 0xcd, 0xb0,
	0x77, 0x25, 0xe9, 0x1f, 0x52, 0xdf, 0x81, 0xc5, 0x0b, 0xd2, 0xe2, 0xfe, 0xa3, 0x20, 0xa2, 0x7d,
	0xb8, 0x74, 0x25, 0xb9, 0x14, 0x0d, 0x83, 0x41, 0xb4, 0xdf, 0x09, 0xfc, 0x8f, 0xdd, 0xfe, 0x81,
	0x58, 0xb2, 0x2c, 0x6f, 0x81, 0xd5, 0x8b, 0xc9, 0xaa, 0x1f, 0x38, 0x74, 0xdf, 0xee, 0x74, 0x82,
	0x81, 0x1f, 0x65, 0x1a, 0x46, 0x43, 0xd7, 0x97, 0x1a, 0xae, 0x48, 0x97, 0xe2, 0x45, 0x63, 0x0d,
	0xaf, 0xbc, 0xcb, 0x74, 0xed, 0xd0, 0xe8, 0x3d, 0xea, 0x3b, 0x2d, 0xfa, 0x70, 0x40, 0xc3, 0x88,
	0x94, 0xf1, 0x92, 0xeb, 0x3b, 0x74, 0x78, 0x1e, 0x5d, 0x46, 0xd7, 0xcf, 0xb4, 0xe2, 0x1f, 0xc6,
	0x2e, 0x2e, 0xcb, 0x9b, 0xc3, 0x5e, 0xe0, 0x87, 0x94, 0x34, 0xf0, 0x29, 0xf6, 0x9b, 0x6f, 0x3e,
	0x5b, 0x7b, 0xd9, 0x9c, 0xee, 0xb9, 0xc9, 0xb1, 0x1c, 0x61, 0x7c, 0x08, 0xed, 0x9b, 0x9e, 0x27,
	0xb6, 0x7f, 0x0b, 0xe3, 0xd4, 0x5f, 0x28, 0xbb, 0x6a, 0xc6, 0xc3, 0x30, 0xd9, 0x30, 0xcc, 0x78,
	0xc6, 0x30, 0x0c, 0x73, 0xd7, 0xee, 0x52, 0xc0, 0xb6, 0x04, 0xa4, 0xf1, 0x25, 0x02, 0xc6, 0x49,
	0xfd, 0x0c, 0xe3, 0x92, 0x1e, 0x63, 0xb2, 0x23, 0x51, 0x5b, 0xe4, 0xd4, 0xae, 0xcd, 0xa4, 0x16,
	0xb7, 0x95, 0xb8, 0xbd, 0x8a, 0xcf, 0x8b, 0x66, 0xbe, 0xcf, 0x26, 0x35, 0xdd, 0x7e, 0x07, 0x5f,
	0xc8, 0x41, 0x80, 0xa2, 0x1d, 0x7c, 0x26, 0x59, 0x04, 0xc7, 0x5e, 0x51, 0x91, 0x15, 0x57, 0x49,
	0xb1, 0x46, 0x1b, 0x78, 0x81, 0x65, 0x12, 0xaf, 0xa2, 0xe6, 0xf2, 0x3d, 0x02, 0x29, 0x72, 0x93,
	0x7c, 0x29, 0xa5, 0x79, 0xa5, 0x14, 0x37, 0xab, 0x06, 0xbe, 0x3c, 0x72, 0x7e, 0x8f, 0x3d, 0x89,
	0x6f, 0x0a, 0xcf, 0xea, 0xf4, 0x99, 0x7d, 0x86, 0xf0, 0x95, 0x29, 0x50, 0x50, 0xbc, 0x8f, 0x5f,
	0xcc, 0x5c, 0x04, 0x7b, 0x37, 0x66, 0x29, 0xcf, 0x56, 0xcd, 0xd6, 0x32, 0x3e, 0x01, 0x01, 0x4d,
	0xcf, 0x9b, 0x28, 0xa0, 0xa8, 0xe1, 0xfe, 0x3e, 0x92, 0x9c, 0xdf, 0x6c, 0xba, 0xe4, 0x52, 0x51,
	0x92, 0x8b, 0x1b, 0xfe, 0x6a, 0xfa, 0xd6, 0xe3, 0x5d, 0x46, 0x7e, 0x2d, 0xe3, 0x45, 0x37, 0x7e,
	0xe7, 0x9d, 0x6a, 0x2d, 0xba, 0x8e, 0xb1, 0x87, 0xcf, 0x8d, 0xed, 0x03, 0xa9, 0xb7, 0xf0, 0x12,
	0x5f, 0x00, 0x4f, 0xaf, 0x2a, 0xc9, 0x6b, 0xc5, 0x18, 0xe3, 0xa3, 0xf4, 0x0d, 0x26, 0x75, 0x2f,
	0x6a, 0x5a, 0x5f, 0x21, 0xa0, 0x9d, 0x36, 0xc8, 0xd2, 0x2e, 0xe9, 0xd2, 0x2e, 0xce, 0xfd, 0x1a,
	0xae, 0x8c, 0x5c, 0x7d, 0x27, 0x70, 0x68, 0x33, 0x3e, 0xed, 0xa6, 0x3f, 0x74, 0x1e, 0xbe, 0x98,
	0x8b, 0x01, 0x61, 0xf7, 0xf1, 0x59, 0x61, 0x19, 0xbc, 0x5b, 0x9b, 0x25, 0x4f, 0xac, 0x24, 0xe2,
	0x0d, 0x07, 0x18, 0x36, 0x3d, 0x2f, 0x87, 0x61, 0x51, 0x73, 0xfa, 0x01, 0x81, 0xa8, 0xf1, 0x36,
	0x93, 0x44, 0x95, 0x8e, 0x23, 0xaa, 0xb8, 0xf9, 0x5d, 0x02, 0x77, 0xee, 0xd9, 0x61, 0xc4, 0xc8,
	0xbc, 0x4d, 0xdd, 0xee, 0x83, 0x91, 0x3b, 0xc6, 0x16, 0x88, 0x1a, 0xbf, 0x0a, 0xa2, 0x5e, 0xc2,
	0xa7, 0xe3, 0x15, 0x78, 0xcc, 0xe0, 0x97, 0x78, 0x76, 0xee, 0x0d, 0x5d, 0x5f, 0xef, 0xec, 0x14,
	0x10, 0xe9, 0x81, 0x93, 0x2c, 0xaa, 0x9e, 0x9d, 0x69, 0x95, 0x14, 0x2b, 0x9e, 0x9d, 0x19, 0x5e,
	0x27, 0x71, 0x76, 0xce, 0x94, 0x52, 0x9a, 0x57, 0x4a, 0x71, 0x37, 0x80, 0x90, 0x30, 0x59, 0x75,
	0xe5, 0x84, 0x19, 0x6f, 0x4e, 0xf3, 0x1a, 0xfb, 0xad, 0x9a, 0x30, 0x39, 0x96, 0x23, 0xc4, 0x84,
	0x29, 0xb6, 0x3f, 0x89, 0x84, 0x39, 0x81, 0x71, 0x49, 0x8f, 0x71, 0x61, 0xce, 0xd7, 0xfe, 0x3b,
	0x87, 0x97, 0x38, 0x37, 0xf2, 0x2d, 0x8a, 0xf3, 0x2e, 0xd9, 0x9c, 0xc5, 0x23, 0xe7, 0x63, 0xa0,
	0x52, 0xd7, 0x03, 0xc5, 0x4c, 0x8c, 0xad, 0x4f, 0xff, 0xf8, 0xf7, 0x8b, 0x45, 0x8b, 0xac, 0x5b,
	0x0c, 0xbd, 0x3e, 0x82, 0x5b, 0xc9, 0x57, 0x88, 0xf4, 0x69, 0x64, 0x3d, 0xe1, 0x37, 0xc0, 0x53,
	0xf2, 0x35, 0xc2, 0xcf, 0xb1, 0x3a, 0x4d, 0xcf, 0x53, 0x64, 0x2b, 0x7f, 0x3b, 0x28, 0xb2, 0x1d,
	0xfb, 0x20, 0x30, 0xd6, 0x39, 0xdb, 0x6b, 0xe4, 0xaa, 0x12, 0x5b, 0xf2, 0x13, 0x12, 0x32, 0x2a,
	0x69, 0xe8, 0x18, 0x24, 0xbe, 0x14, 0x2a, 0x6f, 0xcc, 0x81, 0x04, 0xc6, 0xdb, 0x9c, 0x71, 0x9d,
	0xd4, 0x94, 0x18, 0x73, 0x6c, 0x62, 0xf2, 0x8f, 0x08, 0xbf, 0x90, 0x54, 0x64, 0x4e, 0x37, 0x74,
	0x4c, 0x9b, 0x43, 0x41, 0x5e, 0xce, 0x37, 0x6a, 0x5c, 0xc1, 0x4d, 0x72, 0x43, 0x5d, 0x01, 0xf9,
	0x1b, 0xe5, 0xe4, 0x46, 0x72, 0x47, 0xd5, 0xc6, 0x49, 0xe1, 0xb7, 0xd2, 0x3c, 0x46, 0x05, 0x90,
	0x73, 0x97, 0xcb, 0xb9, 0x4d, 0xb6, 0x67, 0xca, 0x89, 0xc6, 0x6b, 0x24, 0x83, 0xf9, 0x13, 0xe1,
	0x72, 0xa6, 0x03, 0x1b, 0xd0, 0x1d, 0x55, 0x9b, 0x8f, 0xa9, 0x70, 0x5a, 0x66, 0xd7, 0xb8, 0xe5,
	0x32, 0x0a, 0xc9, 0x77, 0x08, 0xe2, 0x24, 0xa9, 0x6b, 0x59, 0x3d, 0xa2, 0xbf, 0xa5, 0x89, 0x02,
	0xca, 0x9b, 0x9c, 0xf2, 0x3a, 0x59, 0x53, 0xa3, 0x6c, 0x3d, 0x71, 0x9d, 0xa7, 0xe4, 0x1b, 0x84,
	0x9f, 0xe7, 0x65, 0x98, 0xf3, 0x75, 0x2d, 0xdf, 0xf4, 0xe8, 0x8e, 0x67, 0x6e, 0xc3, 0xe4, 0x74,
	0xaf, 0x93, 0x55, 0x35, 0xba, 0xe4, 0x57, 0x24, 0xc5, 0x3e, 0xb2, 0xad, 0xea, 0x52, 0x36, 0xa9,
	0x56, 0x6e, 0xcd, 0x85, 0x05, 0xe2, 0xb7, 0x39, 0xf1, 0xd7, 0x48, 0x7d, 0x26, 0x71, 0x3f, 0x45,
	0x27, 0xb7, 0xfd, 0xcf, 0x08, 0x2f, 0x0b, 0x55, 0x99, 0xed, 0xdb, 0xaa, 0x06, 0xce, 0xad, 0x24,
	0x3f, 0x48, 0x1b, 0x75, 0xae, 0xc4, 0x24, 0x37, 0x75, 0x94, 0x90, 0x5f, 0x10, 0x5e, 0x96, 0x43,
	0xac, 0xa2, 0x82, 0xdc, 0x5c, 0xac, 0xa8, 0x20, 0x3f, 0x35, 0x1b, 0xaf, 0x73, 0x05, 0x1b, 0xc4,
	0x9a, 0xa9, 0xc0, 0x93, 0x19, 0xb3, 0x53, 0x2d, 0x4d, 0x80, 0x0d, 0xf5, 0x27, 0x4e, 0x8e, 0xba,
	0xea, 0xa7, 0x5a, 0x26, 0xbf, 0x6a, 0xbd, 0x62, 0x00, 0x2b, 0x9d, 0x6a, 0x49, 0x45, 0xad, 0x53,
	0x6d, 0x4e, 0x05, 0x79, 0x09, 0x5c, 0xe3, 0x54, 0x4b, 0x14, 0xf0, 0x7c, 0xc6, 0xb3, 0xdf, 0xa6,
	0x8e, 0x73, 0xda, 0xf9, 0x4c, 0x0c, 0xa8, 0x1a, 0xf9, 0x8c, 0xf1, 0x94, 0xf2, 0x19, 0xab, 0xa3,
	0x95, 0xcf, 0xf4, 0xd9, 0x8e, 0xc5, 0x69, 0x8d, 0x7c, 0xc6, 0xd8, 0xde, 0xbd, 0xf7, 0xdb, 0x61,
	0x15, 0x3d, 0x3b, 0xac, 0xa2, 0x7f, 0x0e, 0xab, 0xe8, 0xf3, 0xa3, 0xea, 0xc2, 0xb3, 0xa3, 0xea,
	0xc2, 0x5f, 0x47, 0xd5, 0x85, 0x0f, 0x6a, 0x5d, 0x37, 0x7a, 0x30, 0x68, 0x9b, 0x9d, 0xe0, 0x60,
	0x52, 0xa9, 0xa1, 0x50, 0xec, 0x71, 0x8f, 0x86, 0xed, 0xd3, 0xfc, 0x7f, 0xe5, 0x9b, 0xff, 0x07,
	0x00, 0x00, 0xff, 0xff, 0xa1, 0xf8, 0x56, 0xa3, 0x63, 0x18, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a send by index.
	Send(ctx context.Context, in *QueryGetSendRequest, opts ...grpc.CallOption) (*QueryGetSendResponse, error)
	// Queries a list of send items.
	SendAll(ctx context.Context, in *QueryAllSendRequest, opts ...grpc.CallOption) (*QueryAllSendResponse, error)
	// Queries a sendVoter by index.
	SendVoter(ctx context.Context, in *QueryGetSendVoterRequest, opts ...grpc.CallOption) (*QueryGetSendVoterResponse, error)
	// Queries a list of sendVoter items.
	SendVoterAll(ctx context.Context, in *QueryAllSendVoterRequest, opts ...grpc.CallOption) (*QueryAllSendVoterResponse, error)
	// Queries a txoutConfirmation by index.
	TxoutConfirmation(ctx context.Context, in *QueryGetTxoutConfirmationRequest, opts ...grpc.CallOption) (*QueryGetTxoutConfirmationResponse, error)
	// Queries a list of txoutConfirmation items.
	TxoutConfirmationAll(ctx context.Context, in *QueryAllTxoutConfirmationRequest, opts ...grpc.CallOption) (*QueryAllTxoutConfirmationResponse, error)
	// Queries a txout by id.
	Txout(ctx context.Context, in *QueryGetTxoutRequest, opts ...grpc.CallOption) (*QueryGetTxoutResponse, error)
	// Queries a list of txout items.
	TxoutAll(ctx context.Context, in *QueryAllTxoutRequest, opts ...grpc.CallOption) (*QueryAllTxoutResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryGetNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryAllNodeAccountResponse, error)
	// Queries a list of lastMetaHeight items.
	LastMetaHeight(ctx context.Context, in *QueryLastMetaHeightRequest, opts ...grpc.CallOption) (*QueryLastMetaHeightResponse, error)
	// Queries a txinVoter by index.
	TxinVoter(ctx context.Context, in *QueryGetTxinVoterRequest, opts ...grpc.CallOption) (*QueryGetTxinVoterResponse, error)
	// Queries a list of txinVoter items.
	TxinVoterAll(ctx context.Context, in *QueryAllTxinVoterRequest, opts ...grpc.CallOption) (*QueryAllTxinVoterResponse, error)
	// Queries a txin by index.
	Txin(ctx context.Context, in *QueryGetTxinRequest, opts ...grpc.CallOption) (*QueryGetTxinResponse, error)
	// Queries a list of txin items.
	TxinAll(ctx context.Context, in *QueryAllTxinRequest, opts ...grpc.CallOption) (*QueryAllTxinResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Send(ctx context.Context, in *QueryGetSendRequest, opts ...grpc.CallOption) (*QueryGetSendResponse, error) {
	out := new(QueryGetSendResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendAll(ctx context.Context, in *QueryAllSendRequest, opts ...grpc.CallOption) (*QueryAllSendResponse, error) {
	out := new(QueryAllSendResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/SendAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendVoter(ctx context.Context, in *QueryGetSendVoterRequest, opts ...grpc.CallOption) (*QueryGetSendVoterResponse, error) {
	out := new(QueryGetSendVoterResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/SendVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendVoterAll(ctx context.Context, in *QueryAllSendVoterRequest, opts ...grpc.CallOption) (*QueryAllSendVoterResponse, error) {
	out := new(QueryAllSendVoterResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/SendVoterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxoutConfirmation(ctx context.Context, in *QueryGetTxoutConfirmationRequest, opts ...grpc.CallOption) (*QueryGetTxoutConfirmationResponse, error) {
	out := new(QueryGetTxoutConfirmationResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/TxoutConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxoutConfirmationAll(ctx context.Context, in *QueryAllTxoutConfirmationRequest, opts ...grpc.CallOption) (*QueryAllTxoutConfirmationResponse, error) {
	out := new(QueryAllTxoutConfirmationResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/TxoutConfirmationAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Txout(ctx context.Context, in *QueryGetTxoutRequest, opts ...grpc.CallOption) (*QueryGetTxoutResponse, error) {
	out := new(QueryGetTxoutResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/Txout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxoutAll(ctx context.Context, in *QueryAllTxoutRequest, opts ...grpc.CallOption) (*QueryAllTxoutResponse, error) {
	out := new(QueryAllTxoutResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/TxoutAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryGetNodeAccountResponse, error) {
	out := new(QueryGetNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/NodeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryAllNodeAccountResponse, error) {
	out := new(QueryAllNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/NodeAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastMetaHeight(ctx context.Context, in *QueryLastMetaHeightRequest, opts ...grpc.CallOption) (*QueryLastMetaHeightResponse, error) {
	out := new(QueryLastMetaHeightResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/LastMetaHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxinVoter(ctx context.Context, in *QueryGetTxinVoterRequest, opts ...grpc.CallOption) (*QueryGetTxinVoterResponse, error) {
	out := new(QueryGetTxinVoterResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/TxinVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxinVoterAll(ctx context.Context, in *QueryAllTxinVoterRequest, opts ...grpc.CallOption) (*QueryAllTxinVoterResponse, error) {
	out := new(QueryAllTxinVoterResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/TxinVoterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Txin(ctx context.Context, in *QueryGetTxinRequest, opts ...grpc.CallOption) (*QueryGetTxinResponse, error) {
	out := new(QueryGetTxinResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/Txin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxinAll(ctx context.Context, in *QueryAllTxinRequest, opts ...grpc.CallOption) (*QueryAllTxinResponse, error) {
	out := new(QueryAllTxinResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Query/TxinAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a send by index.
	Send(context.Context, *QueryGetSendRequest) (*QueryGetSendResponse, error)
	// Queries a list of send items.
	SendAll(context.Context, *QueryAllSendRequest) (*QueryAllSendResponse, error)
	// Queries a sendVoter by index.
	SendVoter(context.Context, *QueryGetSendVoterRequest) (*QueryGetSendVoterResponse, error)
	// Queries a list of sendVoter items.
	SendVoterAll(context.Context, *QueryAllSendVoterRequest) (*QueryAllSendVoterResponse, error)
	// Queries a txoutConfirmation by index.
	TxoutConfirmation(context.Context, *QueryGetTxoutConfirmationRequest) (*QueryGetTxoutConfirmationResponse, error)
	// Queries a list of txoutConfirmation items.
	TxoutConfirmationAll(context.Context, *QueryAllTxoutConfirmationRequest) (*QueryAllTxoutConfirmationResponse, error)
	// Queries a txout by id.
	Txout(context.Context, *QueryGetTxoutRequest) (*QueryGetTxoutResponse, error)
	// Queries a list of txout items.
	TxoutAll(context.Context, *QueryAllTxoutRequest) (*QueryAllTxoutResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(context.Context, *QueryGetNodeAccountRequest) (*QueryGetNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(context.Context, *QueryAllNodeAccountRequest) (*QueryAllNodeAccountResponse, error)
	// Queries a list of lastMetaHeight items.
	LastMetaHeight(context.Context, *QueryLastMetaHeightRequest) (*QueryLastMetaHeightResponse, error)
	// Queries a txinVoter by index.
	TxinVoter(context.Context, *QueryGetTxinVoterRequest) (*QueryGetTxinVoterResponse, error)
	// Queries a list of txinVoter items.
	TxinVoterAll(context.Context, *QueryAllTxinVoterRequest) (*QueryAllTxinVoterResponse, error)
	// Queries a txin by index.
	Txin(context.Context, *QueryGetTxinRequest) (*QueryGetTxinResponse, error)
	// Queries a list of txin items.
	TxinAll(context.Context, *QueryAllTxinRequest) (*QueryAllTxinResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Send(ctx context.Context, req *QueryGetSendRequest) (*QueryGetSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedQueryServer) SendAll(ctx context.Context, req *QueryAllSendRequest) (*QueryAllSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAll not implemented")
}
func (*UnimplementedQueryServer) SendVoter(ctx context.Context, req *QueryGetSendVoterRequest) (*QueryGetSendVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVoter not implemented")
}
func (*UnimplementedQueryServer) SendVoterAll(ctx context.Context, req *QueryAllSendVoterRequest) (*QueryAllSendVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVoterAll not implemented")
}
func (*UnimplementedQueryServer) TxoutConfirmation(ctx context.Context, req *QueryGetTxoutConfirmationRequest) (*QueryGetTxoutConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxoutConfirmation not implemented")
}
func (*UnimplementedQueryServer) TxoutConfirmationAll(ctx context.Context, req *QueryAllTxoutConfirmationRequest) (*QueryAllTxoutConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxoutConfirmationAll not implemented")
}
func (*UnimplementedQueryServer) Txout(ctx context.Context, req *QueryGetTxoutRequest) (*QueryGetTxoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Txout not implemented")
}
func (*UnimplementedQueryServer) TxoutAll(ctx context.Context, req *QueryAllTxoutRequest) (*QueryAllTxoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxoutAll not implemented")
}
func (*UnimplementedQueryServer) NodeAccount(ctx context.Context, req *QueryGetNodeAccountRequest) (*QueryGetNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccount not implemented")
}
func (*UnimplementedQueryServer) NodeAccountAll(ctx context.Context, req *QueryAllNodeAccountRequest) (*QueryAllNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccountAll not implemented")
}
func (*UnimplementedQueryServer) LastMetaHeight(ctx context.Context, req *QueryLastMetaHeightRequest) (*QueryLastMetaHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastMetaHeight not implemented")
}
func (*UnimplementedQueryServer) TxinVoter(ctx context.Context, req *QueryGetTxinVoterRequest) (*QueryGetTxinVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxinVoter not implemented")
}
func (*UnimplementedQueryServer) TxinVoterAll(ctx context.Context, req *QueryAllTxinVoterRequest) (*QueryAllTxinVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxinVoterAll not implemented")
}
func (*UnimplementedQueryServer) Txin(ctx context.Context, req *QueryGetTxinRequest) (*QueryGetTxinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Txin not implemented")
}
func (*UnimplementedQueryServer) TxinAll(ctx context.Context, req *QueryAllTxinRequest) (*QueryAllTxinResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxinAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Send(ctx, req.(*QueryGetSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/SendAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendAll(ctx, req.(*QueryAllSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSendVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/SendVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendVoter(ctx, req.(*QueryGetSendVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendVoterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSendVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendVoterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/SendVoterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendVoterAll(ctx, req.(*QueryAllSendVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxoutConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTxoutConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxoutConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/TxoutConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxoutConfirmation(ctx, req.(*QueryGetTxoutConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxoutConfirmationAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTxoutConfirmationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxoutConfirmationAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/TxoutConfirmationAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxoutConfirmationAll(ctx, req.(*QueryAllTxoutConfirmationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Txout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTxoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Txout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/Txout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Txout(ctx, req.(*QueryGetTxoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxoutAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTxoutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxoutAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/TxoutAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxoutAll(ctx, req.(*QueryAllTxoutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/NodeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccount(ctx, req.(*QueryGetNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/NodeAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccountAll(ctx, req.(*QueryAllNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastMetaHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastMetaHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastMetaHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/LastMetaHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastMetaHeight(ctx, req.(*QueryLastMetaHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxinVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTxinVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxinVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/TxinVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxinVoter(ctx, req.(*QueryGetTxinVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxinVoterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTxinVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxinVoterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/TxinVoterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxinVoterAll(ctx, req.(*QueryAllTxinVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Txin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTxinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Txin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/Txin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Txin(ctx, req.(*QueryGetTxinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxinAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTxinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxinAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Query/TxinAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxinAll(ctx, req.(*QueryAllTxinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MetaProtocol.metacore.metacore.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Query_Send_Handler,
		},
		{
			MethodName: "SendAll",
			Handler:    _Query_SendAll_Handler,
		},
		{
			MethodName: "SendVoter",
			Handler:    _Query_SendVoter_Handler,
		},
		{
			MethodName: "SendVoterAll",
			Handler:    _Query_SendVoterAll_Handler,
		},
		{
			MethodName: "TxoutConfirmation",
			Handler:    _Query_TxoutConfirmation_Handler,
		},
		{
			MethodName: "TxoutConfirmationAll",
			Handler:    _Query_TxoutConfirmationAll_Handler,
		},
		{
			MethodName: "Txout",
			Handler:    _Query_Txout_Handler,
		},
		{
			MethodName: "TxoutAll",
			Handler:    _Query_TxoutAll_Handler,
		},
		{
			MethodName: "NodeAccount",
			Handler:    _Query_NodeAccount_Handler,
		},
		{
			MethodName: "NodeAccountAll",
			Handler:    _Query_NodeAccountAll_Handler,
		},
		{
			MethodName: "LastMetaHeight",
			Handler:    _Query_LastMetaHeight_Handler,
		},
		{
			MethodName: "TxinVoter",
			Handler:    _Query_TxinVoter_Handler,
		},
		{
			MethodName: "TxinVoterAll",
			Handler:    _Query_TxinVoterAll_Handler,
		},
		{
			MethodName: "Txin",
			Handler:    _Query_Txin_Handler,
		},
		{
			MethodName: "TxinAll",
			Handler:    _Query_TxinAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metacore/query.proto",
}

func (m *QueryGetSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Send != nil {
		{
			size, err := m.Send.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Send) > 0 {
		for iNdEx := len(m.Send) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Send[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSendVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSendVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SendVoter != nil {
		{
			size, err := m.SendVoter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSendVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSendVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSendVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSendVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSendVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSendVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SendVoter) > 0 {
		for iNdEx := len(m.SendVoter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SendVoter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxoutConfirmationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxoutConfirmationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxoutConfirmationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxoutConfirmationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxoutConfirmationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxoutConfirmationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxoutConfirmation != nil {
		{
			size, err := m.TxoutConfirmation.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTxoutConfirmationRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTxoutConfirmationRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTxoutConfirmationRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTxoutConfirmationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTxoutConfirmationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTxoutConfirmationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxoutConfirmation) > 0 {
		for iNdEx := len(m.TxoutConfirmation) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxoutConfirmation[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Txout != nil {
		{
			size, err := m.Txout.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTxoutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTxoutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTxoutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTxoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTxoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTxoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Txout) > 0 {
		for iNdEx := len(m.Txout) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txout[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeAccount != nil {
		{
			size, err := m.NodeAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeAccount) > 0 {
		for iNdEx := len(m.NodeAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastMetaHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastMetaHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastMetaHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastMetaHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastMetaHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastMetaHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxinVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxinVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxinVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxinVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxinVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxinVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxinVoter != nil {
		{
			size, err := m.TxinVoter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTxinVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTxinVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTxinVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTxinVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTxinVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTxinVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TxinVoter) > 0 {
		for iNdEx := len(m.TxinVoter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TxinVoter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Txin != nil {
		{
			size, err := m.Txin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTxinRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTxinRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTxinRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTxinResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTxinResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTxinResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Txin) > 0 {
		for iNdEx := len(m.Txin) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Txin[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Send != nil {
		l = m.Send.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Send) > 0 {
		for _, e := range m.Send {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSendVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSendVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SendVoter != nil {
		l = m.SendVoter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSendVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSendVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SendVoter) > 0 {
		for _, e := range m.SendVoter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxoutConfirmationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxoutConfirmationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxoutConfirmation != nil {
		l = m.TxoutConfirmation.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTxoutConfirmationRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTxoutConfirmationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxoutConfirmation) > 0 {
		for _, e := range m.TxoutConfirmation {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryGetTxoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Txout != nil {
		l = m.Txout.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTxoutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTxoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txout) > 0 {
		for _, e := range m.Txout {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeAccount != nil {
		l = m.NodeAccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAccount) > 0 {
		for _, e := range m.NodeAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastMetaHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastMetaHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func (m *QueryGetTxinVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxinVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TxinVoter != nil {
		l = m.TxinVoter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTxinVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTxinVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TxinVoter) > 0 {
		for _, e := range m.TxinVoter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Txin != nil {
		l = m.Txin.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTxinRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTxinResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txin) > 0 {
		for _, e := range m.Txin {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Send == nil {
				m.Send = &Send{}
			}
			if err := m.Send.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Send = append(m.Send, &Send{})
			if err := m.Send[len(m.Send)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.SendVoter == nil {
				m.SendVoter = &SendVoter{}
			}
			if err := m.SendVoter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSendVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSendVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSendVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSendVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSendVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSendVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendVoter = append(m.SendVoter, &SendVoter{})
			if err := m.SendVoter[len(m.SendVoter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxoutConfirmationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxoutConfirmationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxoutConfirmationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxoutConfirmationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxoutConfirmationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxoutConfirmationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxoutConfirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxoutConfirmation == nil {
				m.TxoutConfirmation = &TxoutConfirmation{}
			}
			if err := m.TxoutConfirmation.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTxoutConfirmationRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTxoutConfirmationRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTxoutConfirmationRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTxoutConfirmationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTxoutConfirmationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTxoutConfirmationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxoutConfirmation", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxoutConfirmation = append(m.TxoutConfirmation, &TxoutConfirmation{})
			if err := m.TxoutConfirmation[len(m.TxoutConfirmation)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txout == nil {
				m.Txout = &Txout{}
			}
			if err := m.Txout.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTxoutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTxoutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTxoutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTxoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTxoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTxoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txout", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txout = append(m.Txout, &Txout{})
			if err := m.Txout[len(m.Txout)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAccount == nil {
				m.NodeAccount = &NodeAccount{}
			}
			if err := m.NodeAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAccount = append(m.NodeAccount, &NodeAccount{})
			if err := m.NodeAccount[len(m.NodeAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastMetaHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastMetaHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastMetaHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastMetaHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastMetaHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastMetaHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxinVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxinVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxinVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxinVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxinVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxinVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxinVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TxinVoter == nil {
				m.TxinVoter = &TxinVoter{}
			}
			if err := m.TxinVoter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTxinVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTxinVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTxinVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTxinVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTxinVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTxinVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxinVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxinVoter = append(m.TxinVoter, &TxinVoter{})
			if err := m.TxinVoter[len(m.TxinVoter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Txin == nil {
				m.Txin = &Txin{}
			}
			if err := m.Txin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTxinRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTxinRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTxinRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTxinResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTxinResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTxinResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txin = append(m.Txin, &Txin{})
			if err := m.Txin[len(m.Txin)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
