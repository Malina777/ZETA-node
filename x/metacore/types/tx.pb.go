// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metacore/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	common "github.com/Meta-Protocol/metacore/common"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// this line is used by starport scaffolding # proto/tx/message
type MsgGasPriceVoter struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain       string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Price       uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	BlockNumber uint64 `protobuf:"varint,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Supply      string `protobuf:"bytes,5,opt,name=supply,proto3" json:"supply,omitempty"`
}

func (m *MsgGasPriceVoter) Reset()         { *m = MsgGasPriceVoter{} }
func (m *MsgGasPriceVoter) String() string { return proto.CompactTextString(m) }
func (*MsgGasPriceVoter) ProtoMessage()    {}
func (*MsgGasPriceVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{0}
}
func (m *MsgGasPriceVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasPriceVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasPriceVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasPriceVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasPriceVoter.Merge(m, src)
}
func (m *MsgGasPriceVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasPriceVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasPriceVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasPriceVoter proto.InternalMessageInfo

func (m *MsgGasPriceVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgGasPriceVoter) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgGasPriceVoter) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *MsgGasPriceVoter) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *MsgGasPriceVoter) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

type MsgGasPriceVoterResponse struct {
}

func (m *MsgGasPriceVoterResponse) Reset()         { *m = MsgGasPriceVoterResponse{} }
func (m *MsgGasPriceVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGasPriceVoterResponse) ProtoMessage()    {}
func (*MsgGasPriceVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{1}
}
func (m *MsgGasPriceVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasPriceVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasPriceVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasPriceVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasPriceVoterResponse.Merge(m, src)
}
func (m *MsgGasPriceVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasPriceVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasPriceVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasPriceVoterResponse proto.InternalMessageInfo

type MsgNonceVoter struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Nonce   uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgNonceVoter) Reset()         { *m = MsgNonceVoter{} }
func (m *MsgNonceVoter) String() string { return proto.CompactTextString(m) }
func (*MsgNonceVoter) ProtoMessage()    {}
func (*MsgNonceVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{2}
}
func (m *MsgNonceVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNonceVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNonceVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNonceVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNonceVoter.Merge(m, src)
}
func (m *MsgNonceVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgNonceVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNonceVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNonceVoter proto.InternalMessageInfo

func (m *MsgNonceVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNonceVoter) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgNonceVoter) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgNonceVoterResponse struct {
}

func (m *MsgNonceVoterResponse) Reset()         { *m = MsgNonceVoterResponse{} }
func (m *MsgNonceVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNonceVoterResponse) ProtoMessage()    {}
func (*MsgNonceVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{3}
}
func (m *MsgNonceVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNonceVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNonceVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNonceVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNonceVoterResponse.Merge(m, src)
}
func (m *MsgNonceVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNonceVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNonceVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNonceVoterResponse proto.InternalMessageInfo

type MsgReceiveConfirmation struct {
	Creator        string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SendHash       string `protobuf:"bytes,2,opt,name=sendHash,proto3" json:"sendHash,omitempty"`
	OutTxHash      string `protobuf:"bytes,3,opt,name=outTxHash,proto3" json:"outTxHash,omitempty"`
	OutBlockHeight uint64 `protobuf:"varint,4,opt,name=outBlockHeight,proto3" json:"outBlockHeight,omitempty"`
	MMint          string `protobuf:"bytes,5,opt,name=mMint,proto3" json:"mMint,omitempty"`
}

func (m *MsgReceiveConfirmation) Reset()         { *m = MsgReceiveConfirmation{} }
func (m *MsgReceiveConfirmation) String() string { return proto.CompactTextString(m) }
func (*MsgReceiveConfirmation) ProtoMessage()    {}
func (*MsgReceiveConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{4}
}
func (m *MsgReceiveConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiveConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiveConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiveConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiveConfirmation.Merge(m, src)
}
func (m *MsgReceiveConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiveConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiveConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiveConfirmation proto.InternalMessageInfo

func (m *MsgReceiveConfirmation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgReceiveConfirmation) GetSendHash() string {
	if m != nil {
		return m.SendHash
	}
	return ""
}

func (m *MsgReceiveConfirmation) GetOutTxHash() string {
	if m != nil {
		return m.OutTxHash
	}
	return ""
}

func (m *MsgReceiveConfirmation) GetOutBlockHeight() uint64 {
	if m != nil {
		return m.OutBlockHeight
	}
	return 0
}

func (m *MsgReceiveConfirmation) GetMMint() string {
	if m != nil {
		return m.MMint
	}
	return ""
}

type MsgReceiveConfirmationResponse struct {
}

func (m *MsgReceiveConfirmationResponse) Reset()         { *m = MsgReceiveConfirmationResponse{} }
func (m *MsgReceiveConfirmationResponse) String() string { return proto.CompactTextString(m) }
func (*MsgReceiveConfirmationResponse) ProtoMessage()    {}
func (*MsgReceiveConfirmationResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{5}
}
func (m *MsgReceiveConfirmationResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgReceiveConfirmationResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgReceiveConfirmationResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgReceiveConfirmationResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgReceiveConfirmationResponse.Merge(m, src)
}
func (m *MsgReceiveConfirmationResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgReceiveConfirmationResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgReceiveConfirmationResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgReceiveConfirmationResponse proto.InternalMessageInfo

type MsgSendVoter struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Sender        string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChain   string `protobuf:"bytes,3,opt,name=senderChain,proto3" json:"senderChain,omitempty"`
	Receiver      string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain string `protobuf:"bytes,5,opt,name=receiverChain,proto3" json:"receiverChain,omitempty"`
	MBurnt        string `protobuf:"bytes,6,opt,name=mBurnt,proto3" json:"mBurnt,omitempty"`
	MMint         string `protobuf:"bytes,7,opt,name=mMint,proto3" json:"mMint,omitempty"`
	Message       string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	InTxHash      string `protobuf:"bytes,9,opt,name=inTxHash,proto3" json:"inTxHash,omitempty"`
	InBlockHeight uint64 `protobuf:"varint,10,opt,name=inBlockHeight,proto3" json:"inBlockHeight,omitempty"`
}

func (m *MsgSendVoter) Reset()         { *m = MsgSendVoter{} }
func (m *MsgSendVoter) String() string { return proto.CompactTextString(m) }
func (*MsgSendVoter) ProtoMessage()    {}
func (*MsgSendVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{6}
}
func (m *MsgSendVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendVoter.Merge(m, src)
}
func (m *MsgSendVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendVoter proto.InternalMessageInfo

func (m *MsgSendVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSendVoter) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgSendVoter) GetSenderChain() string {
	if m != nil {
		return m.SenderChain
	}
	return ""
}

func (m *MsgSendVoter) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgSendVoter) GetReceiverChain() string {
	if m != nil {
		return m.ReceiverChain
	}
	return ""
}

func (m *MsgSendVoter) GetMBurnt() string {
	if m != nil {
		return m.MBurnt
	}
	return ""
}

func (m *MsgSendVoter) GetMMint() string {
	if m != nil {
		return m.MMint
	}
	return ""
}

func (m *MsgSendVoter) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MsgSendVoter) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *MsgSendVoter) GetInBlockHeight() uint64 {
	if m != nil {
		return m.InBlockHeight
	}
	return 0
}

type MsgSendVoterResponse struct {
}

func (m *MsgSendVoterResponse) Reset()         { *m = MsgSendVoterResponse{} }
func (m *MsgSendVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSendVoterResponse) ProtoMessage()    {}
func (*MsgSendVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{7}
}
func (m *MsgSendVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSendVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSendVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSendVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSendVoterResponse.Merge(m, src)
}
func (m *MsgSendVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSendVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSendVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSendVoterResponse proto.InternalMessageInfo

type MsgSetNodeKeys struct {
	Creator                  string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PubkeySet                *common.PubKeySet `protobuf:"bytes,2,opt,name=pubkeySet,proto3" json:"pubkeySet,omitempty"`
	ValidatorConsensusPubkey string            `protobuf:"bytes,3,opt,name=validatorConsensusPubkey,proto3" json:"validatorConsensusPubkey,omitempty"`
}

func (m *MsgSetNodeKeys) Reset()         { *m = MsgSetNodeKeys{} }
func (m *MsgSetNodeKeys) String() string { return proto.CompactTextString(m) }
func (*MsgSetNodeKeys) ProtoMessage()    {}
func (*MsgSetNodeKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{8}
}
func (m *MsgSetNodeKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNodeKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNodeKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNodeKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNodeKeys.Merge(m, src)
}
func (m *MsgSetNodeKeys) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNodeKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNodeKeys.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNodeKeys proto.InternalMessageInfo

func (m *MsgSetNodeKeys) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetNodeKeys) GetPubkeySet() *common.PubKeySet {
	if m != nil {
		return m.PubkeySet
	}
	return nil
}

func (m *MsgSetNodeKeys) GetValidatorConsensusPubkey() string {
	if m != nil {
		return m.ValidatorConsensusPubkey
	}
	return ""
}

type MsgSetNodeKeysResponse struct {
}

func (m *MsgSetNodeKeysResponse) Reset()         { *m = MsgSetNodeKeysResponse{} }
func (m *MsgSetNodeKeysResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetNodeKeysResponse) ProtoMessage()    {}
func (*MsgSetNodeKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3410749d96999ade, []int{9}
}
func (m *MsgSetNodeKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNodeKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNodeKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNodeKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNodeKeysResponse.Merge(m, src)
}
func (m *MsgSetNodeKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNodeKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNodeKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNodeKeysResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgGasPriceVoter)(nil), "MetaProtocol.metacore.metacore.MsgGasPriceVoter")
	proto.RegisterType((*MsgGasPriceVoterResponse)(nil), "MetaProtocol.metacore.metacore.MsgGasPriceVoterResponse")
	proto.RegisterType((*MsgNonceVoter)(nil), "MetaProtocol.metacore.metacore.MsgNonceVoter")
	proto.RegisterType((*MsgNonceVoterResponse)(nil), "MetaProtocol.metacore.metacore.MsgNonceVoterResponse")
	proto.RegisterType((*MsgReceiveConfirmation)(nil), "MetaProtocol.metacore.metacore.MsgReceiveConfirmation")
	proto.RegisterType((*MsgReceiveConfirmationResponse)(nil), "MetaProtocol.metacore.metacore.MsgReceiveConfirmationResponse")
	proto.RegisterType((*MsgSendVoter)(nil), "MetaProtocol.metacore.metacore.MsgSendVoter")
	proto.RegisterType((*MsgSendVoterResponse)(nil), "MetaProtocol.metacore.metacore.MsgSendVoterResponse")
	proto.RegisterType((*MsgSetNodeKeys)(nil), "MetaProtocol.metacore.metacore.MsgSetNodeKeys")
	proto.RegisterType((*MsgSetNodeKeysResponse)(nil), "MetaProtocol.metacore.metacore.MsgSetNodeKeysResponse")
}

func init() { proto.RegisterFile("metacore/tx.proto", fileDescriptor_3410749d96999ade) }

var fileDescriptor_3410749d96999ade = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xae, 0xfb, 0x9f, 0x29, 0xad, 0xa8, 0x5b, 0x8a, 0x65, 0x21, 0x2b, 0xb2, 0x10, 0xea, 0x81,
	0x26, 0xa8, 0x40, 0x85, 0x38, 0x70, 0x68, 0x0f, 0x54, 0x2a, 0xae, 0xa2, 0x14, 0x38, 0x70, 0x73,
	0x9c, 0xc1, 0xb1, 0x1a, 0xef, 0x5a, 0xbb, 0xeb, 0xaa, 0x11, 0xcf, 0x80, 0x84, 0xb8, 0xf0, 0x0e,
	0x1c, 0x78, 0x0e, 0x8e, 0x3d, 0x72, 0x44, 0xed, 0x9d, 0x67, 0x40, 0xbb, 0x6b, 0x6f, 0x9c, 0xaa,
	0x84, 0x04, 0x4e, 0x99, 0x6f, 0x7e, 0xbf, 0xf9, 0xec, 0x89, 0x61, 0x3d, 0x45, 0x11, 0x46, 0x94,
	0x61, 0x53, 0x9c, 0x37, 0x32, 0x46, 0x05, 0xb5, 0xbd, 0x00, 0x45, 0xd8, 0x92, 0x66, 0x44, 0xfb,
	0x8d, 0x32, 0x6e, 0x0c, 0x77, 0x23, 0xa2, 0x69, 0x4a, 0x49, 0x53, 0xff, 0xe8, 0x22, 0xff, 0xb3,
	0x05, 0xb7, 0x03, 0x1e, 0xbf, 0x0c, 0x79, 0x8b, 0x25, 0x11, 0xbe, 0xa5, 0x02, 0x99, 0xed, 0xc0,
	0x52, 0xc4, 0x30, 0x14, 0x94, 0x39, 0x56, 0xdd, 0xda, 0xae, 0xb5, 0x4b, 0x68, 0x6f, 0xc2, 0x42,
	0xd4, 0x0b, 0x13, 0xe2, 0xcc, 0x2a, 0xbf, 0x06, 0xd2, 0x9b, 0xc9, 0x6a, 0x67, 0xae, 0x6e, 0x6d,
	0xcf, 0xb7, 0x35, 0xb0, 0xeb, 0xb0, 0xd2, 0xe9, 0xd3, 0xe8, 0xf4, 0x38, 0x4f, 0x3b, 0xc8, 0x9c,
	0x79, 0x15, 0xab, 0xba, 0xec, 0x2d, 0x58, 0xe4, 0x79, 0x96, 0xf5, 0x07, 0xce, 0x82, 0x6a, 0x57,
	0x20, 0xdf, 0x05, 0xe7, 0x3a, 0xa7, 0x36, 0xf2, 0x8c, 0x12, 0x8e, 0xfe, 0x1b, 0x58, 0x0d, 0x78,
	0x7c, 0x4c, 0xc9, 0x7f, 0x90, 0x25, 0xb2, 0xba, 0x24, 0xab, 0x80, 0x7f, 0x17, 0xee, 0x8c, 0xb4,
	0x35, 0xf3, 0xbe, 0x5a, 0xb0, 0x15, 0xf0, 0xb8, 0x8d, 0x11, 0x26, 0x67, 0x78, 0x40, 0xc9, 0xfb,
	0x84, 0xa5, 0xa1, 0x48, 0x28, 0x19, 0x33, 0xd9, 0x85, 0x65, 0x8e, 0xa4, 0x7b, 0x18, 0xf2, 0x5e,
	0x31, 0xdc, 0x60, 0xfb, 0x1e, 0xd4, 0x68, 0x2e, 0x5e, 0x9f, 0xab, 0xe0, 0x9c, 0x0a, 0x0e, 0x1d,
	0xf6, 0x03, 0x58, 0xa3, 0xb9, 0xd8, 0x97, 0x22, 0x1d, 0x62, 0x12, 0xf7, 0x44, 0xa1, 0xdb, 0x35,
	0xaf, 0xdc, 0x22, 0x0d, 0x12, 0x22, 0x0a, 0xe5, 0x34, 0xf0, 0xeb, 0xe0, 0xdd, 0xcc, 0xd5, 0xac,
	0xf3, 0x6d, 0x16, 0x6e, 0x05, 0x3c, 0x3e, 0x41, 0xd2, 0xfd, 0x9b, 0x7c, 0xf2, 0xe9, 0x20, 0xe9,
	0x22, 0x2b, 0x56, 0x28, 0x90, 0x7c, 0xae, 0xda, 0x3a, 0x50, 0xe2, 0xea, 0x15, 0xaa, 0x2e, 0xb9,
	0x3e, 0xd3, 0x1c, 0xf4, 0x63, 0xaf, 0xb5, 0x0d, 0xb6, 0xef, 0xc3, 0x6a, 0x69, 0xeb, 0x7a, 0xbd,
	0xc0, 0xa8, 0x53, 0xce, 0x4e, 0xf7, 0x73, 0x46, 0x84, 0xb3, 0xa8, 0x67, 0x6b, 0x34, 0x5c, 0x7b,
	0xa9, 0xb2, 0xb6, 0xdc, 0x21, 0x45, 0xce, 0xc3, 0x18, 0x9d, 0x65, 0xbd, 0x43, 0x01, 0x25, 0x93,
	0x84, 0x14, 0x5a, 0xd7, 0x34, 0x93, 0x12, 0x4b, 0x26, 0x09, 0xa9, 0x2a, 0x0d, 0x4a, 0xe9, 0x51,
	0xa7, 0xbf, 0x05, 0x9b, 0x55, 0xbd, 0x8c, 0x90, 0x5f, 0x2c, 0x58, 0x53, 0x01, 0x71, 0x4c, 0xbb,
	0x78, 0x84, 0x03, 0x3e, 0x46, 0xca, 0x26, 0xd4, 0xb2, 0xbc, 0x73, 0x8a, 0x83, 0x13, 0x14, 0x4a,
	0xcd, 0x95, 0xdd, 0xf5, 0x46, 0x71, 0x87, 0xad, 0xbc, 0x73, 0xa4, 0x02, 0xed, 0x61, 0x8e, 0xfd,
	0x1c, 0x9c, 0xb3, 0xb0, 0x9f, 0x74, 0x65, 0xf5, 0x81, 0x9c, 0x47, 0x78, 0xce, 0x5b, 0x2a, 0x5c,
	0x08, 0xfe, 0xc7, 0xb8, 0xef, 0xa8, 0x17, 0xb6, 0x42, 0xac, 0xe4, 0xbc, 0xfb, 0x6b, 0x1e, 0xe6,
	0x02, 0x1e, 0xdb, 0x1f, 0x60, 0x75, 0xf4, 0xe0, 0x1f, 0x35, 0xc6, 0xff, 0x77, 0x34, 0xae, 0x9f,
	0xa3, 0xfb, 0x6c, 0xda, 0x8a, 0x92, 0x84, 0xcd, 0x00, 0x2a, 0xd7, 0xbb, 0x33, 0x41, 0x9f, 0x61,
	0xba, 0xfb, 0x74, 0xaa, 0x74, 0x33, 0xf3, 0xa3, 0x05, 0x1b, 0x37, 0x5d, 0xf0, 0xde, 0x04, 0xed,
	0x6e, 0xa8, 0x73, 0x5f, 0xfc, 0x5b, 0x9d, 0xe1, 0x43, 0xa1, 0x36, 0xbc, 0xc0, 0x87, 0x13, 0x34,
	0x33, 0xd9, 0xee, 0x93, 0x69, 0xb2, 0xcd, 0xc0, 0x1c, 0x56, 0xaa, 0x6f, 0x6a, 0x63, 0xa2, 0x26,
	0x26, 0xdf, 0xdd, 0x9b, 0x2e, 0xbf, 0x1c, 0xbb, 0xff, 0xea, 0xfb, 0xa5, 0x67, 0x5d, 0x5c, 0x7a,
	0xd6, 0xcf, 0x4b, 0xcf, 0xfa, 0x74, 0xe5, 0xcd, 0x5c, 0x5c, 0x79, 0x33, 0x3f, 0xae, 0xbc, 0x99,
	0x77, 0xbb, 0x71, 0x22, 0x7a, 0x79, 0x47, 0x1e, 0x41, 0x53, 0xf6, 0xde, 0x29, 0x9b, 0x37, 0xcd,
	0x87, 0xed, 0x7c, 0x68, 0x8a, 0x41, 0x86, 0xbc, 0xb3, 0xa8, 0x3e, 0x59, 0x8f, 0x7f, 0x07, 0x00,
	0x00, 0xff, 0xff, 0x1f, 0x58, 0xc7, 0x9e, 0xfc, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	GasPriceVoter(ctx context.Context, in *MsgGasPriceVoter, opts ...grpc.CallOption) (*MsgGasPriceVoterResponse, error)
	NonceVoter(ctx context.Context, in *MsgNonceVoter, opts ...grpc.CallOption) (*MsgNonceVoterResponse, error)
	ReceiveConfirmation(ctx context.Context, in *MsgReceiveConfirmation, opts ...grpc.CallOption) (*MsgReceiveConfirmationResponse, error)
	SendVoter(ctx context.Context, in *MsgSendVoter, opts ...grpc.CallOption) (*MsgSendVoterResponse, error)
	SetNodeKeys(ctx context.Context, in *MsgSetNodeKeys, opts ...grpc.CallOption) (*MsgSetNodeKeysResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) GasPriceVoter(ctx context.Context, in *MsgGasPriceVoter, opts ...grpc.CallOption) (*MsgGasPriceVoterResponse, error) {
	out := new(MsgGasPriceVoterResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Msg/GasPriceVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NonceVoter(ctx context.Context, in *MsgNonceVoter, opts ...grpc.CallOption) (*MsgNonceVoterResponse, error) {
	out := new(MsgNonceVoterResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Msg/NonceVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ReceiveConfirmation(ctx context.Context, in *MsgReceiveConfirmation, opts ...grpc.CallOption) (*MsgReceiveConfirmationResponse, error) {
	out := new(MsgReceiveConfirmationResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Msg/ReceiveConfirmation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SendVoter(ctx context.Context, in *MsgSendVoter, opts ...grpc.CallOption) (*MsgSendVoterResponse, error) {
	out := new(MsgSendVoterResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Msg/SendVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetNodeKeys(ctx context.Context, in *MsgSetNodeKeys, opts ...grpc.CallOption) (*MsgSetNodeKeysResponse, error) {
	out := new(MsgSetNodeKeysResponse)
	err := c.cc.Invoke(ctx, "/MetaProtocol.metacore.metacore.Msg/SetNodeKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// this line is used by starport scaffolding # proto/tx/rpc
	GasPriceVoter(context.Context, *MsgGasPriceVoter) (*MsgGasPriceVoterResponse, error)
	NonceVoter(context.Context, *MsgNonceVoter) (*MsgNonceVoterResponse, error)
	ReceiveConfirmation(context.Context, *MsgReceiveConfirmation) (*MsgReceiveConfirmationResponse, error)
	SendVoter(context.Context, *MsgSendVoter) (*MsgSendVoterResponse, error)
	SetNodeKeys(context.Context, *MsgSetNodeKeys) (*MsgSetNodeKeysResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) GasPriceVoter(ctx context.Context, req *MsgGasPriceVoter) (*MsgGasPriceVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPriceVoter not implemented")
}
func (*UnimplementedMsgServer) NonceVoter(ctx context.Context, req *MsgNonceVoter) (*MsgNonceVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonceVoter not implemented")
}
func (*UnimplementedMsgServer) ReceiveConfirmation(ctx context.Context, req *MsgReceiveConfirmation) (*MsgReceiveConfirmationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveConfirmation not implemented")
}
func (*UnimplementedMsgServer) SendVoter(ctx context.Context, req *MsgSendVoter) (*MsgSendVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVoter not implemented")
}
func (*UnimplementedMsgServer) SetNodeKeys(ctx context.Context, req *MsgSetNodeKeys) (*MsgSetNodeKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeKeys not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_GasPriceVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGasPriceVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GasPriceVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Msg/GasPriceVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GasPriceVoter(ctx, req.(*MsgGasPriceVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NonceVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNonceVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NonceVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Msg/NonceVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NonceVoter(ctx, req.(*MsgNonceVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ReceiveConfirmation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReceiveConfirmation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ReceiveConfirmation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Msg/ReceiveConfirmation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ReceiveConfirmation(ctx, req.(*MsgReceiveConfirmation))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SendVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSendVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SendVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Msg/SendVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SendVoter(ctx, req.(*MsgSendVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetNodeKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetNodeKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetNodeKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/MetaProtocol.metacore.metacore.Msg/SetNodeKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetNodeKeys(ctx, req.(*MsgSetNodeKeys))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "MetaProtocol.metacore.metacore.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GasPriceVoter",
			Handler:    _Msg_GasPriceVoter_Handler,
		},
		{
			MethodName: "NonceVoter",
			Handler:    _Msg_NonceVoter_Handler,
		},
		{
			MethodName: "ReceiveConfirmation",
			Handler:    _Msg_ReceiveConfirmation_Handler,
		},
		{
			MethodName: "SendVoter",
			Handler:    _Msg_SendVoter_Handler,
		},
		{
			MethodName: "SetNodeKeys",
			Handler:    _Msg_SetNodeKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "metacore/tx.proto",
}

func (m *MsgGasPriceVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasPriceVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasPriceVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Supply) > 0 {
		i -= len(m.Supply)
		copy(dAtA[i:], m.Supply)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Supply)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGasPriceVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasPriceVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasPriceVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNonceVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNonceVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNonceVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNonceVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNonceVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNonceVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgReceiveConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiveConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiveConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MMint) > 0 {
		i -= len(m.MMint)
		copy(dAtA[i:], m.MMint)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MMint)))
		i--
		dAtA[i] = 0x2a
	}
	if m.OutBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OutTxHash) > 0 {
		i -= len(m.OutTxHash)
		copy(dAtA[i:], m.OutTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OutTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SendHash) > 0 {
		i -= len(m.SendHash)
		copy(dAtA[i:], m.SendHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SendHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgReceiveConfirmationResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgReceiveConfirmationResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgReceiveConfirmationResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSendVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.InBlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.MMint) > 0 {
		i -= len(m.MMint)
		copy(dAtA[i:], m.MMint)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MMint)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.MBurnt) > 0 {
		i -= len(m.MBurnt)
		copy(dAtA[i:], m.MBurnt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MBurnt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReceiverChain) > 0 {
		i -= len(m.ReceiverChain)
		copy(dAtA[i:], m.ReceiverChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReceiverChain)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SenderChain) > 0 {
		i -= len(m.SenderChain)
		copy(dAtA[i:], m.SenderChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSendVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSendVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSendVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetNodeKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNodeKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNodeKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorConsensusPubkey) > 0 {
		i -= len(m.ValidatorConsensusPubkey)
		copy(dAtA[i:], m.ValidatorConsensusPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorConsensusPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PubkeySet != nil {
		{
			size, err := m.PubkeySet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetNodeKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNodeKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNodeKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgGasPriceVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovTx(uint64(m.Price))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	l = len(m.Supply)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGasPriceVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNonceVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgNonceVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgReceiveConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SendHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OutTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OutBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.OutBlockHeight))
	}
	l = len(m.MMint)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgReceiveConfirmationResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSendVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SenderChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReceiverChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MBurnt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MMint)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.InBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.InBlockHeight))
	}
	return n
}

func (m *MsgSendVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetNodeKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PubkeySet != nil {
		l = m.PubkeySet.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorConsensusPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetNodeKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgGasPriceVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasPriceVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasPriceVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasPriceVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasPriceVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasPriceVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNonceVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNonceVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNonceVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNonceVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNonceVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNonceVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiveConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiveConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiveConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBlockHeight", wireType)
			}
			m.OutBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MMint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MMint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgReceiveConfirmationResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgReceiveConfirmationResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgReceiveConfirmationResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MBurnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MBurnt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MMint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MMint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlockHeight", wireType)
			}
			m.InBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSendVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSendVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSendVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetNodeKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNodeKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNodeKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeySet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeySet == nil {
				m.PubkeySet = &common.PubKeySet{}
			}
			if err := m.PubkeySet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorConsensusPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorConsensusPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetNodeKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNodeKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNodeKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
