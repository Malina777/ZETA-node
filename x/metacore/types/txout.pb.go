// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metacore/txout.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Txout struct {
	Creator          string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id               uint64   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	TxinHash         string   `protobuf:"bytes,3,opt,name=txinHash,proto3" json:"txinHash,omitempty"`
	SourceAsset      string   `protobuf:"bytes,4,opt,name=sourceAsset,proto3" json:"sourceAsset,omitempty"`
	SourceAmount     uint64   `protobuf:"varint,5,opt,name=sourceAmount,proto3" json:"sourceAmount,omitempty"`
	MBurnt           uint64   `protobuf:"varint,6,opt,name=mBurnt,proto3" json:"mBurnt,omitempty"`
	MMint            uint64   `protobuf:"varint,7,opt,name=mMint,proto3" json:"mMint,omitempty"`
	DestinationAsset string   `protobuf:"bytes,8,opt,name=destinationAsset,proto3" json:"destinationAsset,omitempty"`
	FromAddress      string   `protobuf:"bytes,9,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress        string   `protobuf:"bytes,10,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	BlockHeight      uint64   `protobuf:"varint,11,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Signers          []string `protobuf:"bytes,12,rep,name=signers,proto3" json:"signers,omitempty"`
	FinalizedHeight  uint64   `protobuf:"varint,13,opt,name=finalizedHeight,proto3" json:"finalizedHeight,omitempty"`
}

func (m *Txout) Reset()         { *m = Txout{} }
func (m *Txout) String() string { return proto.CompactTextString(m) }
func (*Txout) ProtoMessage()    {}
func (*Txout) Descriptor() ([]byte, []int) {
	return fileDescriptor_f61438ebc14ac1ae, []int{0}
}
func (m *Txout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Txout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Txout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Txout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Txout.Merge(m, src)
}
func (m *Txout) XXX_Size() int {
	return m.Size()
}
func (m *Txout) XXX_DiscardUnknown() {
	xxx_messageInfo_Txout.DiscardUnknown(m)
}

var xxx_messageInfo_Txout proto.InternalMessageInfo

func (m *Txout) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Txout) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Txout) GetTxinHash() string {
	if m != nil {
		return m.TxinHash
	}
	return ""
}

func (m *Txout) GetSourceAsset() string {
	if m != nil {
		return m.SourceAsset
	}
	return ""
}

func (m *Txout) GetSourceAmount() uint64 {
	if m != nil {
		return m.SourceAmount
	}
	return 0
}

func (m *Txout) GetMBurnt() uint64 {
	if m != nil {
		return m.MBurnt
	}
	return 0
}

func (m *Txout) GetMMint() uint64 {
	if m != nil {
		return m.MMint
	}
	return 0
}

func (m *Txout) GetDestinationAsset() string {
	if m != nil {
		return m.DestinationAsset
	}
	return ""
}

func (m *Txout) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *Txout) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *Txout) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *Txout) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *Txout) GetFinalizedHeight() uint64 {
	if m != nil {
		return m.FinalizedHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Txout)(nil), "MetaProtocol.metacore.metacore.Txout")
}

func init() { proto.RegisterFile("metacore/txout.proto", fileDescriptor_f61438ebc14ac1ae) }

var fileDescriptor_f61438ebc14ac1ae = []byte{
	// 368 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0xcf, 0x8a, 0xe2, 0x40,
	0x10, 0xc6, 0x13, 0xff, 0xa7, 0x75, 0xff, 0xd0, 0xc8, 0xd2, 0xc8, 0xd2, 0x1b, 0x3c, 0x85, 0x85,
	0x35, 0xb0, 0xfb, 0x04, 0x7a, 0xf2, 0xb0, 0xc2, 0x22, 0x7b, 0x9a, 0x5b, 0x4c, 0xda, 0xd8, 0x8c,
	0xe9, 0x92, 0xee, 0x0a, 0x38, 0xf3, 0x14, 0x73, 0x9d, 0x37, 0xf2, 0xe8, 0x71, 0x4e, 0xc3, 0xa0,
	0x2f, 0x32, 0xa4, 0x63, 0xd4, 0x99, 0xb9, 0xd5, 0xf7, 0xfb, 0xaa, 0xbf, 0x2a, 0xa8, 0x26, 0xfd,
	0x4c, 0x60, 0x14, 0x83, 0x16, 0x21, 0x6e, 0x21, 0xc7, 0xd1, 0x46, 0x03, 0x02, 0xe5, 0x33, 0x81,
	0xd1, 0xbf, 0xa2, 0x8c, 0x61, 0x3d, 0xaa, 0x5a, 0xce, 0xc5, 0xa0, 0x9f, 0x42, 0x0a, 0xb6, 0x35,
	0x2c, 0xaa, 0xf2, 0xd5, 0xf0, 0xb1, 0x4e, 0x9a, 0xff, 0x8b, 0x14, 0xca, 0x48, 0x3b, 0xd6, 0x22,
	0x42, 0xd0, 0xcc, 0xf5, 0xdd, 0xc0, 0x9b, 0x57, 0x92, 0x7e, 0x26, 0x35, 0x99, 0xb0, 0x9a, 0xef,
	0x06, 0x8d, 0x79, 0x4d, 0x26, 0x74, 0x40, 0x3a, 0xb8, 0x95, 0x6a, 0x1a, 0x99, 0x15, 0xab, 0xdb,
	0xd6, 0xb3, 0xa6, 0x3e, 0xe9, 0x1a, 0xc8, 0x75, 0x2c, 0xc6, 0xc6, 0x08, 0x64, 0x0d, 0x6b, 0x5f,
	0x23, 0x3a, 0x24, 0xbd, 0x93, 0xcc, 0x20, 0x57, 0xc8, 0x9a, 0x36, 0xf7, 0x0d, 0xa3, 0xdf, 0x48,
	0x2b, 0x9b, 0xe4, 0x5a, 0x21, 0x6b, 0x59, 0xf7, 0xa4, 0x68, 0x9f, 0x34, 0xb3, 0x99, 0x54, 0xc8,
	0xda, 0x16, 0x97, 0x82, 0xfe, 0x24, 0x5f, 0x13, 0x61, 0x50, 0xaa, 0x08, 0x25, 0xa8, 0x72, 0x70,
	0xc7, 0x0e, 0xfe, 0xc0, 0x8b, 0xfd, 0x96, 0x1a, 0xb2, 0x71, 0x92, 0x68, 0x61, 0x0c, 0xf3, 0xca,
	0xfd, 0xae, 0x10, 0xfd, 0x4e, 0x3c, 0x84, 0xca, 0x27, 0xd6, 0xbf, 0x80, 0xe2, 0xfd, 0x62, 0x0d,
	0xf1, 0xed, 0x54, 0xc8, 0x74, 0x85, 0xac, 0x6b, 0xf7, 0xb8, 0x46, 0x94, 0x93, 0xb6, 0x91, 0xa9,
	0x12, 0xda, 0xb0, 0x9e, 0x5f, 0x0f, 0xbc, 0x49, 0x63, 0xf7, 0xfc, 0xc3, 0x99, 0x57, 0x90, 0x06,
	0xe4, 0xcb, 0x52, 0xaa, 0x68, 0x2d, 0xef, 0x45, 0x72, 0x4a, 0xf9, 0x64, 0x53, 0xde, 0xe3, 0xc9,
	0xdf, 0xdd, 0x81, 0xbb, 0xfb, 0x03, 0x77, 0x5f, 0x0e, 0xdc, 0x7d, 0x38, 0x72, 0x67, 0x7f, 0xe4,
	0xce, 0xd3, 0x91, 0x3b, 0x37, 0xbf, 0x53, 0x89, 0xab, 0x7c, 0x31, 0x8a, 0x21, 0x0b, 0x8b, 0xb3,
	0xff, 0xaa, 0xee, 0x1e, 0x9e, 0xbf, 0xc6, 0xf6, 0x52, 0xe2, 0xdd, 0x46, 0x98, 0x45, 0xcb, 0x1e,
	0xfc, 0xcf, 0x6b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x93, 0x4b, 0x69, 0x3e, 0x02, 0x00, 0x00,
}

func (m *Txout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Txout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Txout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalizedHeight != 0 {
		i = encodeVarintTxout(dAtA, i, uint64(m.FinalizedHeight))
		i--
		dAtA[i] = 0x68
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTxout(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTxout(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTxout(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTxout(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.DestinationAsset) > 0 {
		i -= len(m.DestinationAsset)
		copy(dAtA[i:], m.DestinationAsset)
		i = encodeVarintTxout(dAtA, i, uint64(len(m.DestinationAsset)))
		i--
		dAtA[i] = 0x42
	}
	if m.MMint != 0 {
		i = encodeVarintTxout(dAtA, i, uint64(m.MMint))
		i--
		dAtA[i] = 0x38
	}
	if m.MBurnt != 0 {
		i = encodeVarintTxout(dAtA, i, uint64(m.MBurnt))
		i--
		dAtA[i] = 0x30
	}
	if m.SourceAmount != 0 {
		i = encodeVarintTxout(dAtA, i, uint64(m.SourceAmount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SourceAsset) > 0 {
		i -= len(m.SourceAsset)
		copy(dAtA[i:], m.SourceAsset)
		i = encodeVarintTxout(dAtA, i, uint64(len(m.SourceAsset)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxinHash) > 0 {
		i -= len(m.TxinHash)
		copy(dAtA[i:], m.TxinHash)
		i = encodeVarintTxout(dAtA, i, uint64(len(m.TxinHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintTxout(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTxout(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxout(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxout(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Txout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTxout(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovTxout(uint64(m.Id))
	}
	l = len(m.TxinHash)
	if l > 0 {
		n += 1 + l + sovTxout(uint64(l))
	}
	l = len(m.SourceAsset)
	if l > 0 {
		n += 1 + l + sovTxout(uint64(l))
	}
	if m.SourceAmount != 0 {
		n += 1 + sovTxout(uint64(m.SourceAmount))
	}
	if m.MBurnt != 0 {
		n += 1 + sovTxout(uint64(m.MBurnt))
	}
	if m.MMint != 0 {
		n += 1 + sovTxout(uint64(m.MMint))
	}
	l = len(m.DestinationAsset)
	if l > 0 {
		n += 1 + l + sovTxout(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTxout(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTxout(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTxout(uint64(m.BlockHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTxout(uint64(l))
		}
	}
	if m.FinalizedHeight != 0 {
		n += 1 + sovTxout(uint64(m.FinalizedHeight))
	}
	return n
}

func sovTxout(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxout(x uint64) (n int) {
	return sovTxout(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Txout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxout
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Txout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Txout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxinHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxinHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAmount", wireType)
			}
			m.SourceAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MBurnt", wireType)
			}
			m.MBurnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MBurnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MMint", wireType)
			}
			m.MMint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MMint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxout
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxout
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedHeight", wireType)
			}
			m.FinalizedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxout(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxout
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxout(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxout
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxout
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxout
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxout
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxout
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxout        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxout          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxout = fmt.Errorf("proto: unexpected end of group")
)
