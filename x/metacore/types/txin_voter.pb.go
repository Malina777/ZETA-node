// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metacore/txin_voter.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxinVoter struct {
	Creator          string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index            string `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	TxHash           string `protobuf:"bytes,3,opt,name=txHash,proto3" json:"txHash,omitempty"`
	SourceAsset      string `protobuf:"bytes,4,opt,name=sourceAsset,proto3" json:"sourceAsset,omitempty"`
	SourceAmount     uint64 `protobuf:"varint,5,opt,name=sourceAmount,proto3" json:"sourceAmount,omitempty"`
	MBurnt           uint64 `protobuf:"varint,6,opt,name=mBurnt,proto3" json:"mBurnt,omitempty"`
	DestinationAsset string `protobuf:"bytes,7,opt,name=destinationAsset,proto3" json:"destinationAsset,omitempty"`
	FromAddress      string `protobuf:"bytes,8,opt,name=fromAddress,proto3" json:"fromAddress,omitempty"`
	ToAddress        string `protobuf:"bytes,9,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	BlockHeight      uint64 `protobuf:"varint,10,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (m *TxinVoter) Reset()         { *m = TxinVoter{} }
func (m *TxinVoter) String() string { return proto.CompactTextString(m) }
func (*TxinVoter) ProtoMessage()    {}
func (*TxinVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_2096ad856d20275a, []int{0}
}
func (m *TxinVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxinVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxinVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxinVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxinVoter.Merge(m, src)
}
func (m *TxinVoter) XXX_Size() int {
	return m.Size()
}
func (m *TxinVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_TxinVoter.DiscardUnknown(m)
}

var xxx_messageInfo_TxinVoter proto.InternalMessageInfo

func (m *TxinVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TxinVoter) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *TxinVoter) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TxinVoter) GetSourceAsset() string {
	if m != nil {
		return m.SourceAsset
	}
	return ""
}

func (m *TxinVoter) GetSourceAmount() uint64 {
	if m != nil {
		return m.SourceAmount
	}
	return 0
}

func (m *TxinVoter) GetMBurnt() uint64 {
	if m != nil {
		return m.MBurnt
	}
	return 0
}

func (m *TxinVoter) GetDestinationAsset() string {
	if m != nil {
		return m.DestinationAsset
	}
	return ""
}

func (m *TxinVoter) GetFromAddress() string {
	if m != nil {
		return m.FromAddress
	}
	return ""
}

func (m *TxinVoter) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *TxinVoter) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*TxinVoter)(nil), "MetaProtocol.metacore.metacore.TxinVoter")
}

func init() { proto.RegisterFile("metacore/txin_voter.proto", fileDescriptor_2096ad856d20275a) }

var fileDescriptor_2096ad856d20275a = []byte{
	// 320 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcd, 0x4a, 0x03, 0x31,
	0x14, 0x85, 0x3b, 0xb5, 0x3f, 0x4e, 0x74, 0x21, 0xa1, 0x48, 0x14, 0x09, 0xa5, 0xab, 0x22, 0xd8,
	0x01, 0x7d, 0x82, 0x76, 0xd5, 0x85, 0x82, 0x14, 0x71, 0xe1, 0x46, 0xa6, 0x99, 0x38, 0x0d, 0x76,
	0x72, 0x4b, 0x72, 0x47, 0xc6, 0xb7, 0xf0, 0x8d, 0xdc, 0xba, 0xec, 0xd2, 0xa5, 0xb4, 0x2f, 0x22,
	0xc9, 0x74, 0xda, 0x8a, 0xbb, 0x73, 0xbe, 0x93, 0xdc, 0x7b, 0xe1, 0x90, 0xb3, 0x4c, 0x62, 0x2c,
	0xc0, 0xc8, 0x08, 0x0b, 0xa5, 0x9f, 0xdf, 0x00, 0xa5, 0x19, 0x2c, 0x0c, 0x20, 0x50, 0x7e, 0x27,
	0x31, 0xbe, 0x77, 0x52, 0xc0, 0x7c, 0x50, 0xbd, 0xdb, 0x8a, 0xf3, 0x4e, 0x0a, 0x29, 0xf8, 0xa7,
	0x91, 0x53, 0xe5, 0xaf, 0xde, 0x67, 0x9d, 0x84, 0x0f, 0x85, 0xd2, 0x8f, 0x6e, 0x12, 0x65, 0xa4,
	0x2d, 0x8c, 0x8c, 0x11, 0x0c, 0x0b, 0xba, 0x41, 0x3f, 0x9c, 0x54, 0x96, 0x76, 0x48, 0x53, 0xe9,
	0x44, 0x16, 0xac, 0xee, 0x79, 0x69, 0xe8, 0x29, 0x69, 0x61, 0x31, 0x8e, 0xed, 0x8c, 0x1d, 0x78,
	0xbc, 0x71, 0xb4, 0x4b, 0x8e, 0x2c, 0xe4, 0x46, 0xc8, 0xa1, 0xb5, 0x12, 0x59, 0xc3, 0x87, 0xfb,
	0x88, 0xf6, 0xc8, 0xf1, 0xc6, 0x66, 0x90, 0x6b, 0x64, 0xcd, 0x6e, 0xd0, 0x6f, 0x4c, 0xfe, 0x30,
	0x37, 0x3d, 0x1b, 0xe5, 0x46, 0x23, 0x6b, 0xf9, 0x74, 0xe3, 0xe8, 0x25, 0x39, 0x49, 0xa4, 0x45,
	0xa5, 0x63, 0x54, 0xa0, 0xcb, 0x15, 0x6d, 0xbf, 0xe2, 0x1f, 0x77, 0x97, 0xbc, 0x18, 0xc8, 0x86,
	0x49, 0x62, 0xa4, 0xb5, 0xec, 0xb0, 0xbc, 0x64, 0x0f, 0xd1, 0x0b, 0x12, 0x22, 0x54, 0x79, 0xe8,
	0xf3, 0x1d, 0x70, 0xff, 0xa7, 0x73, 0x10, 0xaf, 0x63, 0xa9, 0xd2, 0x19, 0x32, 0xe2, 0x0f, 0xd9,
	0x47, 0xa3, 0xdb, 0xaf, 0x15, 0x0f, 0x96, 0x2b, 0x1e, 0xfc, 0xac, 0x78, 0xf0, 0xb1, 0xe6, 0xb5,
	0xe5, 0x9a, 0xd7, 0xbe, 0xd7, 0xbc, 0xf6, 0x74, 0x9d, 0x2a, 0x9c, 0xe5, 0xd3, 0x81, 0x80, 0x2c,
	0x72, 0xe5, 0x5c, 0x55, 0xed, 0x44, 0xdb, 0x16, 0x8b, 0x9d, 0xc4, 0xf7, 0x85, 0xb4, 0xd3, 0x96,
	0xaf, 0xe5, 0xe6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x1a, 0x2a, 0x5d, 0x51, 0xe9, 0x01, 0x00, 0x00,
}

func (m *TxinVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxinVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxinVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintTxinVoter(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTxinVoter(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.FromAddress) > 0 {
		i -= len(m.FromAddress)
		copy(dAtA[i:], m.FromAddress)
		i = encodeVarintTxinVoter(dAtA, i, uint64(len(m.FromAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.DestinationAsset) > 0 {
		i -= len(m.DestinationAsset)
		copy(dAtA[i:], m.DestinationAsset)
		i = encodeVarintTxinVoter(dAtA, i, uint64(len(m.DestinationAsset)))
		i--
		dAtA[i] = 0x3a
	}
	if m.MBurnt != 0 {
		i = encodeVarintTxinVoter(dAtA, i, uint64(m.MBurnt))
		i--
		dAtA[i] = 0x30
	}
	if m.SourceAmount != 0 {
		i = encodeVarintTxinVoter(dAtA, i, uint64(m.SourceAmount))
		i--
		dAtA[i] = 0x28
	}
	if len(m.SourceAsset) > 0 {
		i -= len(m.SourceAsset)
		copy(dAtA[i:], m.SourceAsset)
		i = encodeVarintTxinVoter(dAtA, i, uint64(len(m.SourceAsset)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTxinVoter(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTxinVoter(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTxinVoter(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxinVoter(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxinVoter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxinVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTxinVoter(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTxinVoter(uint64(l))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTxinVoter(uint64(l))
	}
	l = len(m.SourceAsset)
	if l > 0 {
		n += 1 + l + sovTxinVoter(uint64(l))
	}
	if m.SourceAmount != 0 {
		n += 1 + sovTxinVoter(uint64(m.SourceAmount))
	}
	if m.MBurnt != 0 {
		n += 1 + sovTxinVoter(uint64(m.MBurnt))
	}
	l = len(m.DestinationAsset)
	if l > 0 {
		n += 1 + l + sovTxinVoter(uint64(l))
	}
	l = len(m.FromAddress)
	if l > 0 {
		n += 1 + l + sovTxinVoter(uint64(l))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTxinVoter(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTxinVoter(uint64(m.BlockHeight))
	}
	return n
}

func sovTxinVoter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxinVoter(x uint64) (n int) {
	return sovTxinVoter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxinVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxinVoter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxinVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxinVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxinVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxinVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxinVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxinVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxinVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxinVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxinVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxinVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceAmount", wireType)
			}
			m.SourceAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SourceAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MBurnt", wireType)
			}
			m.MBurnt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MBurnt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxinVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxinVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxinVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxinVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FromAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxinVoter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxinVoter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxinVoter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxinVoter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxinVoter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxinVoter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxinVoter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxinVoter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxinVoter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxinVoter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxinVoter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxinVoter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxinVoter = fmt.Errorf("proto: unexpected end of group")
)
