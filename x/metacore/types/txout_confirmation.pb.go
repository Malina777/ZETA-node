// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metacore/txout_confirmation.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TxoutConfirmation struct {
	Creator           string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index             string   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	TxoutId           uint64   `protobuf:"varint,3,opt,name=txoutId,proto3" json:"txoutId,omitempty"`
	TxHash            string   `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
	MMint             uint64   `protobuf:"varint,5,opt,name=mMint,proto3" json:"mMint,omitempty"`
	DestinationAsset  string   `protobuf:"bytes,6,opt,name=destinationAsset,proto3" json:"destinationAsset,omitempty"`
	DestinationAmount uint64   `protobuf:"varint,7,opt,name=destinationAmount,proto3" json:"destinationAmount,omitempty"`
	ToAddress         string   `protobuf:"bytes,8,opt,name=toAddress,proto3" json:"toAddress,omitempty"`
	BlockHeight       uint64   `protobuf:"varint,9,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
	Signers           []string `protobuf:"bytes,10,rep,name=signers,proto3" json:"signers,omitempty"`
	FinalizedHeight   uint64   `protobuf:"varint,11,opt,name=finalizedHeight,proto3" json:"finalizedHeight,omitempty"`
}

func (m *TxoutConfirmation) Reset()         { *m = TxoutConfirmation{} }
func (m *TxoutConfirmation) String() string { return proto.CompactTextString(m) }
func (*TxoutConfirmation) ProtoMessage()    {}
func (*TxoutConfirmation) Descriptor() ([]byte, []int) {
	return fileDescriptor_215cae0c23269573, []int{0}
}
func (m *TxoutConfirmation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxoutConfirmation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxoutConfirmation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxoutConfirmation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxoutConfirmation.Merge(m, src)
}
func (m *TxoutConfirmation) XXX_Size() int {
	return m.Size()
}
func (m *TxoutConfirmation) XXX_DiscardUnknown() {
	xxx_messageInfo_TxoutConfirmation.DiscardUnknown(m)
}

var xxx_messageInfo_TxoutConfirmation proto.InternalMessageInfo

func (m *TxoutConfirmation) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TxoutConfirmation) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *TxoutConfirmation) GetTxoutId() uint64 {
	if m != nil {
		return m.TxoutId
	}
	return 0
}

func (m *TxoutConfirmation) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *TxoutConfirmation) GetMMint() uint64 {
	if m != nil {
		return m.MMint
	}
	return 0
}

func (m *TxoutConfirmation) GetDestinationAsset() string {
	if m != nil {
		return m.DestinationAsset
	}
	return ""
}

func (m *TxoutConfirmation) GetDestinationAmount() uint64 {
	if m != nil {
		return m.DestinationAmount
	}
	return 0
}

func (m *TxoutConfirmation) GetToAddress() string {
	if m != nil {
		return m.ToAddress
	}
	return ""
}

func (m *TxoutConfirmation) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *TxoutConfirmation) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *TxoutConfirmation) GetFinalizedHeight() uint64 {
	if m != nil {
		return m.FinalizedHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*TxoutConfirmation)(nil), "MetaProtocol.metacore.metacore.TxoutConfirmation")
}

func init() { proto.RegisterFile("metacore/txout_confirmation.proto", fileDescriptor_215cae0c23269573) }

var fileDescriptor_215cae0c23269573 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0xcf, 0x4a, 0xf3, 0x40,
	0x14, 0xc5, 0x93, 0xfe, 0xfd, 0x32, 0x5d, 0x7c, 0x76, 0x28, 0x32, 0x88, 0x8c, 0xd1, 0x55, 0x10,
	0x6d, 0x40, 0x9f, 0xa0, 0x75, 0x53, 0xc1, 0x82, 0x14, 0x57, 0x6e, 0x24, 0x4d, 0xa6, 0xe9, 0x60,
	0x33, 0xb7, 0x64, 0x6e, 0x21, 0xfa, 0x14, 0x3e, 0x56, 0x97, 0x5d, 0xba, 0x12, 0x69, 0x1f, 0xc0,
	0x57, 0x90, 0x4c, 0x9b, 0xb6, 0xd8, 0xdd, 0x39, 0x67, 0xce, 0xfd, 0x31, 0x70, 0xc8, 0x79, 0x22,
	0x30, 0x08, 0x21, 0x15, 0x3e, 0x66, 0x30, 0xc3, 0x97, 0x10, 0xd4, 0x48, 0xa6, 0x49, 0x80, 0x12,
	0x54, 0x7b, 0x9a, 0x02, 0x02, 0xe5, 0x7d, 0x81, 0xc1, 0x63, 0x2e, 0x43, 0x98, 0xb4, 0x8b, 0xfe,
	0x56, 0x9c, 0xb4, 0x62, 0x88, 0xc1, 0x54, 0xfd, 0x5c, 0xad, 0xaf, 0x2e, 0x7e, 0x4a, 0xa4, 0xf9,
	0x94, 0x23, 0xef, 0xf6, 0x88, 0x94, 0x91, 0x7a, 0x98, 0x8a, 0x00, 0x21, 0x65, 0xb6, 0x6b, 0x7b,
	0xce, 0xa0, 0xb0, 0xb4, 0x45, 0xaa, 0x52, 0x45, 0x22, 0x63, 0x25, 0x93, 0xaf, 0x4d, 0xde, 0x37,
	0xff, 0xba, 0x8f, 0x58, 0xd9, 0xb5, 0xbd, 0xca, 0xa0, 0xb0, 0xf4, 0x98, 0xd4, 0x30, 0xeb, 0x05,
	0x7a, 0xcc, 0x2a, 0xe6, 0x60, 0xe3, 0x72, 0x4e, 0xd2, 0x97, 0x0a, 0x59, 0xd5, 0xf4, 0xd7, 0x86,
	0x5e, 0x92, 0xa3, 0x48, 0x68, 0x94, 0xca, 0x7c, 0xa3, 0xa3, 0xb5, 0x40, 0x56, 0x33, 0x77, 0x07,
	0x39, 0xbd, 0x22, 0xcd, 0xfd, 0x2c, 0x81, 0x99, 0x42, 0x56, 0x37, 0xb4, 0xc3, 0x07, 0x7a, 0x4a,
	0x1c, 0x84, 0x4e, 0x14, 0xa5, 0x42, 0x6b, 0xf6, 0xcf, 0x20, 0x77, 0x01, 0x75, 0x49, 0x63, 0x38,
	0x81, 0xf0, 0xb5, 0x27, 0x64, 0x3c, 0x46, 0xe6, 0x18, 0xca, 0x7e, 0x44, 0x39, 0xa9, 0x6b, 0x19,
	0x2b, 0x91, 0x6a, 0x46, 0xdc, 0xb2, 0xe7, 0x74, 0x2b, 0xf3, 0xaf, 0x33, 0x6b, 0x50, 0x84, 0xd4,
	0x23, 0xff, 0x47, 0x52, 0x05, 0x13, 0xf9, 0x2e, 0xa2, 0x0d, 0xa5, 0x61, 0x28, 0x7f, 0xe3, 0xee,
	0xc3, 0x7c, 0xc9, 0xed, 0xc5, 0x92, 0xdb, 0xdf, 0x4b, 0x6e, 0x7f, 0xac, 0xb8, 0xb5, 0x58, 0x71,
	0xeb, 0x73, 0xc5, 0xad, 0xe7, 0x9b, 0x58, 0xe2, 0x78, 0x36, 0x6c, 0x87, 0x90, 0xf8, 0xf9, 0x98,
	0xd7, 0xc5, 0x9a, 0xfe, 0x76, 0xfd, 0x6c, 0x27, 0xf1, 0x6d, 0x2a, 0xf4, 0xb0, 0x66, 0x66, 0xbc,
	0xfd, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xa4, 0x05, 0xa9, 0xc8, 0x21, 0x02, 0x00, 0x00,
}

func (m *TxoutConfirmation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxoutConfirmation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxoutConfirmation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalizedHeight != 0 {
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(m.FinalizedHeight))
		i--
		dAtA[i] = 0x58
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintTxoutConfirmation(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x52
		}
	}
	if m.BlockHeight != 0 {
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x48
	}
	if len(m.ToAddress) > 0 {
		i -= len(m.ToAddress)
		copy(dAtA[i:], m.ToAddress)
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(len(m.ToAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.DestinationAmount != 0 {
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(m.DestinationAmount))
		i--
		dAtA[i] = 0x38
	}
	if len(m.DestinationAsset) > 0 {
		i -= len(m.DestinationAsset)
		copy(dAtA[i:], m.DestinationAsset)
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(len(m.DestinationAsset)))
		i--
		dAtA[i] = 0x32
	}
	if m.MMint != 0 {
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(m.MMint))
		i--
		dAtA[i] = 0x28
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.TxoutId != 0 {
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(m.TxoutId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTxoutConfirmation(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxoutConfirmation(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxoutConfirmation(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TxoutConfirmation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTxoutConfirmation(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTxoutConfirmation(uint64(l))
	}
	if m.TxoutId != 0 {
		n += 1 + sovTxoutConfirmation(uint64(m.TxoutId))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTxoutConfirmation(uint64(l))
	}
	if m.MMint != 0 {
		n += 1 + sovTxoutConfirmation(uint64(m.MMint))
	}
	l = len(m.DestinationAsset)
	if l > 0 {
		n += 1 + l + sovTxoutConfirmation(uint64(l))
	}
	if m.DestinationAmount != 0 {
		n += 1 + sovTxoutConfirmation(uint64(m.DestinationAmount))
	}
	l = len(m.ToAddress)
	if l > 0 {
		n += 1 + l + sovTxoutConfirmation(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTxoutConfirmation(uint64(m.BlockHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovTxoutConfirmation(uint64(l))
		}
	}
	if m.FinalizedHeight != 0 {
		n += 1 + sovTxoutConfirmation(uint64(m.FinalizedHeight))
	}
	return n
}

func sovTxoutConfirmation(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxoutConfirmation(x uint64) (n int) {
	return sovTxoutConfirmation(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TxoutConfirmation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxoutConfirmation
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxoutConfirmation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxoutConfirmation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxoutId", wireType)
			}
			m.TxoutId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxoutId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MMint", wireType)
			}
			m.MMint = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MMint |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAsset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestinationAsset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestinationAmount", wireType)
			}
			m.DestinationAmount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DestinationAmount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedHeight", wireType)
			}
			m.FinalizedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxoutConfirmation(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxoutConfirmation
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxoutConfirmation(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxoutConfirmation
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxoutConfirmation
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxoutConfirmation
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxoutConfirmation
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxoutConfirmation
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxoutConfirmation        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxoutConfirmation          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxoutConfirmation = fmt.Errorf("proto: unexpected end of group")
)
