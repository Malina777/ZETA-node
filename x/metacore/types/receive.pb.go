// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: metacore/receive.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Receive struct {
	Creator             string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index               string   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	SendHash            string   `protobuf:"bytes,3,opt,name=sendHash,proto3" json:"sendHash,omitempty"`
	OutTxHash           string   `protobuf:"bytes,4,opt,name=outTxHash,proto3" json:"outTxHash,omitempty"`
	OutBlockHeight      uint64   `protobuf:"varint,5,opt,name=outBlockHeight,proto3" json:"outBlockHeight,omitempty"`
	FinalizedMetaHeight uint64   `protobuf:"varint,6,opt,name=finalizedMetaHeight,proto3" json:"finalizedMetaHeight,omitempty"`
	Signers             []string `protobuf:"bytes,7,rep,name=signers,proto3" json:"signers,omitempty"`
}

func (m *Receive) Reset()         { *m = Receive{} }
func (m *Receive) String() string { return proto.CompactTextString(m) }
func (*Receive) ProtoMessage()    {}
func (*Receive) Descriptor() ([]byte, []int) {
	return fileDescriptor_e79417efc64813d7, []int{0}
}
func (m *Receive) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Receive) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Receive.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Receive) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Receive.Merge(m, src)
}
func (m *Receive) XXX_Size() int {
	return m.Size()
}
func (m *Receive) XXX_DiscardUnknown() {
	xxx_messageInfo_Receive.DiscardUnknown(m)
}

var xxx_messageInfo_Receive proto.InternalMessageInfo

func (m *Receive) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Receive) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Receive) GetSendHash() string {
	if m != nil {
		return m.SendHash
	}
	return ""
}

func (m *Receive) GetOutTxHash() string {
	if m != nil {
		return m.OutTxHash
	}
	return ""
}

func (m *Receive) GetOutBlockHeight() uint64 {
	if m != nil {
		return m.OutBlockHeight
	}
	return 0
}

func (m *Receive) GetFinalizedMetaHeight() uint64 {
	if m != nil {
		return m.FinalizedMetaHeight
	}
	return 0
}

func (m *Receive) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func init() {
	proto.RegisterType((*Receive)(nil), "MetaProtocol.metacore.metacore.Receive")
}

func init() { proto.RegisterFile("metacore/receive.proto", fileDescriptor_e79417efc64813d7) }

var fileDescriptor_e79417efc64813d7 = []byte{
	// 278 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x50, 0xbb, 0x4e, 0xc3, 0x30,
	0x14, 0xad, 0xe9, 0x8b, 0x7a, 0x60, 0x30, 0x15, 0xb2, 0x2a, 0x64, 0x55, 0x0c, 0xa8, 0x0b, 0x09,
	0x82, 0x3f, 0xe8, 0xd4, 0x01, 0x24, 0x14, 0x31, 0xb1, 0xa5, 0xce, 0x25, 0xb1, 0x48, 0x73, 0x2b,
	0xc7, 0x41, 0x81, 0xaf, 0xe0, 0xb3, 0x18, 0x3b, 0x32, 0xa2, 0x64, 0xe0, 0x37, 0x90, 0x9d, 0x26,
	0x95, 0x10, 0xdb, 0x79, 0xdd, 0x2b, 0x9d, 0x43, 0xcf, 0x36, 0x60, 0x42, 0x89, 0x1a, 0x7c, 0x0d,
	0x12, 0xd4, 0x2b, 0x78, 0x5b, 0x8d, 0x06, 0x99, 0xb8, 0x07, 0x13, 0x3e, 0x58, 0x28, 0x31, 0xf5,
	0xda, 0x50, 0x07, 0x66, 0xd3, 0x18, 0x63, 0x74, 0x51, 0xdf, 0xa2, 0xe6, 0xea, 0xe2, 0x87, 0xd0,
	0x71, 0xd0, 0xfc, 0x61, 0x9c, 0x8e, 0xa5, 0x86, 0xd0, 0xa0, 0xe6, 0x64, 0x4e, 0x16, 0x93, 0xa0,
	0xa5, 0x6c, 0x4a, 0x87, 0x2a, 0x8b, 0xa0, 0xe4, 0x47, 0x4e, 0x6f, 0x08, 0x9b, 0xd1, 0xe3, 0x1c,
	0xb2, 0x68, 0x15, 0xe6, 0x09, 0xef, 0x3b, 0xa3, 0xe3, 0xec, 0x9c, 0x4e, 0xb0, 0x30, 0x8f, 0xa5,
	0x33, 0x07, 0xce, 0x3c, 0x08, 0xec, 0x92, 0x9e, 0x60, 0x61, 0x96, 0x29, 0xca, 0x97, 0x15, 0xa8,
	0x38, 0x31, 0x7c, 0x38, 0x27, 0x8b, 0x41, 0xf0, 0x47, 0x65, 0xd7, 0xf4, 0xf4, 0x59, 0x65, 0x61,
	0xaa, 0xde, 0x21, 0xb2, 0xf5, 0xf6, 0xe1, 0x91, 0x0b, 0xff, 0x67, 0xd9, 0x0e, 0xb9, 0x8a, 0x33,
	0xd0, 0x39, 0x1f, 0xcf, 0xfb, 0xb6, 0xc3, 0x9e, 0x2e, 0xef, 0x3e, 0x2b, 0x41, 0x76, 0x95, 0x20,
	0xdf, 0x95, 0x20, 0x1f, 0xb5, 0xe8, 0xed, 0x6a, 0xd1, 0xfb, 0xaa, 0x45, 0xef, 0xe9, 0x26, 0x56,
	0x26, 0x29, 0xd6, 0x9e, 0xc4, 0x8d, 0x6f, 0x5f, 0x5d, 0xb5, 0x2b, 0xfa, 0xdd, 0xd4, 0xe5, 0x01,
	0x9a, 0xb7, 0x2d, 0xe4, 0xeb, 0x91, 0x9b, 0xef, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x79, 0xf9,
	0xcd, 0x3f, 0x8e, 0x01, 0x00, 0x00,
}

func (m *Receive) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Receive) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Receive) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintReceive(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.FinalizedMetaHeight != 0 {
		i = encodeVarintReceive(dAtA, i, uint64(m.FinalizedMetaHeight))
		i--
		dAtA[i] = 0x30
	}
	if m.OutBlockHeight != 0 {
		i = encodeVarintReceive(dAtA, i, uint64(m.OutBlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OutTxHash) > 0 {
		i -= len(m.OutTxHash)
		copy(dAtA[i:], m.OutTxHash)
		i = encodeVarintReceive(dAtA, i, uint64(len(m.OutTxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SendHash) > 0 {
		i -= len(m.SendHash)
		copy(dAtA[i:], m.SendHash)
		i = encodeVarintReceive(dAtA, i, uint64(len(m.SendHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintReceive(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintReceive(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintReceive(dAtA []byte, offset int, v uint64) int {
	offset -= sovReceive(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Receive) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovReceive(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovReceive(uint64(l))
	}
	l = len(m.SendHash)
	if l > 0 {
		n += 1 + l + sovReceive(uint64(l))
	}
	l = len(m.OutTxHash)
	if l > 0 {
		n += 1 + l + sovReceive(uint64(l))
	}
	if m.OutBlockHeight != 0 {
		n += 1 + sovReceive(uint64(m.OutBlockHeight))
	}
	if m.FinalizedMetaHeight != 0 {
		n += 1 + sovReceive(uint64(m.FinalizedMetaHeight))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovReceive(uint64(l))
		}
	}
	return n
}

func sovReceive(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozReceive(x uint64) (n int) {
	return sovReceive(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Receive) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowReceive
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Receive: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Receive: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReceive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReceive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReceive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReceive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReceive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReceive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReceive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReceive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBlockHeight", wireType)
			}
			m.OutBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedMetaHeight", wireType)
			}
			m.FinalizedMetaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedMetaHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthReceive
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthReceive
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipReceive(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthReceive
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipReceive(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowReceive
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowReceive
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthReceive
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupReceive
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthReceive
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthReceive        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowReceive          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupReceive = fmt.Errorf("proto: unexpected end of group")
)
