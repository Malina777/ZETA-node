// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetachain/observer/block_header.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type BlockHeaderState struct {
	ChainId         int64  `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	LatestHeight    int64  `protobuf:"varint,2,opt,name=latest_height,json=latestHeight,proto3" json:"latest_height,omitempty"`
	EarliestHeight  int64  `protobuf:"varint,3,opt,name=earliest_height,json=earliestHeight,proto3" json:"earliest_height,omitempty"`
	LatestBlockHash []byte `protobuf:"bytes,4,opt,name=latest_block_hash,json=latestBlockHash,proto3" json:"latest_block_hash,omitempty"`
}

func (m *BlockHeaderState) Reset()         { *m = BlockHeaderState{} }
func (m *BlockHeaderState) String() string { return proto.CompactTextString(m) }
func (*BlockHeaderState) ProtoMessage()    {}
func (*BlockHeaderState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b007d1659f19fdd8, []int{0}
}
func (m *BlockHeaderState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BlockHeaderState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BlockHeaderState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BlockHeaderState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlockHeaderState.Merge(m, src)
}
func (m *BlockHeaderState) XXX_Size() int {
	return m.Size()
}
func (m *BlockHeaderState) XXX_DiscardUnknown() {
	xxx_messageInfo_BlockHeaderState.DiscardUnknown(m)
}

var xxx_messageInfo_BlockHeaderState proto.InternalMessageInfo

func (m *BlockHeaderState) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *BlockHeaderState) GetLatestHeight() int64 {
	if m != nil {
		return m.LatestHeight
	}
	return 0
}

func (m *BlockHeaderState) GetEarliestHeight() int64 {
	if m != nil {
		return m.EarliestHeight
	}
	return 0
}

func (m *BlockHeaderState) GetLatestBlockHash() []byte {
	if m != nil {
		return m.LatestBlockHash
	}
	return nil
}

func init() {
	proto.RegisterType((*BlockHeaderState)(nil), "zetachain.zetacore.observer.BlockHeaderState")
}

func init() {
	proto.RegisterFile("zetachain/observer/block_header.proto", fileDescriptor_b007d1659f19fdd8)
}

var fileDescriptor_b007d1659f19fdd8 = []byte{
	// 268 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xad, 0x4a, 0x2d, 0x49,
	0x4c, 0xce, 0x48, 0xcc, 0xcc, 0xd3, 0xcf, 0x4f, 0x2a, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2, 0x4f,
	0xca, 0xc9, 0x4f, 0xce, 0x8e, 0xcf, 0x48, 0x4d, 0x4c, 0x49, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x92, 0x86, 0x2b, 0xd3, 0x03, 0xb3, 0xf2, 0x8b, 0x52, 0xf5, 0x60, 0xea, 0xa5, 0x44,
	0xd2, 0xf3, 0xd3, 0xf3, 0xc1, 0xea, 0xf4, 0x41, 0x2c, 0x88, 0x16, 0x29, 0x45, 0x2c, 0x26, 0xc3,
	0x18, 0x10, 0x25, 0x4a, 0xcb, 0x19, 0xb9, 0x04, 0x9c, 0x40, 0x96, 0x79, 0x80, 0xed, 0x0a, 0x2e,
	0x49, 0x2c, 0x49, 0x15, 0x92, 0xe4, 0xe2, 0x00, 0xeb, 0x8a, 0xcf, 0x4c, 0x91, 0x60, 0x54, 0x60,
	0xd4, 0x60, 0x0e, 0x62, 0x07, 0xf3, 0x3d, 0x53, 0x84, 0x94, 0xb9, 0x78, 0x73, 0x12, 0x4b, 0x52,
	0x8b, 0x4b, 0xe2, 0x33, 0x52, 0x33, 0xd3, 0x33, 0x4a, 0x24, 0x98, 0xc0, 0xf2, 0x3c, 0x10, 0x41,
	0x0f, 0xb0, 0x98, 0x90, 0x3a, 0x17, 0x7f, 0x6a, 0x62, 0x51, 0x4e, 0x26, 0x92, 0x32, 0x66, 0xb0,
	0x32, 0x3e, 0x98, 0x30, 0x54, 0xa1, 0x16, 0x97, 0x20, 0xd4, 0x34, 0xa8, 0x87, 0x13, 0x8b, 0x33,
	0x24, 0x58, 0x14, 0x18, 0x35, 0x78, 0x82, 0xf8, 0x21, 0x12, 0x10, 0xb7, 0x25, 0x16, 0x67, 0x38,
	0x79, 0x9e, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e,
	0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x7e, 0x7a, 0x66, 0x49,
	0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e, 0xae, 0x3e, 0xc8, 0xc7, 0xba, 0x10, 0x2f, 0xc3, 0x42, 0x49,
	0xbf, 0x02, 0xe1, 0xfb, 0x92, 0xca, 0x82, 0xd4, 0xe2, 0x24, 0x36, 0xb0, 0xdf, 0x8d, 0x01, 0x01,
	0x00, 0x00, 0xff, 0xff, 0x53, 0xea, 0x22, 0x5a, 0x7a, 0x01, 0x00, 0x00,
}

func (m *BlockHeaderState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockHeaderState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BlockHeaderState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LatestBlockHash) > 0 {
		i -= len(m.LatestBlockHash)
		copy(dAtA[i:], m.LatestBlockHash)
		i = encodeVarintBlockHeader(dAtA, i, uint64(len(m.LatestBlockHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EarliestHeight != 0 {
		i = encodeVarintBlockHeader(dAtA, i, uint64(m.EarliestHeight))
		i--
		dAtA[i] = 0x18
	}
	if m.LatestHeight != 0 {
		i = encodeVarintBlockHeader(dAtA, i, uint64(m.LatestHeight))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintBlockHeader(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlockHeader(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlockHeader(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BlockHeaderState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovBlockHeader(uint64(m.ChainId))
	}
	if m.LatestHeight != 0 {
		n += 1 + sovBlockHeader(uint64(m.LatestHeight))
	}
	if m.EarliestHeight != 0 {
		n += 1 + sovBlockHeader(uint64(m.EarliestHeight))
	}
	l = len(m.LatestBlockHash)
	if l > 0 {
		n += 1 + l + sovBlockHeader(uint64(l))
	}
	return n
}

func sovBlockHeader(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlockHeader(x uint64) (n int) {
	return sovBlockHeader(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BlockHeaderState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlockHeader
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockHeaderState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockHeaderState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestHeight", wireType)
			}
			m.LatestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LatestHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EarliestHeight", wireType)
			}
			m.EarliestHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EarliestHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LatestBlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlockHeader
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlockHeader
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LatestBlockHash = append(m.LatestBlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.LatestBlockHash == nil {
				m.LatestBlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlockHeader(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlockHeader
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlockHeader(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlockHeader
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlockHeader
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlockHeader
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlockHeader
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlockHeader
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlockHeader        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlockHeader          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlockHeader = fmt.Errorf("proto: unexpected end of group")
)
