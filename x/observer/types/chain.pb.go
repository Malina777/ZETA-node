// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: observer/chain.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ChainName int32

const (
	ChainName_Empty      ChainName = 0
	ChainName_Eth        ChainName = 1
	ChainName_ZetaChain  ChainName = 2
	ChainName_Btc        ChainName = 3
	ChainName_Polygon    ChainName = 4
	ChainName_BscMainnet ChainName = 5
	ChainName_Goerli     ChainName = 6
	ChainName_Mumbai     ChainName = 7
	ChainName_Ropsten    ChainName = 8
	ChainName_Ganache    ChainName = 9
	ChainName_Baobab     ChainName = 10
	ChainName_BscTestnet ChainName = 11
)

var ChainName_name = map[int32]string{
	0:  "Empty",
	1:  "Eth",
	2:  "ZetaChain",
	3:  "Btc",
	4:  "Polygon",
	5:  "BscMainnet",
	6:  "Goerli",
	7:  "Mumbai",
	8:  "Ropsten",
	9:  "Ganache",
	10: "Baobab",
	11: "BscTestnet",
}

var ChainName_value = map[string]int32{
	"Empty":      0,
	"Eth":        1,
	"ZetaChain":  2,
	"Btc":        3,
	"Polygon":    4,
	"BscMainnet": 5,
	"Goerli":     6,
	"Mumbai":     7,
	"Ropsten":    8,
	"Ganache":    9,
	"Baobab":     10,
	"BscTestnet": 11,
}

func (x ChainName) String() string {
	return proto.EnumName(ChainName_name, int32(x))
}

func (ChainName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_14e77f3a0a968e59, []int{0}
}

type Chain struct {
	ChainName ChainName `protobuf:"varint,1,opt,name=ChainName,proto3,enum=zetachain.zetacore.observer.ChainName" json:"ChainName,omitempty"`
	ChainId   int64     `protobuf:"varint,2,opt,name=ChainId,proto3" json:"ChainId,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_14e77f3a0a968e59, []int{0}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetChainName() ChainName {
	if m != nil {
		return m.ChainName
	}
	return ChainName_Empty
}

func (m *Chain) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func init() {
	proto.RegisterEnum("zetachain.zetacore.observer.ChainName", ChainName_name, ChainName_value)
	proto.RegisterType((*Chain)(nil), "zetachain.zetacore.observer.Chain")
}

func init() { proto.RegisterFile("observer/chain.proto", fileDescriptor_14e77f3a0a968e59) }

var fileDescriptor_14e77f3a0a968e59 = []byte{
	// 322 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0x4f, 0x4a, 0xc3, 0x40,
	0x18, 0xc5, 0x33, 0xfd, 0x17, 0xf3, 0x15, 0xcb, 0x30, 0x74, 0x51, 0x2a, 0x0c, 0xc5, 0x85, 0x14,
	0xc1, 0x0c, 0xe8, 0x0d, 0xa2, 0xa5, 0x74, 0x51, 0x91, 0xe2, 0xaa, 0xbb, 0x49, 0x1c, 0x92, 0x40,
	0x93, 0x2f, 0x24, 0x53, 0xb1, 0x9e, 0xc2, 0x43, 0xb8, 0xe8, 0x51, 0x5c, 0x76, 0xe9, 0x52, 0xda,
	0x8b, 0xc8, 0x4c, 0x6d, 0x75, 0xe5, 0xee, 0xbd, 0x8f, 0xdf, 0x7b, 0x03, 0x6f, 0xa0, 0x8b, 0x61,
	0xa5, 0xca, 0x67, 0x55, 0x8a, 0x28, 0x91, 0x69, 0xee, 0x17, 0x25, 0x6a, 0x64, 0x67, 0xaf, 0x4a,
	0xcb, 0xfd, 0xc1, 0x2a, 0x2c, 0x95, 0x7f, 0x00, 0xfb, 0xdd, 0x18, 0x63, 0xb4, 0x9c, 0x30, 0x6a,
	0x1f, 0x39, 0x8f, 0xa1, 0x79, 0x6b, 0x02, 0xec, 0x0e, 0x3c, 0x2b, 0xee, 0x65, 0xa6, 0x7a, 0x64,
	0x40, 0x86, 0x9d, 0xeb, 0x0b, 0xff, 0x9f, 0x3e, 0xff, 0x48, 0xcf, 0x7e, 0x83, 0xac, 0x07, 0xae,
	0x35, 0x93, 0xa7, 0x5e, 0x6d, 0x40, 0x86, 0xf5, 0xd9, 0xc1, 0x5e, 0xae, 0xc9, 0x9f, 0x07, 0x98,
	0x07, 0xcd, 0x51, 0x56, 0xe8, 0x15, 0x75, 0x98, 0x0b, 0xf5, 0x91, 0x4e, 0x28, 0x61, 0xa7, 0xe0,
	0xcd, 0x95, 0x96, 0x16, 0xa2, 0x35, 0x73, 0x0f, 0x74, 0x44, 0xeb, 0xac, 0x0d, 0xee, 0x03, 0x2e,
	0x56, 0x31, 0xe6, 0xb4, 0xc1, 0x3a, 0x00, 0x41, 0x15, 0x4d, 0x65, 0x9a, 0xe7, 0x4a, 0xd3, 0x26,
	0x03, 0x68, 0x8d, 0x51, 0x95, 0x8b, 0x94, 0xb6, 0x8c, 0x9e, 0x2e, 0xb3, 0x50, 0xa6, 0xd4, 0x35,
	0xa1, 0x19, 0x16, 0x95, 0x56, 0x39, 0x3d, 0x31, 0x66, 0x2c, 0x73, 0x19, 0x25, 0x8a, 0x7a, 0x86,
	0x0a, 0x24, 0x86, 0x32, 0xa4, 0xf0, 0xd3, 0xf6, 0xa8, 0x2a, 0x6d, 0xda, 0xda, 0xfd, 0xc6, 0xfa,
	0x9d, 0x93, 0x60, 0xf2, 0xb1, 0xe5, 0x64, 0xb3, 0xe5, 0xe4, 0x6b, 0xcb, 0xc9, 0xdb, 0x8e, 0x3b,
	0x9b, 0x1d, 0x77, 0x3e, 0x77, 0xdc, 0x99, 0x8b, 0x38, 0xd5, 0xc9, 0x32, 0xf4, 0x23, 0xcc, 0x84,
	0x59, 0xe4, 0xca, 0x8e, 0x23, 0x0e, 0xe3, 0x88, 0x17, 0x71, 0xfc, 0x17, 0xbd, 0x2a, 0x54, 0x15,
	0xb6, 0xec, 0xca, 0x37, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x3e, 0xa1, 0x45, 0xb0, 0x01,
	0x00, 0x00,
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainName != 0 {
		i = encodeVarintChain(dAtA, i, uint64(m.ChainName))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintChain(dAtA []byte, offset int, v uint64) int {
	offset -= sovChain(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainName != 0 {
		n += 1 + sovChain(uint64(m.ChainName))
	}
	if m.ChainId != 0 {
		n += 1 + sovChain(uint64(m.ChainId))
	}
	return n
}

func sovChain(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChain(x uint64) (n int) {
	return sovChain(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChain
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			m.ChainName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainName |= ChainName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChain
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChain(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChain
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChain(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChain
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChain
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChain
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChain
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChain
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChain        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChain          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChain = fmt.Errorf("proto: unexpected end of group")
)
