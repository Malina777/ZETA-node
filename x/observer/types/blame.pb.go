// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: observer/blame.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Node struct {
	PubKey         string `protobuf:"bytes,1,opt,name=pub_key,json=pubKey,proto3" json:"pub_key,omitempty"`
	BlameData      []byte `protobuf:"bytes,2,opt,name=blame_data,json=blameData,proto3" json:"blame_data,omitempty"`
	BlameSignature []byte `protobuf:"bytes,3,opt,name=blame_signature,json=blameSignature,proto3" json:"blame_signature,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9eda3a934f0dc78, []int{0}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetPubKey() string {
	if m != nil {
		return m.PubKey
	}
	return ""
}

func (m *Node) GetBlameData() []byte {
	if m != nil {
		return m.BlameData
	}
	return nil
}

func (m *Node) GetBlameSignature() []byte {
	if m != nil {
		return m.BlameSignature
	}
	return nil
}

type Blame struct {
	Index         string  `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	FailureReason string  `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	Nodes         []*Node `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty"`
}

func (m *Blame) Reset()         { *m = Blame{} }
func (m *Blame) String() string { return proto.CompactTextString(m) }
func (*Blame) ProtoMessage()    {}
func (*Blame) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9eda3a934f0dc78, []int{1}
}
func (m *Blame) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Blame) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Blame.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Blame) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Blame.Merge(m, src)
}
func (m *Blame) XXX_Size() int {
	return m.Size()
}
func (m *Blame) XXX_DiscardUnknown() {
	xxx_messageInfo_Blame.DiscardUnknown(m)
}

var xxx_messageInfo_Blame proto.InternalMessageInfo

func (m *Blame) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Blame) GetFailureReason() string {
	if m != nil {
		return m.FailureReason
	}
	return ""
}

func (m *Blame) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Node)(nil), "observer.Node")
	proto.RegisterType((*Blame)(nil), "observer.Blame")
}

func init() { proto.RegisterFile("observer/blame.proto", fileDescriptor_e9eda3a934f0dc78) }

var fileDescriptor_e9eda3a934f0dc78 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x3c, 0x90, 0x41, 0x4b, 0x84, 0x40,
	0x1c, 0xc5, 0x9d, 0xcc, 0x2d, 0xa7, 0x32, 0x18, 0x16, 0x56, 0x82, 0x06, 0x59, 0x8a, 0xbc, 0xa4,
	0x50, 0xdf, 0x60, 0xe9, 0x12, 0x41, 0x07, 0xbb, 0x75, 0x91, 0x19, 0xfd, 0xe7, 0x5a, 0xbb, 0x8e,
	0x8c, 0x63, 0xac, 0x7d, 0x8a, 0x3e, 0x56, 0xc7, 0x3d, 0x76, 0x0c, 0xfd, 0x22, 0xb1, 0xe3, 0xea,
	0xed, 0x3f, 0xbf, 0xf7, 0x98, 0xc7, 0x7b, 0x78, 0x2a, 0x78, 0x05, 0xf2, 0x13, 0x64, 0xc8, 0x57,
	0x6c, 0x0d, 0x41, 0x29, 0x85, 0x12, 0xe4, 0x78, 0xa0, 0x17, 0xb3, 0x51, 0x1f, 0x8e, 0xde, 0x32,
	0xcf, 0xf0, 0xe1, 0xb3, 0x48, 0x81, 0xcc, 0xf0, 0x51, 0x59, 0xf3, 0xf8, 0x03, 0x1a, 0x17, 0x79,
	0xc8, 0xb7, 0xa3, 0x49, 0x59, 0xf3, 0x27, 0x68, 0xc8, 0x25, 0xc6, 0xfa, 0xcb, 0x38, 0x65, 0x8a,
	0xb9, 0x07, 0x1e, 0xf2, 0x4f, 0x23, 0x5b, 0x93, 0x07, 0xa6, 0x18, 0xb9, 0xc1, 0xe7, 0xbd, 0x5c,
	0xe5, 0x59, 0xc1, 0x54, 0x2d, 0xc1, 0x35, 0xb5, 0xc7, 0xd1, 0xf8, 0x65, 0xa0, 0xf3, 0x77, 0x6c,
	0x2d, 0x76, 0x84, 0x4c, 0xb1, 0x95, 0x17, 0x29, 0x6c, 0xf6, 0x39, 0xfd, 0x83, 0x5c, 0x63, 0xe7,
	0x8d, 0xe5, 0xab, 0x5a, 0x42, 0x2c, 0x81, 0x55, 0xa2, 0xd0, 0x51, 0x76, 0x74, 0xb6, 0xa7, 0x91,
	0x86, 0xe4, 0x0a, 0x5b, 0x85, 0x48, 0xa1, 0x72, 0x4d, 0xcf, 0xf4, 0x4f, 0xee, 0x9c, 0x60, 0xac,
	0xb3, 0x6b, 0x11, 0xf5, 0xe2, 0xe2, 0xf1, 0xa7, 0xa5, 0x68, 0xdb, 0x52, 0xf4, 0xd7, 0x52, 0xf4,
	0xdd, 0x51, 0x63, 0xdb, 0x51, 0xe3, 0xb7, 0xa3, 0xc6, 0x6b, 0x98, 0xe5, 0x6a, 0x59, 0xf3, 0x20,
	0x11, 0xeb, 0xf0, 0x0b, 0x14, 0xbb, 0x4d, 0x96, 0x2c, 0x2f, 0xf4, 0x99, 0x08, 0x09, 0xe1, 0x66,
	0xdc, 0x27, 0x54, 0x4d, 0x09, 0x15, 0x9f, 0xe8, 0x99, 0xee, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff,
	0x8e, 0x5d, 0xd9, 0x92, 0x61, 0x01, 0x00, 0x00,
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Node) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlameSignature) > 0 {
		i -= len(m.BlameSignature)
		copy(dAtA[i:], m.BlameSignature)
		i = encodeVarintBlame(dAtA, i, uint64(len(m.BlameSignature)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BlameData) > 0 {
		i -= len(m.BlameData)
		copy(dAtA[i:], m.BlameData)
		i = encodeVarintBlame(dAtA, i, uint64(len(m.BlameData)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.PubKey) > 0 {
		i -= len(m.PubKey)
		copy(dAtA[i:], m.PubKey)
		i = encodeVarintBlame(dAtA, i, uint64(len(m.PubKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Blame) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Blame) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Blame) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for iNdEx := len(m.Nodes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Nodes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBlame(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.FailureReason) > 0 {
		i -= len(m.FailureReason)
		copy(dAtA[i:], m.FailureReason)
		i = encodeVarintBlame(dAtA, i, uint64(len(m.FailureReason)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintBlame(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBlame(dAtA []byte, offset int, v uint64) int {
	offset -= sovBlame(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PubKey)
	if l > 0 {
		n += 1 + l + sovBlame(uint64(l))
	}
	l = len(m.BlameData)
	if l > 0 {
		n += 1 + l + sovBlame(uint64(l))
	}
	l = len(m.BlameSignature)
	if l > 0 {
		n += 1 + l + sovBlame(uint64(l))
	}
	return n
}

func (m *Blame) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovBlame(uint64(l))
	}
	l = len(m.FailureReason)
	if l > 0 {
		n += 1 + l + sovBlame(uint64(l))
	}
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovBlame(uint64(l))
		}
	}
	return n
}

func sovBlame(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBlame(x uint64) (n int) {
	return sovBlame(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlameData = append(m.BlameData[:0], dAtA[iNdEx:postIndex]...)
			if m.BlameData == nil {
				m.BlameData = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameSignature", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBlame
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBlame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlameSignature = append(m.BlameSignature[:0], dAtA[iNdEx:postIndex]...)
			if m.BlameSignature == nil {
				m.BlameSignature = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Blame) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBlame
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Blame: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Blame: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FailureReason", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBlame
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBlame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FailureReason = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBlame
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBlame
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBlame
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, &Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBlame(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBlame
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBlame(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBlame
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBlame
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBlame
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBlame
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBlame
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBlame        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBlame          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBlame = fmt.Errorf("proto: unexpected end of group")
)
