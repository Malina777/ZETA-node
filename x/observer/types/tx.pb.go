// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: observer/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/zeta-chain/zetacore/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgUpdateObserver struct {
	Creator            string               `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	OldObserverAddress string               `protobuf:"bytes,2,opt,name=old_observer_address,json=oldObserverAddress,proto3" json:"old_observer_address,omitempty"`
	NewObserverAddress string               `protobuf:"bytes,3,opt,name=new_observer_address,json=newObserverAddress,proto3" json:"new_observer_address,omitempty"`
	UpdateReason       ObserverUpdateReason `protobuf:"varint,4,opt,name=update_reason,json=updateReason,proto3,enum=zetachain.zetacore.observer.ObserverUpdateReason" json:"update_reason,omitempty"`
}

func (m *MsgUpdateObserver) Reset()         { *m = MsgUpdateObserver{} }
func (m *MsgUpdateObserver) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateObserver) ProtoMessage()    {}
func (*MsgUpdateObserver) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{0}
}
func (m *MsgUpdateObserver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateObserver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateObserver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateObserver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateObserver.Merge(m, src)
}
func (m *MsgUpdateObserver) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateObserver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateObserver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateObserver proto.InternalMessageInfo

func (m *MsgUpdateObserver) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateObserver) GetOldObserverAddress() string {
	if m != nil {
		return m.OldObserverAddress
	}
	return ""
}

func (m *MsgUpdateObserver) GetNewObserverAddress() string {
	if m != nil {
		return m.NewObserverAddress
	}
	return ""
}

func (m *MsgUpdateObserver) GetUpdateReason() ObserverUpdateReason {
	if m != nil {
		return m.UpdateReason
	}
	return ObserverUpdateReason_Undefined
}

type MsgUpdateObserverResponse struct {
}

func (m *MsgUpdateObserverResponse) Reset()         { *m = MsgUpdateObserverResponse{} }
func (m *MsgUpdateObserverResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateObserverResponse) ProtoMessage()    {}
func (*MsgUpdateObserverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{1}
}
func (m *MsgUpdateObserverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateObserverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateObserverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateObserverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateObserverResponse.Merge(m, src)
}
func (m *MsgUpdateObserverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateObserverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateObserverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateObserverResponse proto.InternalMessageInfo

type MsgAddBlockHeader struct {
	Creator   string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId   int64             `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	BlockHash []byte            `protobuf:"bytes,3,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Height    int64             `protobuf:"varint,4,opt,name=height,proto3" json:"height,omitempty"`
	Header    common.HeaderData `protobuf:"bytes,5,opt,name=header,proto3" json:"header"`
}

func (m *MsgAddBlockHeader) Reset()         { *m = MsgAddBlockHeader{} }
func (m *MsgAddBlockHeader) String() string { return proto.CompactTextString(m) }
func (*MsgAddBlockHeader) ProtoMessage()    {}
func (*MsgAddBlockHeader) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{2}
}
func (m *MsgAddBlockHeader) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBlockHeader) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBlockHeader.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBlockHeader) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBlockHeader.Merge(m, src)
}
func (m *MsgAddBlockHeader) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBlockHeader) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBlockHeader.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBlockHeader proto.InternalMessageInfo

func (m *MsgAddBlockHeader) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddBlockHeader) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddBlockHeader) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *MsgAddBlockHeader) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *MsgAddBlockHeader) GetHeader() common.HeaderData {
	if m != nil {
		return m.Header
	}
	return common.HeaderData{}
}

type MsgAddBlockHeaderResponse struct {
}

func (m *MsgAddBlockHeaderResponse) Reset()         { *m = MsgAddBlockHeaderResponse{} }
func (m *MsgAddBlockHeaderResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddBlockHeaderResponse) ProtoMessage()    {}
func (*MsgAddBlockHeaderResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{3}
}
func (m *MsgAddBlockHeaderResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBlockHeaderResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBlockHeaderResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBlockHeaderResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBlockHeaderResponse.Merge(m, src)
}
func (m *MsgAddBlockHeaderResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBlockHeaderResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBlockHeaderResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBlockHeaderResponse proto.InternalMessageInfo

type MsgUpdateCoreParams struct {
	Creator    string      `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CoreParams *CoreParams `protobuf:"bytes,2,opt,name=coreParams,proto3" json:"coreParams,omitempty"`
}

func (m *MsgUpdateCoreParams) Reset()         { *m = MsgUpdateCoreParams{} }
func (m *MsgUpdateCoreParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCoreParams) ProtoMessage()    {}
func (*MsgUpdateCoreParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{4}
}
func (m *MsgUpdateCoreParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCoreParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCoreParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCoreParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCoreParams.Merge(m, src)
}
func (m *MsgUpdateCoreParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCoreParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCoreParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCoreParams proto.InternalMessageInfo

func (m *MsgUpdateCoreParams) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateCoreParams) GetCoreParams() *CoreParams {
	if m != nil {
		return m.CoreParams
	}
	return nil
}

type MsgUpdateCoreParamsResponse struct {
}

func (m *MsgUpdateCoreParamsResponse) Reset()         { *m = MsgUpdateCoreParamsResponse{} }
func (m *MsgUpdateCoreParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCoreParamsResponse) ProtoMessage()    {}
func (*MsgUpdateCoreParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{5}
}
func (m *MsgUpdateCoreParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCoreParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCoreParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCoreParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCoreParamsResponse.Merge(m, src)
}
func (m *MsgUpdateCoreParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCoreParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCoreParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCoreParamsResponse proto.InternalMessageInfo

type MsgRemoveCoreParams struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *MsgRemoveCoreParams) Reset()         { *m = MsgRemoveCoreParams{} }
func (m *MsgRemoveCoreParams) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCoreParams) ProtoMessage()    {}
func (*MsgRemoveCoreParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{6}
}
func (m *MsgRemoveCoreParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCoreParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCoreParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCoreParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCoreParams.Merge(m, src)
}
func (m *MsgRemoveCoreParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCoreParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCoreParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCoreParams proto.InternalMessageInfo

func (m *MsgRemoveCoreParams) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveCoreParams) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

type MsgRemoveCoreParamsResponse struct {
}

func (m *MsgRemoveCoreParamsResponse) Reset()         { *m = MsgRemoveCoreParamsResponse{} }
func (m *MsgRemoveCoreParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveCoreParamsResponse) ProtoMessage()    {}
func (*MsgRemoveCoreParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{7}
}
func (m *MsgRemoveCoreParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveCoreParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveCoreParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveCoreParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveCoreParamsResponse.Merge(m, src)
}
func (m *MsgRemoveCoreParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveCoreParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveCoreParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveCoreParamsResponse proto.InternalMessageInfo

type MsgAddObserver struct {
	Creator                 string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ObserverAddress         string `protobuf:"bytes,2,opt,name=observer_address,json=observerAddress,proto3" json:"observer_address,omitempty"`
	ZetaclientGranteePubkey string `protobuf:"bytes,3,opt,name=zetaclient_grantee_pubkey,json=zetaclientGranteePubkey,proto3" json:"zetaclient_grantee_pubkey,omitempty"`
	AddNodeAccountOnly      bool   `protobuf:"varint,4,opt,name=add_node_account_only,json=addNodeAccountOnly,proto3" json:"add_node_account_only,omitempty"`
}

func (m *MsgAddObserver) Reset()         { *m = MsgAddObserver{} }
func (m *MsgAddObserver) String() string { return proto.CompactTextString(m) }
func (*MsgAddObserver) ProtoMessage()    {}
func (*MsgAddObserver) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{8}
}
func (m *MsgAddObserver) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddObserver) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddObserver.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddObserver) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddObserver.Merge(m, src)
}
func (m *MsgAddObserver) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddObserver) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddObserver.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddObserver proto.InternalMessageInfo

func (m *MsgAddObserver) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddObserver) GetObserverAddress() string {
	if m != nil {
		return m.ObserverAddress
	}
	return ""
}

func (m *MsgAddObserver) GetZetaclientGranteePubkey() string {
	if m != nil {
		return m.ZetaclientGranteePubkey
	}
	return ""
}

func (m *MsgAddObserver) GetAddNodeAccountOnly() bool {
	if m != nil {
		return m.AddNodeAccountOnly
	}
	return false
}

type MsgAddObserverResponse struct {
}

func (m *MsgAddObserverResponse) Reset()         { *m = MsgAddObserverResponse{} }
func (m *MsgAddObserverResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddObserverResponse) ProtoMessage()    {}
func (*MsgAddObserverResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{9}
}
func (m *MsgAddObserverResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddObserverResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddObserverResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddObserverResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddObserverResponse.Merge(m, src)
}
func (m *MsgAddObserverResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddObserverResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddObserverResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddObserverResponse proto.InternalMessageInfo

type MsgAddBlameVote struct {
	Creator   string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	ChainId   int64  `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	BlameInfo *Blame `protobuf:"bytes,3,opt,name=blame_info,json=blameInfo,proto3" json:"blame_info,omitempty"`
}

func (m *MsgAddBlameVote) Reset()         { *m = MsgAddBlameVote{} }
func (m *MsgAddBlameVote) String() string { return proto.CompactTextString(m) }
func (*MsgAddBlameVote) ProtoMessage()    {}
func (*MsgAddBlameVote) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{10}
}
func (m *MsgAddBlameVote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBlameVote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBlameVote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBlameVote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBlameVote.Merge(m, src)
}
func (m *MsgAddBlameVote) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBlameVote) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBlameVote.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBlameVote proto.InternalMessageInfo

func (m *MsgAddBlameVote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddBlameVote) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *MsgAddBlameVote) GetBlameInfo() *Blame {
	if m != nil {
		return m.BlameInfo
	}
	return nil
}

type MsgAddBlameVoteResponse struct {
}

func (m *MsgAddBlameVoteResponse) Reset()         { *m = MsgAddBlameVoteResponse{} }
func (m *MsgAddBlameVoteResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddBlameVoteResponse) ProtoMessage()    {}
func (*MsgAddBlameVoteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{11}
}
func (m *MsgAddBlameVoteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddBlameVoteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddBlameVoteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddBlameVoteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddBlameVoteResponse.Merge(m, src)
}
func (m *MsgAddBlameVoteResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddBlameVoteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddBlameVoteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddBlameVoteResponse proto.InternalMessageInfo

type MsgUpdateCrosschainFlags struct {
	Creator                      string                        `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	IsInboundEnabled             bool                          `protobuf:"varint,3,opt,name=isInboundEnabled,proto3" json:"isInboundEnabled,omitempty"`
	IsOutboundEnabled            bool                          `protobuf:"varint,4,opt,name=isOutboundEnabled,proto3" json:"isOutboundEnabled,omitempty"`
	GasPriceIncreaseFlags        *GasPriceIncreaseFlags        `protobuf:"bytes,5,opt,name=gasPriceIncreaseFlags,proto3" json:"gasPriceIncreaseFlags,omitempty"`
	BlockHeaderVerificationFlags *BlockHeaderVerificationFlags `protobuf:"bytes,6,opt,name=blockHeaderVerificationFlags,proto3" json:"blockHeaderVerificationFlags,omitempty"`
}

func (m *MsgUpdateCrosschainFlags) Reset()         { *m = MsgUpdateCrosschainFlags{} }
func (m *MsgUpdateCrosschainFlags) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCrosschainFlags) ProtoMessage()    {}
func (*MsgUpdateCrosschainFlags) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{12}
}
func (m *MsgUpdateCrosschainFlags) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCrosschainFlags) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCrosschainFlags.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCrosschainFlags) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCrosschainFlags.Merge(m, src)
}
func (m *MsgUpdateCrosschainFlags) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCrosschainFlags) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCrosschainFlags.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCrosschainFlags proto.InternalMessageInfo

func (m *MsgUpdateCrosschainFlags) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateCrosschainFlags) GetIsInboundEnabled() bool {
	if m != nil {
		return m.IsInboundEnabled
	}
	return false
}

func (m *MsgUpdateCrosschainFlags) GetIsOutboundEnabled() bool {
	if m != nil {
		return m.IsOutboundEnabled
	}
	return false
}

func (m *MsgUpdateCrosschainFlags) GetGasPriceIncreaseFlags() *GasPriceIncreaseFlags {
	if m != nil {
		return m.GasPriceIncreaseFlags
	}
	return nil
}

func (m *MsgUpdateCrosschainFlags) GetBlockHeaderVerificationFlags() *BlockHeaderVerificationFlags {
	if m != nil {
		return m.BlockHeaderVerificationFlags
	}
	return nil
}

type MsgUpdateCrosschainFlagsResponse struct {
}

func (m *MsgUpdateCrosschainFlagsResponse) Reset()         { *m = MsgUpdateCrosschainFlagsResponse{} }
func (m *MsgUpdateCrosschainFlagsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCrosschainFlagsResponse) ProtoMessage()    {}
func (*MsgUpdateCrosschainFlagsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{13}
}
func (m *MsgUpdateCrosschainFlagsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCrosschainFlagsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCrosschainFlagsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCrosschainFlagsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCrosschainFlagsResponse.Merge(m, src)
}
func (m *MsgUpdateCrosschainFlagsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCrosschainFlagsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCrosschainFlagsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCrosschainFlagsResponse proto.InternalMessageInfo

type MsgUpdateKeygen struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Block   int64  `protobuf:"varint,2,opt,name=block,proto3" json:"block,omitempty"`
}

func (m *MsgUpdateKeygen) Reset()         { *m = MsgUpdateKeygen{} }
func (m *MsgUpdateKeygen) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateKeygen) ProtoMessage()    {}
func (*MsgUpdateKeygen) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{14}
}
func (m *MsgUpdateKeygen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateKeygen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateKeygen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateKeygen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateKeygen.Merge(m, src)
}
func (m *MsgUpdateKeygen) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateKeygen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateKeygen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateKeygen proto.InternalMessageInfo

func (m *MsgUpdateKeygen) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgUpdateKeygen) GetBlock() int64 {
	if m != nil {
		return m.Block
	}
	return 0
}

type MsgUpdateKeygenResponse struct {
}

func (m *MsgUpdateKeygenResponse) Reset()         { *m = MsgUpdateKeygenResponse{} }
func (m *MsgUpdateKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateKeygenResponse) ProtoMessage()    {}
func (*MsgUpdateKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1bcd40fa296a2b1d, []int{15}
}
func (m *MsgUpdateKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateKeygenResponse.Merge(m, src)
}
func (m *MsgUpdateKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateKeygenResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgUpdateObserver)(nil), "zetachain.zetacore.observer.MsgUpdateObserver")
	proto.RegisterType((*MsgUpdateObserverResponse)(nil), "zetachain.zetacore.observer.MsgUpdateObserverResponse")
	proto.RegisterType((*MsgAddBlockHeader)(nil), "zetachain.zetacore.observer.MsgAddBlockHeader")
	proto.RegisterType((*MsgAddBlockHeaderResponse)(nil), "zetachain.zetacore.observer.MsgAddBlockHeaderResponse")
	proto.RegisterType((*MsgUpdateCoreParams)(nil), "zetachain.zetacore.observer.MsgUpdateCoreParams")
	proto.RegisterType((*MsgUpdateCoreParamsResponse)(nil), "zetachain.zetacore.observer.MsgUpdateCoreParamsResponse")
	proto.RegisterType((*MsgRemoveCoreParams)(nil), "zetachain.zetacore.observer.MsgRemoveCoreParams")
	proto.RegisterType((*MsgRemoveCoreParamsResponse)(nil), "zetachain.zetacore.observer.MsgRemoveCoreParamsResponse")
	proto.RegisterType((*MsgAddObserver)(nil), "zetachain.zetacore.observer.MsgAddObserver")
	proto.RegisterType((*MsgAddObserverResponse)(nil), "zetachain.zetacore.observer.MsgAddObserverResponse")
	proto.RegisterType((*MsgAddBlameVote)(nil), "zetachain.zetacore.observer.MsgAddBlameVote")
	proto.RegisterType((*MsgAddBlameVoteResponse)(nil), "zetachain.zetacore.observer.MsgAddBlameVoteResponse")
	proto.RegisterType((*MsgUpdateCrosschainFlags)(nil), "zetachain.zetacore.observer.MsgUpdateCrosschainFlags")
	proto.RegisterType((*MsgUpdateCrosschainFlagsResponse)(nil), "zetachain.zetacore.observer.MsgUpdateCrosschainFlagsResponse")
	proto.RegisterType((*MsgUpdateKeygen)(nil), "zetachain.zetacore.observer.MsgUpdateKeygen")
	proto.RegisterType((*MsgUpdateKeygenResponse)(nil), "zetachain.zetacore.observer.MsgUpdateKeygenResponse")
}

func init() { proto.RegisterFile("observer/tx.proto", fileDescriptor_1bcd40fa296a2b1d) }

var fileDescriptor_1bcd40fa296a2b1d = []byte{
	// 922 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x36, 0x6d, 0x92, 0xbe, 0x84, 0x34, 0x99, 0x26, 0x8d, 0xe3, 0x50, 0x37, 0xda, 0x0b,
	0x01, 0x82, 0x9d, 0xba, 0x80, 0x00, 0x89, 0x83, 0xc3, 0x8f, 0xd4, 0xa0, 0x92, 0x68, 0x25, 0x72,
	0xe0, 0xb2, 0x9a, 0xdd, 0x79, 0x59, 0xaf, 0xba, 0x9e, 0xb1, 0x76, 0xd6, 0x6d, 0x8c, 0x04, 0x77,
	0x0e, 0x48, 0xfc, 0x2b, 0xfc, 0x0f, 0x1c, 0x7a, 0xec, 0x91, 0x13, 0x42, 0xc9, 0x89, 0xbf, 0x80,
	0x6b, 0xb5, 0x33, 0xbb, 0xe3, 0xdf, 0x6b, 0xa7, 0x27, 0xef, 0xcc, 0x7c, 0xef, 0x7b, 0xef, 0x7b,
	0xf3, 0xcd, 0x78, 0x60, 0x53, 0x78, 0x12, 0xe3, 0x17, 0x18, 0xd7, 0x92, 0xcb, 0x6a, 0x27, 0x16,
	0x89, 0x20, 0x7b, 0x3f, 0x63, 0x42, 0xfd, 0x16, 0x0d, 0x79, 0x55, 0x7d, 0x89, 0x18, 0xab, 0x39,
	0xaa, 0x7c, 0xdf, 0x17, 0xed, 0xb6, 0xe0, 0x35, 0xfd, 0xa3, 0x23, 0xca, 0x5b, 0x81, 0x08, 0x84,
	0xfa, 0xac, 0xa5, 0x5f, 0xf9, 0xac, 0xa1, 0xf6, 0x22, 0xda, 0xc6, 0x6c, 0xf6, 0x91, 0x99, 0xf5,
	0x63, 0x21, 0xa5, 0xca, 0xe3, 0x5e, 0x44, 0x34, 0x90, 0x19, 0x60, 0xc7, 0x00, 0xf2, 0x8f, 0x6c,
	0x61, 0xdb, 0x2c, 0x74, 0x68, 0x4c, 0xdb, 0x39, 0x9e, 0xf4, 0x15, 0xc8, 0x6c, 0xce, 0xfe, 0xcf,
	0x82, 0xcd, 0x67, 0x32, 0xf8, 0xb1, 0xc3, 0x68, 0x82, 0xa7, 0xd9, 0x3a, 0x29, 0xc1, 0xb2, 0x1f,
	0x23, 0x4d, 0x44, 0x5c, 0xb2, 0xf6, 0xad, 0x83, 0xbb, 0x4e, 0x3e, 0x24, 0x47, 0xb0, 0x25, 0x22,
	0xe6, 0xe6, 0x4c, 0x2e, 0x65, 0x2c, 0x46, 0x29, 0x4b, 0xb7, 0x14, 0x8c, 0x88, 0x88, 0xe5, 0x24,
	0x0d, 0xbd, 0x92, 0x46, 0x70, 0x7c, 0x39, 0x1e, 0xb1, 0xa8, 0x23, 0x38, 0xbe, 0x1c, 0x8d, 0x38,
	0x87, 0x77, 0xba, 0xaa, 0x1e, 0x37, 0x46, 0x2a, 0x05, 0x2f, 0xdd, 0xde, 0xb7, 0x0e, 0xd6, 0xeb,
	0x8f, 0xab, 0x05, 0xed, 0xae, 0xe6, 0x24, 0x5a, 0x89, 0xa3, 0x02, 0x9d, 0xb5, 0xee, 0xc0, 0xc8,
	0xde, 0x83, 0xdd, 0x31, 0xa9, 0x0e, 0xca, 0x8e, 0xe0, 0x12, 0xed, 0x3f, 0x75, 0x23, 0x1a, 0x8c,
	0x1d, 0x47, 0xc2, 0x7f, 0xfe, 0x14, 0x29, 0x2b, 0x6c, 0xc4, 0x2e, 0xac, 0xe8, 0x1d, 0x09, 0x99,
	0x12, 0xbf, 0xe8, 0x2c, 0xab, 0x71, 0x93, 0x91, 0x87, 0x00, 0x5e, 0xca, 0xe1, 0xb6, 0xa8, 0x6c,
	0x29, 0x9d, 0x6b, 0xce, 0x5d, 0x35, 0xf3, 0x94, 0xca, 0x16, 0x79, 0x00, 0x4b, 0x2d, 0x0c, 0x83,
	0x56, 0xa2, 0x74, 0x2d, 0x3a, 0xd9, 0x88, 0x1c, 0xa5, 0xf3, 0x69, 0xd6, 0xd2, 0x9d, 0x7d, 0xeb,
	0x60, 0xb5, 0x4e, 0xaa, 0x99, 0x75, 0x74, 0x2d, 0x5f, 0xd3, 0x84, 0x1e, 0xdf, 0x7e, 0xf5, 0xcf,
	0xa3, 0x05, 0x27, 0xc3, 0x65, 0x82, 0x86, 0x4b, 0x36, 0x82, 0x2e, 0xe1, 0xbe, 0x51, 0xfb, 0x95,
	0x88, 0xf1, 0x4c, 0x59, 0xa1, 0x40, 0xd1, 0x09, 0x80, 0x6f, 0x70, 0x4a, 0xd3, 0x6a, 0xfd, 0xbd,
	0xc2, 0x9e, 0xf7, 0x69, 0x9d, 0x81, 0x50, 0xfb, 0x21, 0xec, 0x4d, 0xc8, 0x6c, 0x0a, 0xfb, 0x4e,
	0x15, 0xe6, 0x60, 0x5b, 0xbc, 0x98, 0xaf, 0xb0, 0xe9, 0xad, 0xce, 0x52, 0x8d, 0x72, 0x99, 0x54,
	0x7f, 0x59, 0xb0, 0xae, 0x3b, 0x34, 0x87, 0xb5, 0xdf, 0x87, 0x8d, 0x29, 0xb6, 0xbe, 0x27, 0x46,
	0x1c, 0xfa, 0x05, 0xec, 0xaa, 0x6e, 0x44, 0x21, 0xf2, 0xc4, 0x0d, 0x62, 0xca, 0x13, 0x44, 0xb7,
	0xd3, 0xf5, 0x9e, 0x63, 0x2f, 0x33, 0xf6, 0x4e, 0x1f, 0x70, 0xa2, 0xd7, 0xcf, 0xd4, 0x32, 0x79,
	0x0c, 0xdb, 0x94, 0x31, 0x97, 0x0b, 0x86, 0x2e, 0xf5, 0x7d, 0xd1, 0xe5, 0x89, 0x2b, 0x78, 0xd4,
	0x53, 0x6e, 0x58, 0x71, 0x08, 0x65, 0xec, 0x07, 0xc1, 0xb0, 0xa1, 0x97, 0x4e, 0x79, 0xd4, 0xb3,
	0x4b, 0xf0, 0x60, 0x58, 0x85, 0x11, 0xf8, 0x9b, 0x05, 0xf7, 0x72, 0x0b, 0xd0, 0x36, 0x9e, 0x8b,
	0x04, 0xdf, 0xce, 0xb3, 0x8d, 0xd4, 0xb3, 0xb4, 0x8d, 0x6e, 0xc8, 0x2f, 0x84, 0x92, 0xb0, 0x5a,
	0xb7, 0x0b, 0x37, 0x5f, 0x25, 0x4c, 0x7d, 0x4d, 0xdb, 0xd8, 0xe4, 0x17, 0xc2, 0xde, 0x85, 0x9d,
	0x91, 0x52, 0x4c, 0x99, 0xff, 0xdf, 0x82, 0x52, 0xdf, 0x12, 0xe6, 0x36, 0xfb, 0x36, 0xbd, 0xcc,
	0x0a, 0xea, 0xfd, 0x00, 0x36, 0x42, 0xd9, 0xe4, 0x9e, 0xe8, 0x72, 0xf6, 0x0d, 0xa7, 0x5e, 0x84,
	0x4c, 0x95, 0xb6, 0xe2, 0x8c, 0xcd, 0x93, 0x43, 0xd8, 0x0c, 0xe5, 0x69, 0x37, 0x19, 0x02, 0xeb,
	0x96, 0x8e, 0x2f, 0x90, 0x16, 0x6c, 0x07, 0x54, 0x9e, 0xc5, 0xa1, 0x8f, 0x4d, 0x9e, 0xa6, 0x93,
	0xa8, 0x8a, 0xc9, 0x8e, 0x5e, 0xbd, 0x50, 0xf9, 0xc9, 0xa4, 0x48, 0x67, 0x32, 0x21, 0xf9, 0x05,
	0xde, 0xf5, 0xfa, 0xa7, 0xf3, 0x1c, 0xe3, 0xf0, 0x22, 0xf4, 0x69, 0x12, 0x0a, 0xad, 0xbe, 0xb4,
	0xa4, 0x12, 0x7e, 0x3e, 0xa3, 0xd5, 0xd3, 0x09, 0x9c, 0x42, 0x7a, 0xdb, 0x86, 0xfd, 0x69, 0x8d,
	0x37, 0xbb, 0xd3, 0x50, 0x1e, 0xd2, 0x98, 0xef, 0xb1, 0x17, 0x20, 0x2f, 0xd8, 0x93, 0x2d, 0xb8,
	0xa3, 0x12, 0x66, 0x06, 0xd2, 0x83, 0x6c, 0xef, 0x07, 0x29, 0x72, 0xf6, 0xfa, 0xd5, 0x32, 0x2c,
	0x3e, 0x93, 0x01, 0x11, 0xb0, 0x3a, 0x78, 0x0e, 0x3f, 0x2c, 0x54, 0x3c, 0x6c, 0xf7, 0xf2, 0x93,
	0x1b, 0x80, 0xf3, 0xc4, 0xe4, 0x12, 0xd6, 0x47, 0xfe, 0xd6, 0xaa, 0xb3, 0x68, 0x86, 0xf1, 0xe5,
	0x4f, 0x6f, 0x86, 0x37, 0x99, 0x7f, 0x85, 0x8d, 0xb1, 0x7b, 0xf7, 0x68, 0x3e, 0xae, 0x7e, 0x44,
	0xf9, 0xb3, 0x9b, 0x46, 0x0c, 0xe6, 0x1f, 0xbb, 0x5e, 0x67, 0xe6, 0x1f, 0x8d, 0x98, 0x9d, 0x7f,
	0xda, 0xb5, 0x4b, 0x62, 0x58, 0x1b, 0xba, 0x91, 0x0e, 0xe7, 0xd8, 0x3e, 0x83, 0x2e, 0x7f, 0x7c,
	0x13, 0xb4, 0xc9, 0xf9, 0xbb, 0x05, 0xdb, 0x93, 0xef, 0x97, 0x4f, 0xe6, 0xec, 0xe3, 0x70, 0x58,
	0xf9, 0xcb, 0xb7, 0x0a, 0x1b, 0xec, 0xc1, 0xd0, 0x89, 0x3a, 0x9c, 0x8f, 0x4e, 0xa3, 0x67, 0xf7,
	0x60, 0xd2, 0x51, 0x4b, 0x1d, 0x3f, 0xf2, 0x7e, 0xa9, 0xce, 0xd5, 0x4b, 0x83, 0x9f, 0xed, 0xf8,
	0xc9, 0x8f, 0x8d, 0xe3, 0xe6, 0xab, 0xab, 0x8a, 0xf5, 0xfa, 0xaa, 0x62, 0xfd, 0x7b, 0x55, 0xb1,
	0xfe, 0xb8, 0xae, 0x2c, 0xbc, 0xbe, 0xae, 0x2c, 0xfc, 0x7d, 0x5d, 0x59, 0xf8, 0xa9, 0x16, 0x84,
	0x49, 0xab, 0xeb, 0xa5, 0x6f, 0x99, 0x5a, 0xca, 0xf8, 0x91, 0x22, 0xaf, 0xe5, 0xe4, 0xb5, 0xcb,
	0x5a, 0xff, 0x55, 0xda, 0xeb, 0xa0, 0xf4, 0x96, 0xd4, 0xc3, 0xf4, 0xc9, 0x9b, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xbe, 0x56, 0x8d, 0xcf, 0x70, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	AddObserver(ctx context.Context, in *MsgAddObserver, opts ...grpc.CallOption) (*MsgAddObserverResponse, error)
	UpdateObserver(ctx context.Context, in *MsgUpdateObserver, opts ...grpc.CallOption) (*MsgUpdateObserverResponse, error)
	UpdateCoreParams(ctx context.Context, in *MsgUpdateCoreParams, opts ...grpc.CallOption) (*MsgUpdateCoreParamsResponse, error)
	RemoveCoreParams(ctx context.Context, in *MsgRemoveCoreParams, opts ...grpc.CallOption) (*MsgRemoveCoreParamsResponse, error)
	AddBlameVote(ctx context.Context, in *MsgAddBlameVote, opts ...grpc.CallOption) (*MsgAddBlameVoteResponse, error)
	UpdateCrosschainFlags(ctx context.Context, in *MsgUpdateCrosschainFlags, opts ...grpc.CallOption) (*MsgUpdateCrosschainFlagsResponse, error)
	UpdateKeygen(ctx context.Context, in *MsgUpdateKeygen, opts ...grpc.CallOption) (*MsgUpdateKeygenResponse, error)
	AddBlockHeader(ctx context.Context, in *MsgAddBlockHeader, opts ...grpc.CallOption) (*MsgAddBlockHeaderResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) AddObserver(ctx context.Context, in *MsgAddObserver, opts ...grpc.CallOption) (*MsgAddObserverResponse, error) {
	out := new(MsgAddObserverResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Msg/AddObserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateObserver(ctx context.Context, in *MsgUpdateObserver, opts ...grpc.CallOption) (*MsgUpdateObserverResponse, error) {
	out := new(MsgUpdateObserverResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Msg/UpdateObserver", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCoreParams(ctx context.Context, in *MsgUpdateCoreParams, opts ...grpc.CallOption) (*MsgUpdateCoreParamsResponse, error) {
	out := new(MsgUpdateCoreParamsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Msg/UpdateCoreParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveCoreParams(ctx context.Context, in *MsgRemoveCoreParams, opts ...grpc.CallOption) (*MsgRemoveCoreParamsResponse, error) {
	out := new(MsgRemoveCoreParamsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Msg/RemoveCoreParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBlameVote(ctx context.Context, in *MsgAddBlameVote, opts ...grpc.CallOption) (*MsgAddBlameVoteResponse, error) {
	out := new(MsgAddBlameVoteResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Msg/AddBlameVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCrosschainFlags(ctx context.Context, in *MsgUpdateCrosschainFlags, opts ...grpc.CallOption) (*MsgUpdateCrosschainFlagsResponse, error) {
	out := new(MsgUpdateCrosschainFlagsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Msg/UpdateCrosschainFlags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateKeygen(ctx context.Context, in *MsgUpdateKeygen, opts ...grpc.CallOption) (*MsgUpdateKeygenResponse, error) {
	out := new(MsgUpdateKeygenResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Msg/UpdateKeygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddBlockHeader(ctx context.Context, in *MsgAddBlockHeader, opts ...grpc.CallOption) (*MsgAddBlockHeaderResponse, error) {
	out := new(MsgAddBlockHeaderResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.observer.Msg/AddBlockHeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	AddObserver(context.Context, *MsgAddObserver) (*MsgAddObserverResponse, error)
	UpdateObserver(context.Context, *MsgUpdateObserver) (*MsgUpdateObserverResponse, error)
	UpdateCoreParams(context.Context, *MsgUpdateCoreParams) (*MsgUpdateCoreParamsResponse, error)
	RemoveCoreParams(context.Context, *MsgRemoveCoreParams) (*MsgRemoveCoreParamsResponse, error)
	AddBlameVote(context.Context, *MsgAddBlameVote) (*MsgAddBlameVoteResponse, error)
	UpdateCrosschainFlags(context.Context, *MsgUpdateCrosschainFlags) (*MsgUpdateCrosschainFlagsResponse, error)
	UpdateKeygen(context.Context, *MsgUpdateKeygen) (*MsgUpdateKeygenResponse, error)
	AddBlockHeader(context.Context, *MsgAddBlockHeader) (*MsgAddBlockHeaderResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) AddObserver(ctx context.Context, req *MsgAddObserver) (*MsgAddObserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddObserver not implemented")
}
func (*UnimplementedMsgServer) UpdateObserver(ctx context.Context, req *MsgUpdateObserver) (*MsgUpdateObserverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateObserver not implemented")
}
func (*UnimplementedMsgServer) UpdateCoreParams(ctx context.Context, req *MsgUpdateCoreParams) (*MsgUpdateCoreParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCoreParams not implemented")
}
func (*UnimplementedMsgServer) RemoveCoreParams(ctx context.Context, req *MsgRemoveCoreParams) (*MsgRemoveCoreParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveCoreParams not implemented")
}
func (*UnimplementedMsgServer) AddBlameVote(ctx context.Context, req *MsgAddBlameVote) (*MsgAddBlameVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlameVote not implemented")
}
func (*UnimplementedMsgServer) UpdateCrosschainFlags(ctx context.Context, req *MsgUpdateCrosschainFlags) (*MsgUpdateCrosschainFlagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCrosschainFlags not implemented")
}
func (*UnimplementedMsgServer) UpdateKeygen(ctx context.Context, req *MsgUpdateKeygen) (*MsgUpdateKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateKeygen not implemented")
}
func (*UnimplementedMsgServer) AddBlockHeader(ctx context.Context, req *MsgAddBlockHeader) (*MsgAddBlockHeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlockHeader not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_AddObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddObserver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Msg/AddObserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddObserver(ctx, req.(*MsgAddObserver))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateObserver_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateObserver)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateObserver(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Msg/UpdateObserver",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateObserver(ctx, req.(*MsgUpdateObserver))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCoreParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCoreParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCoreParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Msg/UpdateCoreParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCoreParams(ctx, req.(*MsgUpdateCoreParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveCoreParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveCoreParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveCoreParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Msg/RemoveCoreParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveCoreParams(ctx, req.(*MsgRemoveCoreParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBlameVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBlameVote)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBlameVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Msg/AddBlameVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBlameVote(ctx, req.(*MsgAddBlameVote))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCrosschainFlags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCrosschainFlags)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCrosschainFlags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Msg/UpdateCrosschainFlags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCrosschainFlags(ctx, req.(*MsgUpdateCrosschainFlags))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateKeygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateKeygen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateKeygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Msg/UpdateKeygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateKeygen(ctx, req.(*MsgUpdateKeygen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddBlockHeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddBlockHeader)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddBlockHeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.observer.Msg/AddBlockHeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddBlockHeader(ctx, req.(*MsgAddBlockHeader))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.observer.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddObserver",
			Handler:    _Msg_AddObserver_Handler,
		},
		{
			MethodName: "UpdateObserver",
			Handler:    _Msg_UpdateObserver_Handler,
		},
		{
			MethodName: "UpdateCoreParams",
			Handler:    _Msg_UpdateCoreParams_Handler,
		},
		{
			MethodName: "RemoveCoreParams",
			Handler:    _Msg_RemoveCoreParams_Handler,
		},
		{
			MethodName: "AddBlameVote",
			Handler:    _Msg_AddBlameVote_Handler,
		},
		{
			MethodName: "UpdateCrosschainFlags",
			Handler:    _Msg_UpdateCrosschainFlags_Handler,
		},
		{
			MethodName: "UpdateKeygen",
			Handler:    _Msg_UpdateKeygen_Handler,
		},
		{
			MethodName: "AddBlockHeader",
			Handler:    _Msg_AddBlockHeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "observer/tx.proto",
}

func (m *MsgUpdateObserver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateObserver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateObserver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateReason != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.UpdateReason))
		i--
		dAtA[i] = 0x20
	}
	if len(m.NewObserverAddress) > 0 {
		i -= len(m.NewObserverAddress)
		copy(dAtA[i:], m.NewObserverAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.NewObserverAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.OldObserverAddress) > 0 {
		i -= len(m.OldObserverAddress)
		copy(dAtA[i:], m.OldObserverAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OldObserverAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateObserverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateObserverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateObserverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddBlockHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBlockHeader) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBlockHeader) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Header.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.Height != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x20
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddBlockHeaderResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBlockHeaderResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBlockHeaderResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCoreParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCoreParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCoreParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CoreParams != nil {
		{
			size, err := m.CoreParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCoreParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCoreParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCoreParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCoreParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCoreParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCoreParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveCoreParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveCoreParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveCoreParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddObserver) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddObserver) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddObserver) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AddNodeAccountOnly {
		i--
		if m.AddNodeAccountOnly {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if len(m.ZetaclientGranteePubkey) > 0 {
		i -= len(m.ZetaclientGranteePubkey)
		copy(dAtA[i:], m.ZetaclientGranteePubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ZetaclientGranteePubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ObserverAddress) > 0 {
		i -= len(m.ObserverAddress)
		copy(dAtA[i:], m.ObserverAddress)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObserverAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddObserverResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddObserverResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddObserverResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddBlameVote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBlameVote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBlameVote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlameInfo != nil {
		{
			size, err := m.BlameInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.ChainId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddBlameVoteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddBlameVoteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddBlameVoteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCrosschainFlags) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCrosschainFlags) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCrosschainFlags) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeaderVerificationFlags != nil {
		{
			size, err := m.BlockHeaderVerificationFlags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.GasPriceIncreaseFlags != nil {
		{
			size, err := m.GasPriceIncreaseFlags.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.IsOutboundEnabled {
		i--
		if m.IsOutboundEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.IsInboundEnabled {
		i--
		if m.IsInboundEnabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCrosschainFlagsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCrosschainFlagsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCrosschainFlagsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateKeygen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateKeygen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateKeygen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Block != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Block))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgUpdateObserver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.OldObserverAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.NewObserverAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.UpdateReason != 0 {
		n += 1 + sovTx(uint64(m.UpdateReason))
	}
	return n
}

func (m *MsgUpdateObserverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddBlockHeader) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovTx(uint64(m.Height))
	}
	l = m.Header.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgAddBlockHeaderResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCoreParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CoreParams != nil {
		l = m.CoreParams.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCoreParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveCoreParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	return n
}

func (m *MsgRemoveCoreParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddObserver) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObserverAddress)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ZetaclientGranteePubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.AddNodeAccountOnly {
		n += 2
	}
	return n
}

func (m *MsgAddObserverResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddBlameVote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTx(uint64(m.ChainId))
	}
	if m.BlameInfo != nil {
		l = m.BlameInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddBlameVoteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCrosschainFlags) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsInboundEnabled {
		n += 2
	}
	if m.IsOutboundEnabled {
		n += 2
	}
	if m.GasPriceIncreaseFlags != nil {
		l = m.GasPriceIncreaseFlags.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockHeaderVerificationFlags != nil {
		l = m.BlockHeaderVerificationFlags.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCrosschainFlagsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateKeygen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Block != 0 {
		n += 1 + sovTx(uint64(m.Block))
	}
	return n
}

func (m *MsgUpdateKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgUpdateObserver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateObserver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateObserver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldObserverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldObserverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewObserverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewObserverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateReason", wireType)
			}
			m.UpdateReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdateReason |= ObserverUpdateReason(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateObserverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateObserverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateObserverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBlockHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBlockHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBlockHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Header", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Header.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBlockHeaderResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBlockHeaderResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBlockHeaderResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCoreParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCoreParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCoreParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoreParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CoreParams == nil {
				m.CoreParams = &CoreParams{}
			}
			if err := m.CoreParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCoreParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCoreParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCoreParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCoreParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCoreParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCoreParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveCoreParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveCoreParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveCoreParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddObserver) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddObserver: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddObserver: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObserverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObserverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaclientGranteePubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZetaclientGranteePubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddNodeAccountOnly", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AddNodeAccountOnly = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddObserverResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddObserverResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddObserverResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBlameVote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBlameVote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBlameVote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlameInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlameInfo == nil {
				m.BlameInfo = &Blame{}
			}
			if err := m.BlameInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddBlameVoteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddBlameVoteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddBlameVoteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCrosschainFlags) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCrosschainFlags: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCrosschainFlags: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsInboundEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsInboundEnabled = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOutboundEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOutboundEnabled = bool(v != 0)
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPriceIncreaseFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPriceIncreaseFlags == nil {
				m.GasPriceIncreaseFlags = &GasPriceIncreaseFlags{}
			}
			if err := m.GasPriceIncreaseFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeaderVerificationFlags", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BlockHeaderVerificationFlags == nil {
				m.BlockHeaderVerificationFlags = &BlockHeaderVerificationFlags{}
			}
			if err := m.BlockHeaderVerificationFlags.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCrosschainFlagsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCrosschainFlagsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCrosschainFlagsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateKeygen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateKeygen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateKeygen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Block", wireType)
			}
			m.Block = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Block |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
