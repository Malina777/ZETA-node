// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosschain/tx_queue.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PendingTxQueue struct {
	ChainId uint64 `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Count   uint64 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
	Head    string `protobuf:"bytes,3,opt,name=head,proto3" json:"head,omitempty"`
	Tail    string `protobuf:"bytes,4,opt,name=tail,proto3" json:"tail,omitempty"`
}

func (m *PendingTxQueue) Reset()         { *m = PendingTxQueue{} }
func (m *PendingTxQueue) String() string { return proto.CompactTextString(m) }
func (*PendingTxQueue) ProtoMessage()    {}
func (*PendingTxQueue) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9f7594128c4cb0, []int{0}
}
func (m *PendingTxQueue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingTxQueue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingTxQueue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingTxQueue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTxQueue.Merge(m, src)
}
func (m *PendingTxQueue) XXX_Size() int {
	return m.Size()
}
func (m *PendingTxQueue) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTxQueue.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTxQueue proto.InternalMessageInfo

func (m *PendingTxQueue) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PendingTxQueue) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *PendingTxQueue) GetHead() string {
	if m != nil {
		return m.Head
	}
	return ""
}

func (m *PendingTxQueue) GetTail() string {
	if m != nil {
		return m.Tail
	}
	return ""
}

type PendingTx struct {
	Last      string `protobuf:"bytes,1,opt,name=last,proto3" json:"last,omitempty"`
	Next      string `protobuf:"bytes,2,opt,name=next,proto3" json:"next,omitempty"`
	CctxIndex string `protobuf:"bytes,3,opt,name=cctxIndex,proto3" json:"cctxIndex,omitempty"`
	ChainId   uint64 `protobuf:"varint,4,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Nonce     uint64 `protobuf:"varint,5,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *PendingTx) Reset()         { *m = PendingTx{} }
func (m *PendingTx) String() string { return proto.CompactTextString(m) }
func (*PendingTx) ProtoMessage()    {}
func (*PendingTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_1d9f7594128c4cb0, []int{1}
}
func (m *PendingTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PendingTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PendingTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PendingTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PendingTx.Merge(m, src)
}
func (m *PendingTx) XXX_Size() int {
	return m.Size()
}
func (m *PendingTx) XXX_DiscardUnknown() {
	xxx_messageInfo_PendingTx.DiscardUnknown(m)
}

var xxx_messageInfo_PendingTx proto.InternalMessageInfo

func (m *PendingTx) GetLast() string {
	if m != nil {
		return m.Last
	}
	return ""
}

func (m *PendingTx) GetNext() string {
	if m != nil {
		return m.Next
	}
	return ""
}

func (m *PendingTx) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func (m *PendingTx) GetChainId() uint64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func (m *PendingTx) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func init() {
	proto.RegisterType((*PendingTxQueue)(nil), "zetachain.zetacore.crosschain.PendingTxQueue")
	proto.RegisterType((*PendingTx)(nil), "zetachain.zetacore.crosschain.PendingTx")
}

func init() { proto.RegisterFile("crosschain/tx_queue.proto", fileDescriptor_1d9f7594128c4cb0) }

var fileDescriptor_1d9f7594128c4cb0 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x48, 0x81, 0x78, 0x60, 0xb0, 0x18, 0x52, 0x09, 0xac, 0xaa, 0x53, 0x17, 0x12,
	0x21, 0xde, 0x80, 0xad, 0x62, 0x81, 0x88, 0x89, 0xa5, 0x72, 0xed, 0x53, 0x63, 0xa9, 0xd8, 0x25,
	0x71, 0x24, 0xc3, 0xc8, 0x13, 0xf0, 0x58, 0x8c, 0x1d, 0x19, 0x51, 0xf2, 0x22, 0xc8, 0x67, 0xa0,
	0x20, 0xb6, 0xff, 0xfe, 0x3b, 0xfb, 0xff, 0xf5, 0xd1, 0xb1, 0x6c, 0x6c, 0xdb, 0xca, 0x5a, 0x68,
	0x53, 0x3a, 0xbf, 0x78, 0xec, 0xa0, 0x83, 0x62, 0xd3, 0x58, 0x67, 0xd9, 0xd9, 0x33, 0x38, 0x81,
	0x9b, 0x02, 0x95, 0x6d, 0xa0, 0xd8, 0x5d, 0x4f, 0x35, 0x3d, 0xbe, 0x01, 0xa3, 0xb4, 0x59, 0xdd,
	0xf9, 0xdb, 0xf0, 0x8c, 0x8d, 0xe9, 0x11, 0xae, 0x16, 0x5a, 0xe5, 0x64, 0x42, 0x66, 0x69, 0x75,
	0x88, 0xf3, 0x5c, 0xb1, 0x13, 0x3a, 0x92, 0xb6, 0x33, 0x2e, 0xdf, 0x43, 0x3f, 0x0e, 0x8c, 0xd1,
	0xb4, 0x06, 0xa1, 0xf2, 0xfd, 0x09, 0x99, 0x65, 0x15, 0xea, 0xe0, 0x39, 0xa1, 0xd7, 0x79, 0x1a,
	0xbd, 0xa0, 0xa7, 0x2f, 0x84, 0x66, 0x3f, 0x59, 0xe1, 0x62, 0x2d, 0x5a, 0x87, 0x11, 0x59, 0x85,
	0x3a, 0x78, 0x06, 0x7c, 0xfc, 0x3e, 0xab, 0x50, 0xb3, 0x53, 0x9a, 0x49, 0xe9, 0xfc, 0xdc, 0x28,
	0xf0, 0x5f, 0x11, 0x3b, 0xe3, 0x4f, 0xd9, 0xf4, 0x5f, 0x59, 0x63, 0x8d, 0x84, 0x7c, 0x14, 0xcb,
	0xe2, 0x70, 0x75, 0xfd, 0xd6, 0x73, 0xb2, 0xed, 0x39, 0xf9, 0xe8, 0x39, 0x79, 0x1d, 0x78, 0xb2,
	0x1d, 0x78, 0xf2, 0x3e, 0xf0, 0xe4, 0xfe, 0x62, 0xa5, 0x5d, 0xdd, 0x2d, 0x0b, 0x69, 0x1f, 0xca,
	0x40, 0xea, 0x3c, 0xe2, 0xfc, 0x86, 0x56, 0xfa, 0xf2, 0x37, 0xe4, 0xa7, 0x0d, 0xb4, 0xcb, 0x03,
	0x44, 0x7c, 0xf9, 0x19, 0x00, 0x00, 0xff, 0xff, 0xbd, 0xc4, 0x01, 0xc7, 0x7f, 0x01, 0x00, 0x00,
}

func (m *PendingTxQueue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingTxQueue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingTxQueue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tail) > 0 {
		i -= len(m.Tail)
		copy(dAtA[i:], m.Tail)
		i = encodeVarintTxQueue(dAtA, i, uint64(len(m.Tail)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Head) > 0 {
		i -= len(m.Head)
		copy(dAtA[i:], m.Head)
		i = encodeVarintTxQueue(dAtA, i, uint64(len(m.Head)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Count != 0 {
		i = encodeVarintTxQueue(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainId != 0 {
		i = encodeVarintTxQueue(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PendingTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PendingTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PendingTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTxQueue(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x28
	}
	if m.ChainId != 0 {
		i = encodeVarintTxQueue(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintTxQueue(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Next) > 0 {
		i -= len(m.Next)
		copy(dAtA[i:], m.Next)
		i = encodeVarintTxQueue(dAtA, i, uint64(len(m.Next)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Last) > 0 {
		i -= len(m.Last)
		copy(dAtA[i:], m.Last)
		i = encodeVarintTxQueue(dAtA, i, uint64(len(m.Last)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxQueue(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxQueue(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PendingTxQueue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainId != 0 {
		n += 1 + sovTxQueue(uint64(m.ChainId))
	}
	if m.Count != 0 {
		n += 1 + sovTxQueue(uint64(m.Count))
	}
	l = len(m.Head)
	if l > 0 {
		n += 1 + l + sovTxQueue(uint64(l))
	}
	l = len(m.Tail)
	if l > 0 {
		n += 1 + l + sovTxQueue(uint64(l))
	}
	return n
}

func (m *PendingTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Last)
	if l > 0 {
		n += 1 + l + sovTxQueue(uint64(l))
	}
	l = len(m.Next)
	if l > 0 {
		n += 1 + l + sovTxQueue(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovTxQueue(uint64(l))
	}
	if m.ChainId != 0 {
		n += 1 + sovTxQueue(uint64(m.ChainId))
	}
	if m.Nonce != 0 {
		n += 1 + sovTxQueue(uint64(m.Nonce))
	}
	return n
}

func sovTxQueue(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxQueue(x uint64) (n int) {
	return sovTxQueue(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PendingTxQueue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingTxQueue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingTxQueue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Head", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Head = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PendingTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxQueue
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PendingTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PendingTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Last = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Next", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Next = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxQueue
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxQueue
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTxQueue(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxQueue
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxQueue(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxQueue
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxQueue
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxQueue
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxQueue
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxQueue
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxQueue        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxQueue          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxQueue = fmt.Errorf("proto: unexpected end of group")
)
