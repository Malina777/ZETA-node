// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosschain/cross_chain_tx_v14.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/zeta-chain/zetacore/common"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type InboundTxParamsV14 struct {
	Sender                          string                                  `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChainId                   int64                                   `protobuf:"varint,2,opt,name=sender_chain_id,json=senderChainId,proto3" json:"sender_chain_id,omitempty"`
	TxOrigin                        string                                  `protobuf:"bytes,3,opt,name=tx_origin,json=txOrigin,proto3" json:"tx_origin,omitempty"`
	CoinType                        common.CoinType                         `protobuf:"varint,4,opt,name=coin_type,json=coinType,proto3,enum=common.CoinType" json:"coin_type,omitempty"`
	Asset                           string                                  `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	Amount                          github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,6,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	InboundTxObservedHash           string                                  `protobuf:"bytes,7,opt,name=inbound_tx_observed_hash,json=inboundTxObservedHash,proto3" json:"inbound_tx_observed_hash,omitempty"`
	InboundTxObservedExternalHeight uint64                                  `protobuf:"varint,8,opt,name=inbound_tx_observed_external_height,json=inboundTxObservedExternalHeight,proto3" json:"inbound_tx_observed_external_height,omitempty"`
	InboundTxBallotIndex            string                                  `protobuf:"bytes,9,opt,name=inbound_tx_ballot_index,json=inboundTxBallotIndex,proto3" json:"inbound_tx_ballot_index,omitempty"`
	InboundTxFinalizedZetaHeight    uint64                                  `protobuf:"varint,10,opt,name=inbound_tx_finalized_zeta_height,json=inboundTxFinalizedZetaHeight,proto3" json:"inbound_tx_finalized_zeta_height,omitempty"`
	TxFinalizationStatus            TxFinalizationStatus                    `protobuf:"varint,11,opt,name=tx_finalization_status,json=txFinalizationStatus,proto3,enum=zetachain.zetacore.crosschain.TxFinalizationStatus" json:"tx_finalization_status,omitempty"`
}

func (m *InboundTxParamsV14) Reset()         { *m = InboundTxParamsV14{} }
func (m *InboundTxParamsV14) String() string { return proto.CompactTextString(m) }
func (*InboundTxParamsV14) ProtoMessage()    {}
func (*InboundTxParamsV14) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a400eff2bb43434, []int{0}
}
func (m *InboundTxParamsV14) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InboundTxParamsV14) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InboundTxParamsV14.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InboundTxParamsV14) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InboundTxParamsV14.Merge(m, src)
}
func (m *InboundTxParamsV14) XXX_Size() int {
	return m.Size()
}
func (m *InboundTxParamsV14) XXX_DiscardUnknown() {
	xxx_messageInfo_InboundTxParamsV14.DiscardUnknown(m)
}

var xxx_messageInfo_InboundTxParamsV14 proto.InternalMessageInfo

func (m *InboundTxParamsV14) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InboundTxParamsV14) GetSenderChainId() int64 {
	if m != nil {
		return m.SenderChainId
	}
	return 0
}

func (m *InboundTxParamsV14) GetTxOrigin() string {
	if m != nil {
		return m.TxOrigin
	}
	return ""
}

func (m *InboundTxParamsV14) GetCoinType() common.CoinType {
	if m != nil {
		return m.CoinType
	}
	return common.CoinType_Zeta
}

func (m *InboundTxParamsV14) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *InboundTxParamsV14) GetInboundTxObservedHash() string {
	if m != nil {
		return m.InboundTxObservedHash
	}
	return ""
}

func (m *InboundTxParamsV14) GetInboundTxObservedExternalHeight() uint64 {
	if m != nil {
		return m.InboundTxObservedExternalHeight
	}
	return 0
}

func (m *InboundTxParamsV14) GetInboundTxBallotIndex() string {
	if m != nil {
		return m.InboundTxBallotIndex
	}
	return ""
}

func (m *InboundTxParamsV14) GetInboundTxFinalizedZetaHeight() uint64 {
	if m != nil {
		return m.InboundTxFinalizedZetaHeight
	}
	return 0
}

func (m *InboundTxParamsV14) GetTxFinalizationStatus() TxFinalizationStatus {
	if m != nil {
		return m.TxFinalizationStatus
	}
	return TxFinalizationStatus_NotFinalized
}

type OutboundTxParamsV14 struct {
	Receiver           string                                  `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChainId    int64                                   `protobuf:"varint,2,opt,name=receiver_chainId,json=receiverChainId,proto3" json:"receiver_chainId,omitempty"`
	CoinType           common.CoinType                         `protobuf:"varint,3,opt,name=coin_type,json=coinType,proto3,enum=common.CoinType" json:"coin_type,omitempty"`
	Amount             github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"amount"`
	OutboundTxTssNonce uint64                                  `protobuf:"varint,5,opt,name=outbound_tx_tss_nonce,json=outboundTxTssNonce,proto3" json:"outbound_tx_tss_nonce,omitempty"`
	OutboundTxGasLimit uint64                                  `protobuf:"varint,6,opt,name=outbound_tx_gas_limit,json=outboundTxGasLimit,proto3" json:"outbound_tx_gas_limit,omitempty"`
	OutboundTxGasPrice string                                  `protobuf:"bytes,7,opt,name=outbound_tx_gas_price,json=outboundTxGasPrice,proto3" json:"outbound_tx_gas_price,omitempty"`
	// the above are commands for zetaclients
	// the following fields are used when the outbound tx is mined
	OutboundTxHash                   string                                 `protobuf:"bytes,8,opt,name=outbound_tx_hash,json=outboundTxHash,proto3" json:"outbound_tx_hash,omitempty"`
	OutboundTxBallotIndex            string                                 `protobuf:"bytes,9,opt,name=outbound_tx_ballot_index,json=outboundTxBallotIndex,proto3" json:"outbound_tx_ballot_index,omitempty"`
	OutboundTxObservedExternalHeight uint64                                 `protobuf:"varint,10,opt,name=outbound_tx_observed_external_height,json=outboundTxObservedExternalHeight,proto3" json:"outbound_tx_observed_external_height,omitempty"`
	OutboundTxGasUsed                uint64                                 `protobuf:"varint,20,opt,name=outbound_tx_gas_used,json=outboundTxGasUsed,proto3" json:"outbound_tx_gas_used,omitempty"`
	OutboundTxEffectiveGasPrice      github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,21,opt,name=outbound_tx_effective_gas_price,json=outboundTxEffectiveGasPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"outbound_tx_effective_gas_price"`
	OutboundTxEffectiveGasLimit      uint64                                 `protobuf:"varint,22,opt,name=outbound_tx_effective_gas_limit,json=outboundTxEffectiveGasLimit,proto3" json:"outbound_tx_effective_gas_limit,omitempty"`
	TssPubkey                        string                                 `protobuf:"bytes,11,opt,name=tss_pubkey,json=tssPubkey,proto3" json:"tss_pubkey,omitempty"`
	TxFinalizationStatus             TxFinalizationStatus                   `protobuf:"varint,12,opt,name=tx_finalization_status,json=txFinalizationStatus,proto3,enum=zetachain.zetacore.crosschain.TxFinalizationStatus" json:"tx_finalization_status,omitempty"`
}

func (m *OutboundTxParamsV14) Reset()         { *m = OutboundTxParamsV14{} }
func (m *OutboundTxParamsV14) String() string { return proto.CompactTextString(m) }
func (*OutboundTxParamsV14) ProtoMessage()    {}
func (*OutboundTxParamsV14) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a400eff2bb43434, []int{1}
}
func (m *OutboundTxParamsV14) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutboundTxParamsV14) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutboundTxParamsV14.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutboundTxParamsV14) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutboundTxParamsV14.Merge(m, src)
}
func (m *OutboundTxParamsV14) XXX_Size() int {
	return m.Size()
}
func (m *OutboundTxParamsV14) XXX_DiscardUnknown() {
	xxx_messageInfo_OutboundTxParamsV14.DiscardUnknown(m)
}

var xxx_messageInfo_OutboundTxParamsV14 proto.InternalMessageInfo

func (m *OutboundTxParamsV14) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *OutboundTxParamsV14) GetReceiverChainId() int64 {
	if m != nil {
		return m.ReceiverChainId
	}
	return 0
}

func (m *OutboundTxParamsV14) GetCoinType() common.CoinType {
	if m != nil {
		return m.CoinType
	}
	return common.CoinType_Zeta
}

func (m *OutboundTxParamsV14) GetOutboundTxTssNonce() uint64 {
	if m != nil {
		return m.OutboundTxTssNonce
	}
	return 0
}

func (m *OutboundTxParamsV14) GetOutboundTxGasLimit() uint64 {
	if m != nil {
		return m.OutboundTxGasLimit
	}
	return 0
}

func (m *OutboundTxParamsV14) GetOutboundTxGasPrice() string {
	if m != nil {
		return m.OutboundTxGasPrice
	}
	return ""
}

func (m *OutboundTxParamsV14) GetOutboundTxHash() string {
	if m != nil {
		return m.OutboundTxHash
	}
	return ""
}

func (m *OutboundTxParamsV14) GetOutboundTxBallotIndex() string {
	if m != nil {
		return m.OutboundTxBallotIndex
	}
	return ""
}

func (m *OutboundTxParamsV14) GetOutboundTxObservedExternalHeight() uint64 {
	if m != nil {
		return m.OutboundTxObservedExternalHeight
	}
	return 0
}

func (m *OutboundTxParamsV14) GetOutboundTxGasUsed() uint64 {
	if m != nil {
		return m.OutboundTxGasUsed
	}
	return 0
}

func (m *OutboundTxParamsV14) GetOutboundTxEffectiveGasLimit() uint64 {
	if m != nil {
		return m.OutboundTxEffectiveGasLimit
	}
	return 0
}

func (m *OutboundTxParamsV14) GetTssPubkey() string {
	if m != nil {
		return m.TssPubkey
	}
	return ""
}

func (m *OutboundTxParamsV14) GetTxFinalizationStatus() TxFinalizationStatus {
	if m != nil {
		return m.TxFinalizationStatus
	}
	return TxFinalizationStatus_NotFinalized
}

type CrossChainTxV14 struct {
	Creator          string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index            string                                  `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ZetaFees         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=zeta_fees,json=zetaFees,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"zeta_fees" yaml:"zeta_fees"`
	RelayedMessage   string                                  `protobuf:"bytes,6,opt,name=relayed_message,json=relayedMessage,proto3" json:"relayed_message,omitempty"`
	CctxStatus       *Status                                 `protobuf:"bytes,8,opt,name=cctx_status,json=cctxStatus,proto3" json:"cctx_status,omitempty"`
	InboundTxParams  *InboundTxParamsV14                     `protobuf:"bytes,9,opt,name=inbound_tx_params,json=inboundTxParams,proto3" json:"inbound_tx_params,omitempty"`
	OutboundTxParams []*OutboundTxParamsV14                  `protobuf:"bytes,10,rep,name=outbound_tx_params,json=outboundTxParams,proto3" json:"outbound_tx_params,omitempty"`
}

func (m *CrossChainTxV14) Reset()         { *m = CrossChainTxV14{} }
func (m *CrossChainTxV14) String() string { return proto.CompactTextString(m) }
func (*CrossChainTxV14) ProtoMessage()    {}
func (*CrossChainTxV14) Descriptor() ([]byte, []int) {
	return fileDescriptor_9a400eff2bb43434, []int{2}
}
func (m *CrossChainTxV14) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTxV14) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTxV14.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTxV14) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTxV14.Merge(m, src)
}
func (m *CrossChainTxV14) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTxV14) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTxV14.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTxV14 proto.InternalMessageInfo

func (m *CrossChainTxV14) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CrossChainTxV14) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CrossChainTxV14) GetRelayedMessage() string {
	if m != nil {
		return m.RelayedMessage
	}
	return ""
}

func (m *CrossChainTxV14) GetCctxStatus() *Status {
	if m != nil {
		return m.CctxStatus
	}
	return nil
}

func (m *CrossChainTxV14) GetInboundTxParams() *InboundTxParamsV14 {
	if m != nil {
		return m.InboundTxParams
	}
	return nil
}

func (m *CrossChainTxV14) GetOutboundTxParams() []*OutboundTxParamsV14 {
	if m != nil {
		return m.OutboundTxParams
	}
	return nil
}

func init() {
	proto.RegisterType((*InboundTxParamsV14)(nil), "zetachain.zetacore.crosschain.InboundTxParamsV14")
	proto.RegisterType((*OutboundTxParamsV14)(nil), "zetachain.zetacore.crosschain.OutboundTxParamsV14")
	proto.RegisterType((*CrossChainTxV14)(nil), "zetachain.zetacore.crosschain.CrossChainTxV14")
}

func init() {
	proto.RegisterFile("crosschain/cross_chain_tx_v14.proto", fileDescriptor_9a400eff2bb43434)
}

var fileDescriptor_9a400eff2bb43434 = []byte{
	// 913 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x56, 0x51, 0x6f, 0x1a, 0x47,
	0x10, 0x36, 0x81, 0xd8, 0x30, 0xb4, 0x86, 0x6c, 0xb0, 0x7b, 0x72, 0x1a, 0x40, 0x4e, 0x9b, 0xd0,
	0x07, 0x73, 0x82, 0xa4, 0x8a, 0xd4, 0x47, 0xbb, 0x71, 0x82, 0x9a, 0xc6, 0xd6, 0xd5, 0xe9, 0x43,
	0xa4, 0xea, 0xb2, 0xdc, 0x8d, 0x61, 0x15, 0xb8, 0x45, 0xb7, 0x8b, 0x75, 0xe4, 0x57, 0xf4, 0xad,
	0x7f, 0x29, 0x8f, 0x79, 0xa9, 0x54, 0xf5, 0xc1, 0xaa, 0xec, 0x3f, 0x50, 0xf5, 0x17, 0x54, 0xbb,
	0x7b, 0x77, 0x1c, 0x36, 0xb6, 0x5b, 0xb5, 0x4f, 0xcc, 0xce, 0xce, 0xf7, 0xed, 0xee, 0xcc, 0x37,
	0xc3, 0xc1, 0x03, 0x2f, 0xe4, 0x42, 0x78, 0x43, 0xca, 0x02, 0x5b, 0x9b, 0xae, 0xb6, 0x5d, 0x19,
	0xb9, 0x27, 0x9d, 0x27, 0xed, 0x49, 0xc8, 0x25, 0x27, 0xf7, 0xdf, 0xa3, 0xa4, 0xda, 0xdf, 0xd6,
	0x16, 0x0f, 0xb1, 0x3d, 0xc7, 0x6d, 0xdd, 0xf5, 0xf8, 0x78, 0xcc, 0x03, 0xdb, 0xfc, 0x18, 0xcc,
	0x56, 0xe3, 0x4a, 0xe2, 0x38, 0xa0, 0x36, 0xe0, 0x03, 0xae, 0x4d, 0x5b, 0x59, 0xc6, 0xbb, 0xfd,
	0x67, 0x01, 0x48, 0x2f, 0xe8, 0xf3, 0x69, 0xe0, 0x1f, 0x45, 0x87, 0x34, 0xa4, 0x63, 0xf1, 0x63,
	0xe7, 0x09, 0xd9, 0x84, 0x55, 0x81, 0x81, 0x8f, 0xa1, 0x95, 0x6b, 0xe6, 0x5a, 0x25, 0x27, 0x5e,
	0x91, 0x87, 0x50, 0x31, 0x56, 0xcc, 0xce, 0x7c, 0xeb, 0x56, 0x33, 0xd7, 0xca, 0x3b, 0x9f, 0x1a,
	0xf7, 0x9e, 0xf2, 0xf6, 0x7c, 0x72, 0x0f, 0x4a, 0x32, 0x72, 0x79, 0xc8, 0x06, 0x2c, 0xb0, 0xf2,
	0x9a, 0xa2, 0x28, 0xa3, 0x03, 0xbd, 0x26, 0x3b, 0x50, 0xf2, 0xb8, 0xba, 0xda, 0x6c, 0x82, 0x56,
	0xa1, 0x99, 0x6b, 0xad, 0x77, 0xab, 0xed, 0xf8, 0x31, 0x7b, 0x9c, 0x05, 0x47, 0xb3, 0x09, 0x3a,
	0x45, 0x2f, 0xb6, 0x48, 0x0d, 0x6e, 0x53, 0x21, 0x50, 0x5a, 0xb7, 0x35, 0x8f, 0x59, 0x90, 0xe7,
	0xb0, 0x4a, 0xc7, 0x7c, 0x1a, 0x48, 0x6b, 0x55, 0xb9, 0x77, 0xed, 0x0f, 0xa7, 0x8d, 0x95, 0xdf,
	0x4f, 0x1b, 0x8f, 0x06, 0x4c, 0x0e, 0xa7, 0x7d, 0xc5, 0x67, 0x7b, 0x5c, 0x8c, 0xb9, 0x88, 0x7f,
	0x76, 0x84, 0xff, 0xce, 0x56, 0x47, 0x8a, 0xf6, 0x6b, 0x16, 0x48, 0x27, 0x86, 0x93, 0xa7, 0x60,
	0x31, 0x93, 0x00, 0x55, 0x04, 0xde, 0x17, 0x18, 0x9e, 0xa0, 0xef, 0x0e, 0xa9, 0x18, 0x5a, 0x6b,
	0xfa, 0xc4, 0x0d, 0x96, 0x24, 0xe8, 0x20, 0xde, 0x7d, 0x41, 0xc5, 0x90, 0xbc, 0x84, 0x07, 0xcb,
	0x80, 0x18, 0x49, 0x0c, 0x03, 0x3a, 0x72, 0x87, 0xc8, 0x06, 0x43, 0x69, 0x15, 0x9b, 0xb9, 0x56,
	0xc1, 0x69, 0x5c, 0xe2, 0x78, 0x16, 0xc7, 0xbd, 0xd0, 0x61, 0xe4, 0x6b, 0xf8, 0x2c, 0xc3, 0xd6,
	0xa7, 0xa3, 0x11, 0x97, 0x2e, 0x0b, 0x7c, 0x8c, 0xac, 0x92, 0xbe, 0x45, 0x2d, 0x65, 0xd8, 0xd5,
	0x9b, 0x3d, 0xb5, 0x47, 0xf6, 0xa1, 0x99, 0x81, 0x1d, 0xb3, 0x80, 0x8e, 0xd8, 0x7b, 0xf4, 0x5d,
	0xa5, 0x9b, 0xe4, 0x06, 0xa0, 0x6f, 0xf0, 0x79, 0x8a, 0xdf, 0x4f, 0xa2, 0xde, 0xa0, 0xa4, 0xf1,
	0xf1, 0x0c, 0x36, 0xe7, 0x78, 0x2a, 0x19, 0x0f, 0x5c, 0x21, 0xa9, 0x9c, 0x0a, 0xab, 0xac, 0x0b,
	0xf4, 0xb8, 0x7d, 0xad, 0x26, 0xdb, 0x29, 0xab, 0xc6, 0xfe, 0xa0, 0xa1, 0x4e, 0x4d, 0x2e, 0xf1,
	0x6e, 0xff, 0xb2, 0x06, 0x77, 0x0f, 0xa6, 0xf2, 0x92, 0xe6, 0xb6, 0xa0, 0x18, 0xa2, 0x87, 0xec,
	0x24, 0x55, 0x5d, 0xba, 0x26, 0x5f, 0x41, 0x35, 0xb1, 0x8d, 0xf2, 0x7a, 0x89, 0xf0, 0x2a, 0x89,
	0x3f, 0x91, 0xde, 0x82, 0xba, 0xf2, 0x37, 0xaa, 0x6b, 0xae, 0xa3, 0xc2, 0x7f, 0xd3, 0x51, 0x07,
	0x36, 0x78, 0xfc, 0x2a, 0x55, 0x0a, 0x29, 0x84, 0x1b, 0xf0, 0xc0, 0x43, 0x2d, 0xdb, 0x82, 0x43,
	0x78, 0xfa, 0xe4, 0x23, 0x21, 0x5e, 0xa9, 0x9d, 0x8b, 0x90, 0x01, 0x15, 0xee, 0x88, 0x8d, 0x99,
	0x91, 0xf4, 0x02, 0xe4, 0x39, 0x15, 0x2f, 0xd5, 0xce, 0x32, 0xc8, 0x24, 0x64, 0x1e, 0xc6, 0x52,
	0x5d, 0x84, 0x1c, 0xaa, 0x1d, 0xd2, 0x82, 0x6a, 0x16, 0xa2, 0x85, 0x5d, 0xd4, 0xd1, 0xeb, 0xf3,
	0x68, 0xad, 0xe8, 0xa7, 0x60, 0x65, 0x23, 0x97, 0x88, 0x70, 0x63, 0x8e, 0xc8, 0xaa, 0xf0, 0x15,
	0x7c, 0x91, 0x05, 0x5e, 0xd9, 0x0b, 0x46, 0x89, 0xcd, 0x39, 0xc9, 0x15, 0xcd, 0x60, 0x43, 0xed,
	0xe2, 0x2b, 0xa7, 0x02, 0x7d, 0xab, 0xa6, 0xf1, 0x77, 0x16, 0x1e, 0xf9, 0x5a, 0xa0, 0x4f, 0x24,
	0x34, 0xb2, 0x00, 0x3c, 0x3e, 0x46, 0x4f, 0xb2, 0x13, 0xcc, 0x24, 0x68, 0x43, 0x97, 0xb7, 0x1d,
	0x97, 0xf7, 0xe1, 0x3f, 0x28, 0x6f, 0x2f, 0x90, 0xce, 0xbd, 0xf9, 0x59, 0xcf, 0x12, 0xd2, 0x34,
	0xb3, 0xdf, 0x5e, 0x77, 0xaa, 0xa9, 0xe4, 0xa6, 0xbe, 0xf1, 0x15, 0x2c, 0xa6, 0xa4, 0xf7, 0x01,
	0x94, 0x58, 0x26, 0xd3, 0xfe, 0x3b, 0x9c, 0xe9, 0x76, 0x2b, 0x39, 0x25, 0x29, 0xc4, 0xa1, 0x76,
	0x5c, 0xd3, 0x99, 0x9f, 0xfc, 0xdf, 0x9d, 0xf9, 0x6b, 0x1e, 0x2a, 0x7b, 0x0a, 0xa9, 0x7b, 0xe9,
	0x28, 0x52, 0x5d, 0x69, 0xc1, 0x9a, 0x17, 0x22, 0x95, 0x3c, 0x69, 0xca, 0x64, 0xa9, 0xe6, 0xb2,
	0x91, 0xc6, 0x2d, 0x33, 0x97, 0xf5, 0x82, 0xbc, 0x85, 0x92, 0x9e, 0x3d, 0xc7, 0x88, 0xc2, 0x4c,
	0xec, 0xdd, 0xbd, 0x7f, 0xd9, 0x52, 0x7f, 0x9d, 0x36, 0xaa, 0x33, 0x3a, 0x1e, 0x7d, 0xb3, 0x9d,
	0x32, 0x6d, 0x3b, 0x45, 0x65, 0xef, 0x23, 0x0a, 0xf2, 0x08, 0x2a, 0x21, 0x8e, 0xe8, 0x0c, 0x7d,
	0x77, 0x8c, 0x42, 0xd0, 0x01, 0x9a, 0xbf, 0x00, 0x67, 0x3d, 0x76, 0x7f, 0x6f, 0xbc, 0x64, 0x1f,
	0xca, 0x9e, 0x27, 0xa3, 0x24, 0x5d, 0x4a, 0xf3, 0xe5, 0xee, 0x97, 0x37, 0xa4, 0x2b, 0x4e, 0x10,
	0x28, 0xa4, 0xb1, 0xc9, 0x4f, 0x70, 0x27, 0x33, 0x63, 0x27, 0x7a, 0x60, 0xe9, 0x7e, 0x28, 0x77,
	0x3b, 0x37, 0xb0, 0x5d, 0xfe, 0x6b, 0x75, 0x2a, 0x6c, 0xd1, 0x47, 0xde, 0x02, 0xc9, 0xaa, 0x28,
	0xe6, 0x87, 0x66, 0xbe, 0x55, 0xee, 0x76, 0x6f, 0xe0, 0x5f, 0x32, 0x47, 0x9d, 0x2a, 0xbf, 0xe0,
	0xdc, 0xfd, 0xee, 0xc3, 0x59, 0x3d, 0xf7, 0xf1, 0xac, 0x9e, 0xfb, 0xe3, 0xac, 0x9e, 0xfb, 0xf9,
	0xbc, 0xbe, 0xf2, 0xf1, 0xbc, 0xbe, 0xf2, 0xdb, 0x79, 0x7d, 0xe5, 0x4d, 0x27, 0x53, 0x12, 0xc5,
	0xbf, 0x63, 0x3e, 0x20, 0x92, 0xa3, 0xec, 0xc8, 0xce, 0x7c, 0x56, 0xe8, 0x0a, 0xf5, 0x57, 0xf5,
	0x87, 0xc3, 0xe3, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x77, 0x00, 0xe1, 0x29, 0xca, 0x08, 0x00,
	0x00,
}

func (m *InboundTxParamsV14) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InboundTxParamsV14) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InboundTxParamsV14) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TxFinalizationStatus != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.TxFinalizationStatus))
		i--
		dAtA[i] = 0x58
	}
	if m.InboundTxFinalizedZetaHeight != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.InboundTxFinalizedZetaHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InboundTxBallotIndex) > 0 {
		i -= len(m.InboundTxBallotIndex)
		copy(dAtA[i:], m.InboundTxBallotIndex)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.InboundTxBallotIndex)))
		i--
		dAtA[i] = 0x4a
	}
	if m.InboundTxObservedExternalHeight != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.InboundTxObservedExternalHeight))
		i--
		dAtA[i] = 0x40
	}
	if len(m.InboundTxObservedHash) > 0 {
		i -= len(m.InboundTxObservedHash)
		copy(dAtA[i:], m.InboundTxObservedHash)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.InboundTxObservedHash)))
		i--
		dAtA[i] = 0x3a
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x2a
	}
	if m.CoinType != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxOrigin) > 0 {
		i -= len(m.TxOrigin)
		copy(dAtA[i:], m.TxOrigin)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.TxOrigin)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SenderChainId != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.SenderChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutboundTxParamsV14) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutboundTxParamsV14) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutboundTxParamsV14) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutboundTxEffectiveGasLimit != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.OutboundTxEffectiveGasLimit))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	{
		size := m.OutboundTxEffectiveGasPrice.Size()
		i -= size
		if _, err := m.OutboundTxEffectiveGasPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xaa
	if m.OutboundTxGasUsed != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.OutboundTxGasUsed))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TxFinalizationStatus != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.TxFinalizationStatus))
		i--
		dAtA[i] = 0x60
	}
	if len(m.TssPubkey) > 0 {
		i -= len(m.TssPubkey)
		copy(dAtA[i:], m.TssPubkey)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.TssPubkey)))
		i--
		dAtA[i] = 0x5a
	}
	if m.OutboundTxObservedExternalHeight != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.OutboundTxObservedExternalHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.OutboundTxBallotIndex) > 0 {
		i -= len(m.OutboundTxBallotIndex)
		copy(dAtA[i:], m.OutboundTxBallotIndex)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.OutboundTxBallotIndex)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OutboundTxHash) > 0 {
		i -= len(m.OutboundTxHash)
		copy(dAtA[i:], m.OutboundTxHash)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.OutboundTxHash)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OutboundTxGasPrice) > 0 {
		i -= len(m.OutboundTxGasPrice)
		copy(dAtA[i:], m.OutboundTxGasPrice)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.OutboundTxGasPrice)))
		i--
		dAtA[i] = 0x3a
	}
	if m.OutboundTxGasLimit != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.OutboundTxGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.OutboundTxTssNonce != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.OutboundTxTssNonce))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.CoinType != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.CoinType))
		i--
		dAtA[i] = 0x18
	}
	if m.ReceiverChainId != 0 {
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(m.ReceiverChainId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainTxV14) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTxV14) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTxV14) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutboundTxParams) > 0 {
		for iNdEx := len(m.OutboundTxParams) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.OutboundTxParams[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintCrossChainTxV14(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.InboundTxParams != nil {
		{
			size, err := m.InboundTxParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTxV14(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.CctxStatus != nil {
		{
			size, err := m.CctxStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTxV14(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if len(m.RelayedMessage) > 0 {
		i -= len(m.RelayedMessage)
		copy(dAtA[i:], m.RelayedMessage)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.RelayedMessage)))
		i--
		dAtA[i] = 0x32
	}
	{
		size := m.ZetaFees.Size()
		i -= size
		if _, err := m.ZetaFees.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCrossChainTxV14(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossChainTxV14(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossChainTxV14(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InboundTxParamsV14) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.SenderChainId != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.SenderChainId))
	}
	l = len(m.TxOrigin)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.CoinType != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.CoinType))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCrossChainTxV14(uint64(l))
	l = len(m.InboundTxObservedHash)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.InboundTxObservedExternalHeight != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.InboundTxObservedExternalHeight))
	}
	l = len(m.InboundTxBallotIndex)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.InboundTxFinalizedZetaHeight != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.InboundTxFinalizedZetaHeight))
	}
	if m.TxFinalizationStatus != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.TxFinalizationStatus))
	}
	return n
}

func (m *OutboundTxParamsV14) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.ReceiverChainId != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.ReceiverChainId))
	}
	if m.CoinType != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.CoinType))
	}
	l = m.Amount.Size()
	n += 1 + l + sovCrossChainTxV14(uint64(l))
	if m.OutboundTxTssNonce != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.OutboundTxTssNonce))
	}
	if m.OutboundTxGasLimit != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.OutboundTxGasLimit))
	}
	l = len(m.OutboundTxGasPrice)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	l = len(m.OutboundTxHash)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	l = len(m.OutboundTxBallotIndex)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.OutboundTxObservedExternalHeight != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.OutboundTxObservedExternalHeight))
	}
	l = len(m.TssPubkey)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.TxFinalizationStatus != 0 {
		n += 1 + sovCrossChainTxV14(uint64(m.TxFinalizationStatus))
	}
	if m.OutboundTxGasUsed != 0 {
		n += 2 + sovCrossChainTxV14(uint64(m.OutboundTxGasUsed))
	}
	l = m.OutboundTxEffectiveGasPrice.Size()
	n += 2 + l + sovCrossChainTxV14(uint64(l))
	if m.OutboundTxEffectiveGasLimit != 0 {
		n += 2 + sovCrossChainTxV14(uint64(m.OutboundTxEffectiveGasLimit))
	}
	return n
}

func (m *CrossChainTxV14) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	l = m.ZetaFees.Size()
	n += 1 + l + sovCrossChainTxV14(uint64(l))
	l = len(m.RelayedMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.CctxStatus != nil {
		l = m.CctxStatus.Size()
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if m.InboundTxParams != nil {
		l = m.InboundTxParams.Size()
		n += 1 + l + sovCrossChainTxV14(uint64(l))
	}
	if len(m.OutboundTxParams) > 0 {
		for _, e := range m.OutboundTxParams {
			l = e.Size()
			n += 1 + l + sovCrossChainTxV14(uint64(l))
		}
	}
	return n
}

func sovCrossChainTxV14(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossChainTxV14(x uint64) (n int) {
	return sovCrossChainTxV14(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InboundTxParamsV14) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTxV14
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InboundTxParamsV14: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InboundTxParamsV14: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChainId", wireType)
			}
			m.SenderChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SenderChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrigin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrigin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= common.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxObservedHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundTxObservedHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxObservedExternalHeight", wireType)
			}
			m.InboundTxObservedExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTxObservedExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxBallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InboundTxBallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxFinalizedZetaHeight", wireType)
			}
			m.InboundTxFinalizedZetaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InboundTxFinalizedZetaHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFinalizationStatus", wireType)
			}
			m.TxFinalizationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFinalizationStatus |= TxFinalizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTxV14(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutboundTxParamsV14) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTxV14
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutboundTxParamsV14: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutboundTxParamsV14: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChainId", wireType)
			}
			m.ReceiverChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReceiverChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CoinType", wireType)
			}
			m.CoinType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CoinType |= common.CoinType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxTssNonce", wireType)
			}
			m.OutboundTxTssNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxTssNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasLimit", wireType)
			}
			m.OutboundTxGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxGasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxBallotIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxBallotIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxObservedExternalHeight", wireType)
			}
			m.OutboundTxObservedExternalHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxObservedExternalHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TssPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TssPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxFinalizationStatus", wireType)
			}
			m.TxFinalizationStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TxFinalizationStatus |= TxFinalizationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxGasUsed", wireType)
			}
			m.OutboundTxGasUsed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxGasUsed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxEffectiveGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutboundTxEffectiveGasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxEffectiveGasLimit", wireType)
			}
			m.OutboundTxEffectiveGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutboundTxEffectiveGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTxV14(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTxV14) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTxV14
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTxV14: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTxV14: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZetaFees.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayedMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CctxStatus == nil {
				m.CctxStatus = &Status{}
			}
			if err := m.CctxStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InboundTxParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InboundTxParams == nil {
				m.InboundTxParams = &InboundTxParamsV14{}
			}
			if err := m.InboundTxParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutboundTxParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutboundTxParams = append(m.OutboundTxParams, &OutboundTxParamsV14{})
			if err := m.OutboundTxParams[len(m.OutboundTxParams)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTxV14(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTxV14
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossChainTxV14(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossChainTxV14
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainTxV14
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossChainTxV14
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossChainTxV14
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossChainTxV14
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossChainTxV14        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossChainTxV14          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossChainTxV14 = fmt.Errorf("proto: unexpected end of group")
)
