// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crosschain/events.proto

package types

import (
	fmt "fmt"
	io "io"
	math "math"
	math_bits "math/bits"

	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/zeta-chain/zetacore/pkg/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type EventInboundFinalized struct {
	MsgTypeUrl     string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	CctxIndex      string `protobuf:"bytes,2,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
	Sender         string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	TxOrgin        string `protobuf:"bytes,4,opt,name=tx_orgin,json=txOrgin,proto3" json:"tx_orgin,omitempty"`
	Asset          string `protobuf:"bytes,5,opt,name=asset,proto3" json:"asset,omitempty"`
	InTxHash       string `protobuf:"bytes,6,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
	InBlockHeight  string `protobuf:"bytes,7,opt,name=in_block_height,json=inBlockHeight,proto3" json:"in_block_height,omitempty"`
	Receiver       string `protobuf:"bytes,8,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain  string `protobuf:"bytes,9,opt,name=receiver_chain,json=receiverChain,proto3" json:"receiver_chain,omitempty"`
	Amount         string `protobuf:"bytes,10,opt,name=amount,proto3" json:"amount,omitempty"`
	RelayedMessage string `protobuf:"bytes,11,opt,name=relayed_message,json=relayedMessage,proto3" json:"relayed_message,omitempty"`
	NewStatus      string `protobuf:"bytes,12,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	StatusMessage  string `protobuf:"bytes,13,opt,name=status_message,json=statusMessage,proto3" json:"status_message,omitempty"`
	SenderChain    string `protobuf:"bytes,14,opt,name=sender_chain,json=senderChain,proto3" json:"sender_chain,omitempty"`
}

func (m *EventInboundFinalized) Reset()         { *m = EventInboundFinalized{} }
func (m *EventInboundFinalized) String() string { return proto.CompactTextString(m) }
func (*EventInboundFinalized) ProtoMessage()    {}
func (*EventInboundFinalized) Descriptor() ([]byte, []int) {
	return fileDescriptor_7398db8b12b87b9e, []int{0}
}
func (m *EventInboundFinalized) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventInboundFinalized) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventInboundFinalized.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventInboundFinalized) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInboundFinalized.Merge(m, src)
}
func (m *EventInboundFinalized) XXX_Size() int {
	return m.Size()
}
func (m *EventInboundFinalized) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInboundFinalized.DiscardUnknown(m)
}

var xxx_messageInfo_EventInboundFinalized proto.InternalMessageInfo

func (m *EventInboundFinalized) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventInboundFinalized) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func (m *EventInboundFinalized) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventInboundFinalized) GetTxOrgin() string {
	if m != nil {
		return m.TxOrgin
	}
	return ""
}

func (m *EventInboundFinalized) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *EventInboundFinalized) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *EventInboundFinalized) GetInBlockHeight() string {
	if m != nil {
		return m.InBlockHeight
	}
	return ""
}

func (m *EventInboundFinalized) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventInboundFinalized) GetReceiverChain() string {
	if m != nil {
		return m.ReceiverChain
	}
	return ""
}

func (m *EventInboundFinalized) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventInboundFinalized) GetRelayedMessage() string {
	if m != nil {
		return m.RelayedMessage
	}
	return ""
}

func (m *EventInboundFinalized) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *EventInboundFinalized) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *EventInboundFinalized) GetSenderChain() string {
	if m != nil {
		return m.SenderChain
	}
	return ""
}

type EventZrcWithdrawCreated struct {
	MsgTypeUrl    string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	CctxIndex     string `protobuf:"bytes,2,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
	Sender        string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChain   string `protobuf:"bytes,4,opt,name=sender_chain,json=senderChain,proto3" json:"sender_chain,omitempty"`
	InTxHash      string `protobuf:"bytes,5,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
	Receiver      string `protobuf:"bytes,6,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain string `protobuf:"bytes,7,opt,name=receiver_chain,json=receiverChain,proto3" json:"receiver_chain,omitempty"`
	Amount        string `protobuf:"bytes,8,opt,name=amount,proto3" json:"amount,omitempty"`
	NewStatus     string `protobuf:"bytes,9,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (m *EventZrcWithdrawCreated) Reset()         { *m = EventZrcWithdrawCreated{} }
func (m *EventZrcWithdrawCreated) String() string { return proto.CompactTextString(m) }
func (*EventZrcWithdrawCreated) ProtoMessage()    {}
func (*EventZrcWithdrawCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_7398db8b12b87b9e, []int{1}
}
func (m *EventZrcWithdrawCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventZrcWithdrawCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventZrcWithdrawCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventZrcWithdrawCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventZrcWithdrawCreated.Merge(m, src)
}
func (m *EventZrcWithdrawCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventZrcWithdrawCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventZrcWithdrawCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventZrcWithdrawCreated proto.InternalMessageInfo

func (m *EventZrcWithdrawCreated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventZrcWithdrawCreated) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func (m *EventZrcWithdrawCreated) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventZrcWithdrawCreated) GetSenderChain() string {
	if m != nil {
		return m.SenderChain
	}
	return ""
}

func (m *EventZrcWithdrawCreated) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *EventZrcWithdrawCreated) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *EventZrcWithdrawCreated) GetReceiverChain() string {
	if m != nil {
		return m.ReceiverChain
	}
	return ""
}

func (m *EventZrcWithdrawCreated) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *EventZrcWithdrawCreated) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

type EventZetaWithdrawCreated struct {
	MsgTypeUrl string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	CctxIndex  string `protobuf:"bytes,2,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
	Sender     string `protobuf:"bytes,3,opt,name=sender,proto3" json:"sender,omitempty"`
	InTxHash   string `protobuf:"bytes,4,opt,name=in_tx_hash,json=inTxHash,proto3" json:"in_tx_hash,omitempty"`
	NewStatus  string `protobuf:"bytes,5,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
}

func (m *EventZetaWithdrawCreated) Reset()         { *m = EventZetaWithdrawCreated{} }
func (m *EventZetaWithdrawCreated) String() string { return proto.CompactTextString(m) }
func (*EventZetaWithdrawCreated) ProtoMessage()    {}
func (*EventZetaWithdrawCreated) Descriptor() ([]byte, []int) {
	return fileDescriptor_7398db8b12b87b9e, []int{2}
}
func (m *EventZetaWithdrawCreated) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventZetaWithdrawCreated) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventZetaWithdrawCreated.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventZetaWithdrawCreated) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventZetaWithdrawCreated.Merge(m, src)
}
func (m *EventZetaWithdrawCreated) XXX_Size() int {
	return m.Size()
}
func (m *EventZetaWithdrawCreated) XXX_DiscardUnknown() {
	xxx_messageInfo_EventZetaWithdrawCreated.DiscardUnknown(m)
}

var xxx_messageInfo_EventZetaWithdrawCreated proto.InternalMessageInfo

func (m *EventZetaWithdrawCreated) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventZetaWithdrawCreated) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func (m *EventZetaWithdrawCreated) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *EventZetaWithdrawCreated) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *EventZetaWithdrawCreated) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

type EventOutboundFailure struct {
	MsgTypeUrl    string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	CctxIndex     string `protobuf:"bytes,2,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
	OldStatus     string `protobuf:"bytes,3,opt,name=old_status,json=oldStatus,proto3" json:"old_status,omitempty"`
	NewStatus     string `protobuf:"bytes,4,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	ValueReceived string `protobuf:"bytes,5,opt,name=value_received,json=valueReceived,proto3" json:"value_received,omitempty"`
}

func (m *EventOutboundFailure) Reset()         { *m = EventOutboundFailure{} }
func (m *EventOutboundFailure) String() string { return proto.CompactTextString(m) }
func (*EventOutboundFailure) ProtoMessage()    {}
func (*EventOutboundFailure) Descriptor() ([]byte, []int) {
	return fileDescriptor_7398db8b12b87b9e, []int{3}
}
func (m *EventOutboundFailure) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutboundFailure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutboundFailure.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutboundFailure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutboundFailure.Merge(m, src)
}
func (m *EventOutboundFailure) XXX_Size() int {
	return m.Size()
}
func (m *EventOutboundFailure) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutboundFailure.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutboundFailure proto.InternalMessageInfo

func (m *EventOutboundFailure) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventOutboundFailure) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func (m *EventOutboundFailure) GetOldStatus() string {
	if m != nil {
		return m.OldStatus
	}
	return ""
}

func (m *EventOutboundFailure) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *EventOutboundFailure) GetValueReceived() string {
	if m != nil {
		return m.ValueReceived
	}
	return ""
}

type EventOutboundSuccess struct {
	MsgTypeUrl    string `protobuf:"bytes,1,opt,name=msg_type_url,json=msgTypeUrl,proto3" json:"msg_type_url,omitempty"`
	CctxIndex     string `protobuf:"bytes,2,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
	OldStatus     string `protobuf:"bytes,3,opt,name=old_status,json=oldStatus,proto3" json:"old_status,omitempty"`
	NewStatus     string `protobuf:"bytes,4,opt,name=new_status,json=newStatus,proto3" json:"new_status,omitempty"`
	ValueReceived string `protobuf:"bytes,5,opt,name=value_received,json=valueReceived,proto3" json:"value_received,omitempty"`
}

func (m *EventOutboundSuccess) Reset()         { *m = EventOutboundSuccess{} }
func (m *EventOutboundSuccess) String() string { return proto.CompactTextString(m) }
func (*EventOutboundSuccess) ProtoMessage()    {}
func (*EventOutboundSuccess) Descriptor() ([]byte, []int) {
	return fileDescriptor_7398db8b12b87b9e, []int{4}
}
func (m *EventOutboundSuccess) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventOutboundSuccess) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventOutboundSuccess.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventOutboundSuccess) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventOutboundSuccess.Merge(m, src)
}
func (m *EventOutboundSuccess) XXX_Size() int {
	return m.Size()
}
func (m *EventOutboundSuccess) XXX_DiscardUnknown() {
	xxx_messageInfo_EventOutboundSuccess.DiscardUnknown(m)
}

var xxx_messageInfo_EventOutboundSuccess proto.InternalMessageInfo

func (m *EventOutboundSuccess) GetMsgTypeUrl() string {
	if m != nil {
		return m.MsgTypeUrl
	}
	return ""
}

func (m *EventOutboundSuccess) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func (m *EventOutboundSuccess) GetOldStatus() string {
	if m != nil {
		return m.OldStatus
	}
	return ""
}

func (m *EventOutboundSuccess) GetNewStatus() string {
	if m != nil {
		return m.NewStatus
	}
	return ""
}

func (m *EventOutboundSuccess) GetValueReceived() string {
	if m != nil {
		return m.ValueReceived
	}
	return ""
}

type EventCCTXGasPriceIncreased struct {
	CctxIndex        string `protobuf:"bytes,1,opt,name=cctx_index,json=cctxIndex,proto3" json:"cctx_index,omitempty"`
	GasPriceIncrease string `protobuf:"bytes,2,opt,name=gas_price_increase,json=gasPriceIncrease,proto3" json:"gas_price_increase,omitempty"`
	AdditionalFees   string `protobuf:"bytes,3,opt,name=additional_fees,json=additionalFees,proto3" json:"additional_fees,omitempty"`
}

func (m *EventCCTXGasPriceIncreased) Reset()         { *m = EventCCTXGasPriceIncreased{} }
func (m *EventCCTXGasPriceIncreased) String() string { return proto.CompactTextString(m) }
func (*EventCCTXGasPriceIncreased) ProtoMessage()    {}
func (*EventCCTXGasPriceIncreased) Descriptor() ([]byte, []int) {
	return fileDescriptor_7398db8b12b87b9e, []int{5}
}
func (m *EventCCTXGasPriceIncreased) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventCCTXGasPriceIncreased) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventCCTXGasPriceIncreased.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventCCTXGasPriceIncreased) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventCCTXGasPriceIncreased.Merge(m, src)
}
func (m *EventCCTXGasPriceIncreased) XXX_Size() int {
	return m.Size()
}
func (m *EventCCTXGasPriceIncreased) XXX_DiscardUnknown() {
	xxx_messageInfo_EventCCTXGasPriceIncreased.DiscardUnknown(m)
}

var xxx_messageInfo_EventCCTXGasPriceIncreased proto.InternalMessageInfo

func (m *EventCCTXGasPriceIncreased) GetCctxIndex() string {
	if m != nil {
		return m.CctxIndex
	}
	return ""
}

func (m *EventCCTXGasPriceIncreased) GetGasPriceIncrease() string {
	if m != nil {
		return m.GasPriceIncrease
	}
	return ""
}

func (m *EventCCTXGasPriceIncreased) GetAdditionalFees() string {
	if m != nil {
		return m.AdditionalFees
	}
	return ""
}

func init() {
	proto.RegisterType((*EventInboundFinalized)(nil), "zetachain.zetacore.crosschain.EventInboundFinalized")
	proto.RegisterType((*EventZrcWithdrawCreated)(nil), "zetachain.zetacore.crosschain.EventZrcWithdrawCreated")
	proto.RegisterType((*EventZetaWithdrawCreated)(nil), "zetachain.zetacore.crosschain.EventZetaWithdrawCreated")
	proto.RegisterType((*EventOutboundFailure)(nil), "zetachain.zetacore.crosschain.EventOutboundFailure")
	proto.RegisterType((*EventOutboundSuccess)(nil), "zetachain.zetacore.crosschain.EventOutboundSuccess")
	proto.RegisterType((*EventCCTXGasPriceIncreased)(nil), "zetachain.zetacore.crosschain.EventCCTXGasPriceIncreased")
}

func init() { proto.RegisterFile("crosschain/events.proto", fileDescriptor_7398db8b12b87b9e) }

var fileDescriptor_7398db8b12b87b9e = []byte{
	// 651 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x95, 0xdf, 0x4e, 0x13, 0x4f,
	0x14, 0xc7, 0x59, 0x68, 0x4b, 0x3b, 0xd0, 0xf2, 0xcb, 0x86, 0x9f, 0x8c, 0x8d, 0x34, 0x48, 0xe2,
	0x9f, 0x0b, 0x6d, 0x63, 0x7c, 0x03, 0x1a, 0x11, 0x62, 0x0c, 0x06, 0x30, 0x1a, 0x6e, 0x26, 0xd3,
	0xdd, 0xe3, 0xec, 0x84, 0xed, 0x4c, 0x33, 0x33, 0x0b, 0x0b, 0x4f, 0x61, 0x7c, 0x0f, 0x13, 0x1f,
	0xc0, 0x07, 0xf0, 0x92, 0x0b, 0x2f, 0xbc, 0x34, 0xf0, 0x22, 0x66, 0x66, 0x76, 0x85, 0x2e, 0x46,
	0x2f, 0x8c, 0x26, 0xde, 0xcd, 0xf9, 0x9e, 0x33, 0x87, 0xcf, 0x7c, 0xcf, 0xd2, 0x83, 0x56, 0x22,
	0x25, 0xb5, 0x8e, 0x12, 0xca, 0xc5, 0x00, 0x8e, 0x40, 0x18, 0xdd, 0x9f, 0x28, 0x69, 0x64, 0xb8,
	0x7a, 0x0a, 0x86, 0x3a, 0xbd, 0xef, 0x4e, 0x52, 0x41, 0xff, 0xb2, 0xb6, 0xbb, 0xcc, 0x24, 0x93,
	0xae, 0x72, 0x60, 0x4f, 0xfe, 0x52, 0xb7, 0x3d, 0x39, 0x64, 0x83, 0xc9, 0x21, 0xf3, 0xe1, 0xfa,
	0xe7, 0x39, 0xf4, 0xff, 0x13, 0xdb, 0x74, 0x5b, 0x8c, 0x64, 0x26, 0xe2, 0x4d, 0x2e, 0x68, 0xca,
	0x4f, 0x21, 0x0e, 0xd7, 0xd0, 0xe2, 0x58, 0x33, 0x62, 0x4e, 0x26, 0x40, 0x32, 0x95, 0xe2, 0x60,
	0x2d, 0xb8, 0xdf, 0xda, 0x45, 0x63, 0xcd, 0xf6, 0x4f, 0x26, 0xf0, 0x52, 0xa5, 0xe1, 0x2a, 0x42,
	0x51, 0x64, 0x72, 0xc2, 0x45, 0x0c, 0x39, 0x9e, 0x75, 0xf9, 0x96, 0x55, 0xb6, 0xad, 0x10, 0xde,
	0x40, 0x0d, 0x0d, 0x22, 0x06, 0x85, 0xe7, 0x5c, 0xaa, 0x88, 0xc2, 0x9b, 0xa8, 0x69, 0x72, 0x22,
	0x15, 0xe3, 0x02, 0xd7, 0x5c, 0x66, 0xde, 0xe4, 0x3b, 0x36, 0x0c, 0x97, 0x51, 0x9d, 0x6a, 0x0d,
	0x06, 0xd7, 0x9d, 0xee, 0x83, 0xf0, 0x16, 0x42, 0x5c, 0x10, 0x93, 0x93, 0x84, 0xea, 0x04, 0x37,
	0x5c, 0xaa, 0xc9, 0xc5, 0x7e, 0xbe, 0x45, 0x75, 0x12, 0xde, 0x45, 0x4b, 0x5c, 0x90, 0x51, 0x2a,
	0xa3, 0x43, 0x92, 0x00, 0x67, 0x89, 0xc1, 0xf3, 0xae, 0xa4, 0xcd, 0xc5, 0x86, 0x55, 0xb7, 0x9c,
	0x18, 0x76, 0x51, 0x53, 0x41, 0x04, 0xfc, 0x08, 0x14, 0x6e, 0xfa, 0x1e, 0x65, 0x1c, 0xde, 0x41,
	0x9d, 0xf2, 0x4c, 0x9c, 0x79, 0xb8, 0xe5, 0x5b, 0x94, 0xea, 0xd0, 0x8a, 0xf6, 0x45, 0x74, 0x2c,
	0x33, 0x61, 0x30, 0xf2, 0x2f, 0xf2, 0x51, 0x78, 0x0f, 0x2d, 0x29, 0x48, 0xe9, 0x09, 0xc4, 0x64,
	0x0c, 0x5a, 0x53, 0x06, 0x78, 0xc1, 0x15, 0x74, 0x0a, 0xf9, 0xb9, 0x57, 0xad, 0x63, 0x02, 0x8e,
	0x89, 0x36, 0xd4, 0x64, 0x1a, 0x2f, 0x7a, 0xc7, 0x04, 0x1c, 0xef, 0x39, 0xc1, 0x62, 0xf8, 0xd4,
	0xf7, 0x36, 0x6d, 0x8f, 0xe1, 0xd5, 0xb2, 0xcb, 0x6d, 0xb4, 0xe8, 0xad, 0x2c, 0x58, 0x3b, 0xae,
	0x68, 0xc1, 0x6b, 0x8e, 0x74, 0xfd, 0xfd, 0x2c, 0x5a, 0x71, 0x63, 0x3d, 0x50, 0xd1, 0x2b, 0x6e,
	0x92, 0x58, 0xd1, 0xe3, 0xa1, 0x02, 0x6a, 0xfe, 0xe4, 0x60, 0xab, 0x5c, 0xb5, 0x6b, 0x5c, 0x95,
	0x51, 0xd6, 0x2b, 0xa3, 0xbc, 0x3a, 0xa2, 0xc6, 0x2f, 0x47, 0x34, 0xff, 0xf3, 0x11, 0x35, 0xa7,
	0x46, 0x34, 0xed, 0x7c, 0xab, 0xe2, 0xfc, 0xfa, 0x87, 0x00, 0x61, 0xef, 0x17, 0x18, 0xfa, 0xd7,
	0x0c, 0x9b, 0x76, 0xa3, 0x56, 0x71, 0x63, 0x1a, 0xb9, 0x5e, 0x45, 0xfe, 0x18, 0xa0, 0x65, 0x87,
	0xbc, 0x93, 0x19, 0xff, 0xaf, 0x4b, 0x79, 0x9a, 0x29, 0xf8, 0x7d, 0xdc, 0x55, 0x84, 0x64, 0x1a,
	0x97, 0x7f, 0xd8, 0x23, 0xb7, 0x64, 0x1a, 0x17, 0x5f, 0xe9, 0x34, 0x57, 0xed, 0x07, 0x1f, 0xf1,
	0x11, 0x4d, 0x33, 0x20, 0xc5, 0x60, 0xe2, 0x02, 0xbd, 0xed, 0xd4, 0xdd, 0x42, 0xbc, 0x8e, 0xbf,
	0x97, 0x45, 0x11, 0x68, 0xfd, 0x8f, 0xe0, 0xbf, 0x0b, 0x50, 0xd7, 0xe1, 0x0f, 0x87, 0xfb, 0xaf,
	0x9f, 0x52, 0xfd, 0x42, 0xf1, 0x08, 0xb6, 0x45, 0xa4, 0x80, 0x6a, 0x88, 0x2b, 0x88, 0x41, 0x15,
	0xf1, 0x01, 0x0a, 0x19, 0xd5, 0x64, 0x62, 0x2f, 0x11, 0x5e, 0xdc, 0x2a, 0x5e, 0xf2, 0x1f, 0xab,
	0x74, 0xb3, 0x3f, 0x2f, 0x34, 0x8e, 0xb9, 0xe1, 0x52, 0xd0, 0x94, 0xbc, 0x01, 0x28, 0x5f, 0xd5,
	0xb9, 0x94, 0x37, 0x01, 0xf4, 0xc6, 0xb3, 0x4f, 0xe7, 0xbd, 0xe0, 0xec, 0xbc, 0x17, 0x7c, 0x3d,
	0xef, 0x05, 0x6f, 0x2f, 0x7a, 0x33, 0x67, 0x17, 0xbd, 0x99, 0x2f, 0x17, 0xbd, 0x99, 0x83, 0x47,
	0x8c, 0x9b, 0x24, 0x1b, 0xf5, 0x23, 0x39, 0x1e, 0xd8, 0x5d, 0xf1, 0xd0, 0xaf, 0x93, 0x72, 0x6d,
	0x0c, 0xf2, 0xc1, 0x95, 0x25, 0x63, 0xad, 0xd7, 0xa3, 0x86, 0x5b, 0x10, 0x8f, 0xbf, 0x05, 0x00,
	0x00, 0xff, 0xff, 0xdd, 0x9e, 0xb3, 0xe1, 0x7f, 0x06, 0x00, 0x00,
}

func (m *EventInboundFinalized) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventInboundFinalized) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventInboundFinalized) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SenderChain) > 0 {
		i -= len(m.SenderChain)
		copy(dAtA[i:], m.SenderChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SenderChain)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.RelayedMessage) > 0 {
		i -= len(m.RelayedMessage)
		copy(dAtA[i:], m.RelayedMessage)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.RelayedMessage)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.ReceiverChain) > 0 {
		i -= len(m.ReceiverChain)
		copy(dAtA[i:], m.ReceiverChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ReceiverChain)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.InBlockHeight) > 0 {
		i -= len(m.InBlockHeight)
		copy(dAtA[i:], m.InBlockHeight)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InBlockHeight)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.TxOrgin) > 0 {
		i -= len(m.TxOrgin)
		copy(dAtA[i:], m.TxOrgin)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.TxOrgin)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventZrcWithdrawCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventZrcWithdrawCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventZrcWithdrawCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ReceiverChain) > 0 {
		i -= len(m.ReceiverChain)
		copy(dAtA[i:], m.ReceiverChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ReceiverChain)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SenderChain) > 0 {
		i -= len(m.SenderChain)
		copy(dAtA[i:], m.SenderChain)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.SenderChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventZetaWithdrawCreated) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventZetaWithdrawCreated) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventZetaWithdrawCreated) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutboundFailure) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutboundFailure) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutboundFailure) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueReceived) > 0 {
		i -= len(m.ValueReceived)
		copy(dAtA[i:], m.ValueReceived)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ValueReceived)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldStatus) > 0 {
		i -= len(m.OldStatus)
		copy(dAtA[i:], m.OldStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventOutboundSuccess) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventOutboundSuccess) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventOutboundSuccess) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValueReceived) > 0 {
		i -= len(m.ValueReceived)
		copy(dAtA[i:], m.ValueReceived)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.ValueReceived)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NewStatus) > 0 {
		i -= len(m.NewStatus)
		copy(dAtA[i:], m.NewStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.NewStatus)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.OldStatus) > 0 {
		i -= len(m.OldStatus)
		copy(dAtA[i:], m.OldStatus)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.OldStatus)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MsgTypeUrl) > 0 {
		i -= len(m.MsgTypeUrl)
		copy(dAtA[i:], m.MsgTypeUrl)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.MsgTypeUrl)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventCCTXGasPriceIncreased) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventCCTXGasPriceIncreased) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventCCTXGasPriceIncreased) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdditionalFees) > 0 {
		i -= len(m.AdditionalFees)
		copy(dAtA[i:], m.AdditionalFees)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.AdditionalFees)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.GasPriceIncrease) > 0 {
		i -= len(m.GasPriceIncrease)
		copy(dAtA[i:], m.GasPriceIncrease)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.GasPriceIncrease)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.CctxIndex) > 0 {
		i -= len(m.CctxIndex)
		copy(dAtA[i:], m.CctxIndex)
		i = encodeVarintEvents(dAtA, i, uint64(len(m.CctxIndex)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEvents(dAtA []byte, offset int, v uint64) int {
	offset -= sovEvents(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *EventInboundFinalized) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.TxOrgin)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InBlockHeight)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ReceiverChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.RelayedMessage)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SenderChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventZrcWithdrawCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.SenderChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ReceiverChain)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventZetaWithdrawCreated) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOutboundFailure) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ValueReceived)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventOutboundSuccess) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MsgTypeUrl)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.OldStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.NewStatus)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.ValueReceived)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func (m *EventCCTXGasPriceIncreased) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CctxIndex)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.GasPriceIncrease)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	l = len(m.AdditionalFees)
	if l > 0 {
		n += 1 + l + sovEvents(uint64(l))
	}
	return n
}

func sovEvents(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEvents(x uint64) (n int) {
	return sovEvents(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *EventInboundFinalized) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventInboundFinalized: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventInboundFinalized: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxOrgin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxOrgin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlockHeight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InBlockHeight = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayedMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventZrcWithdrawCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventZrcWithdrawCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventZrcWithdrawCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventZetaWithdrawCreated) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventZetaWithdrawCreated: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventZetaWithdrawCreated: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutboundFailure) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutboundFailure: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutboundFailure: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueReceived", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueReceived = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventOutboundSuccess) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventOutboundSuccess: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventOutboundSuccess: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgTypeUrl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MsgTypeUrl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OldStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OldStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewStatus = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValueReceived", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValueReceived = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventCCTXGasPriceIncreased) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventCCTXGasPriceIncreased: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventCCTXGasPriceIncreased: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPriceIncrease", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPriceIncrease = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdditionalFees", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEvents
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEvents
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdditionalFees = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipEvents(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEvents
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEvents(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEvents
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEvents
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEvents
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEvents
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEvents
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEvents        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEvents          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEvents = fmt.Errorf("proto: unexpected end of group")
)
