// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetacore/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetZetaConversionRateRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetZetaConversionRateRequest) Reset()         { *m = QueryGetZetaConversionRateRequest{} }
func (m *QueryGetZetaConversionRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetZetaConversionRateRequest) ProtoMessage()    {}
func (*QueryGetZetaConversionRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{0}
}
func (m *QueryGetZetaConversionRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetZetaConversionRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetZetaConversionRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetZetaConversionRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetZetaConversionRateRequest.Merge(m, src)
}
func (m *QueryGetZetaConversionRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetZetaConversionRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetZetaConversionRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetZetaConversionRateRequest proto.InternalMessageInfo

func (m *QueryGetZetaConversionRateRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetZetaConversionRateResponse struct {
	ZetaConversionRate ZetaConversionRate `protobuf:"bytes,1,opt,name=zetaConversionRate,proto3" json:"zetaConversionRate"`
}

func (m *QueryGetZetaConversionRateResponse) Reset()         { *m = QueryGetZetaConversionRateResponse{} }
func (m *QueryGetZetaConversionRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetZetaConversionRateResponse) ProtoMessage()    {}
func (*QueryGetZetaConversionRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{1}
}
func (m *QueryGetZetaConversionRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetZetaConversionRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetZetaConversionRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetZetaConversionRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetZetaConversionRateResponse.Merge(m, src)
}
func (m *QueryGetZetaConversionRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetZetaConversionRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetZetaConversionRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetZetaConversionRateResponse proto.InternalMessageInfo

func (m *QueryGetZetaConversionRateResponse) GetZetaConversionRate() ZetaConversionRate {
	if m != nil {
		return m.ZetaConversionRate
	}
	return ZetaConversionRate{}
}

type QueryAllZetaConversionRateRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllZetaConversionRateRequest) Reset()         { *m = QueryAllZetaConversionRateRequest{} }
func (m *QueryAllZetaConversionRateRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllZetaConversionRateRequest) ProtoMessage()    {}
func (*QueryAllZetaConversionRateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{2}
}
func (m *QueryAllZetaConversionRateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllZetaConversionRateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllZetaConversionRateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllZetaConversionRateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllZetaConversionRateRequest.Merge(m, src)
}
func (m *QueryAllZetaConversionRateRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllZetaConversionRateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllZetaConversionRateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllZetaConversionRateRequest proto.InternalMessageInfo

func (m *QueryAllZetaConversionRateRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllZetaConversionRateResponse struct {
	ZetaConversionRate []ZetaConversionRate `protobuf:"bytes,1,rep,name=zetaConversionRate,proto3" json:"zetaConversionRate"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllZetaConversionRateResponse) Reset()         { *m = QueryAllZetaConversionRateResponse{} }
func (m *QueryAllZetaConversionRateResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllZetaConversionRateResponse) ProtoMessage()    {}
func (*QueryAllZetaConversionRateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{3}
}
func (m *QueryAllZetaConversionRateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllZetaConversionRateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllZetaConversionRateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllZetaConversionRateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllZetaConversionRateResponse.Merge(m, src)
}
func (m *QueryAllZetaConversionRateResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllZetaConversionRateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllZetaConversionRateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllZetaConversionRateResponse proto.InternalMessageInfo

func (m *QueryAllZetaConversionRateResponse) GetZetaConversionRate() []ZetaConversionRate {
	if m != nil {
		return m.ZetaConversionRate
	}
	return nil
}

func (m *QueryAllZetaConversionRateResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// this line is used by starport scaffolding # 3
type QueryGetKeygenRequest struct {
}

func (m *QueryGetKeygenRequest) Reset()         { *m = QueryGetKeygenRequest{} }
func (m *QueryGetKeygenRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeygenRequest) ProtoMessage()    {}
func (*QueryGetKeygenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{4}
}
func (m *QueryGetKeygenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeygenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeygenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeygenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeygenRequest.Merge(m, src)
}
func (m *QueryGetKeygenRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeygenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeygenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeygenRequest proto.InternalMessageInfo

type QueryGetKeygenResponse struct {
	Keygen *Keygen `protobuf:"bytes,1,opt,name=Keygen,proto3" json:"Keygen,omitempty"`
}

func (m *QueryGetKeygenResponse) Reset()         { *m = QueryGetKeygenResponse{} }
func (m *QueryGetKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetKeygenResponse) ProtoMessage()    {}
func (*QueryGetKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{5}
}
func (m *QueryGetKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetKeygenResponse.Merge(m, src)
}
func (m *QueryGetKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetKeygenResponse proto.InternalMessageInfo

func (m *QueryGetKeygenResponse) GetKeygen() *Keygen {
	if m != nil {
		return m.Keygen
	}
	return nil
}

type QueryGetTSSVoterRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTSSVoterRequest) Reset()         { *m = QueryGetTSSVoterRequest{} }
func (m *QueryGetTSSVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSVoterRequest) ProtoMessage()    {}
func (*QueryGetTSSVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{6}
}
func (m *QueryGetTSSVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSVoterRequest.Merge(m, src)
}
func (m *QueryGetTSSVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSVoterRequest proto.InternalMessageInfo

func (m *QueryGetTSSVoterRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTSSVoterResponse struct {
	TSSVoter *TSSVoter `protobuf:"bytes,1,opt,name=TSSVoter,proto3" json:"TSSVoter,omitempty"`
}

func (m *QueryGetTSSVoterResponse) Reset()         { *m = QueryGetTSSVoterResponse{} }
func (m *QueryGetTSSVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSVoterResponse) ProtoMessage()    {}
func (*QueryGetTSSVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{7}
}
func (m *QueryGetTSSVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSVoterResponse.Merge(m, src)
}
func (m *QueryGetTSSVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSVoterResponse proto.InternalMessageInfo

func (m *QueryGetTSSVoterResponse) GetTSSVoter() *TSSVoter {
	if m != nil {
		return m.TSSVoter
	}
	return nil
}

type QueryAllTSSVoterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTSSVoterRequest) Reset()         { *m = QueryAllTSSVoterRequest{} }
func (m *QueryAllTSSVoterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTSSVoterRequest) ProtoMessage()    {}
func (*QueryAllTSSVoterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{8}
}
func (m *QueryAllTSSVoterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTSSVoterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTSSVoterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTSSVoterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTSSVoterRequest.Merge(m, src)
}
func (m *QueryAllTSSVoterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTSSVoterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTSSVoterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTSSVoterRequest proto.InternalMessageInfo

func (m *QueryAllTSSVoterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTSSVoterResponse struct {
	TSSVoter   []*TSSVoter         `protobuf:"bytes,1,rep,name=TSSVoter,proto3" json:"TSSVoter,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTSSVoterResponse) Reset()         { *m = QueryAllTSSVoterResponse{} }
func (m *QueryAllTSSVoterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTSSVoterResponse) ProtoMessage()    {}
func (*QueryAllTSSVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{9}
}
func (m *QueryAllTSSVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTSSVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTSSVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTSSVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTSSVoterResponse.Merge(m, src)
}
func (m *QueryAllTSSVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTSSVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTSSVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTSSVoterResponse proto.InternalMessageInfo

func (m *QueryAllTSSVoterResponse) GetTSSVoter() []*TSSVoter {
	if m != nil {
		return m.TSSVoter
	}
	return nil
}

func (m *QueryAllTSSVoterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTSSRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetTSSRequest) Reset()         { *m = QueryGetTSSRequest{} }
func (m *QueryGetTSSRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSRequest) ProtoMessage()    {}
func (*QueryGetTSSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{10}
}
func (m *QueryGetTSSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSRequest.Merge(m, src)
}
func (m *QueryGetTSSRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSRequest proto.InternalMessageInfo

func (m *QueryGetTSSRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetTSSResponse struct {
	TSS *TSS `protobuf:"bytes,1,opt,name=TSS,proto3" json:"TSS,omitempty"`
}

func (m *QueryGetTSSResponse) Reset()         { *m = QueryGetTSSResponse{} }
func (m *QueryGetTSSResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTSSResponse) ProtoMessage()    {}
func (*QueryGetTSSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{11}
}
func (m *QueryGetTSSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTSSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTSSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTSSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTSSResponse.Merge(m, src)
}
func (m *QueryGetTSSResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTSSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTSSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTSSResponse proto.InternalMessageInfo

func (m *QueryGetTSSResponse) GetTSS() *TSS {
	if m != nil {
		return m.TSS
	}
	return nil
}

type QueryAllTSSRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTSSRequest) Reset()         { *m = QueryAllTSSRequest{} }
func (m *QueryAllTSSRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTSSRequest) ProtoMessage()    {}
func (*QueryAllTSSRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{12}
}
func (m *QueryAllTSSRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTSSRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTSSRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTSSRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTSSRequest.Merge(m, src)
}
func (m *QueryAllTSSRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTSSRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTSSRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTSSRequest proto.InternalMessageInfo

func (m *QueryAllTSSRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTSSResponse struct {
	TSS        []*TSS              `protobuf:"bytes,1,rep,name=TSS,proto3" json:"TSS,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTSSResponse) Reset()         { *m = QueryAllTSSResponse{} }
func (m *QueryAllTSSResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTSSResponse) ProtoMessage()    {}
func (*QueryAllTSSResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{13}
}
func (m *QueryAllTSSResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTSSResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTSSResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTSSResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTSSResponse.Merge(m, src)
}
func (m *QueryAllTSSResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTSSResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTSSResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTSSResponse proto.InternalMessageInfo

func (m *QueryAllTSSResponse) GetTSS() []*TSS {
	if m != nil {
		return m.TSS
	}
	return nil
}

func (m *QueryAllTSSResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryTxListRichRequest struct {
	Last uint64 `protobuf:"varint,1,opt,name=last,proto3" json:"last,omitempty"`
}

func (m *QueryTxListRichRequest) Reset()         { *m = QueryTxListRichRequest{} }
func (m *QueryTxListRichRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTxListRichRequest) ProtoMessage()    {}
func (*QueryTxListRichRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{14}
}
func (m *QueryTxListRichRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxListRichRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxListRichRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxListRichRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxListRichRequest.Merge(m, src)
}
func (m *QueryTxListRichRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxListRichRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxListRichRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxListRichRequest proto.InternalMessageInfo

func (m *QueryTxListRichRequest) GetLast() uint64 {
	if m != nil {
		return m.Last
	}
	return 0
}

type QueryTxListRichResponse struct {
	Tx     []*Send `protobuf:"bytes,1,rep,name=tx,proto3" json:"tx,omitempty"`
	Length uint64  `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *QueryTxListRichResponse) Reset()         { *m = QueryTxListRichResponse{} }
func (m *QueryTxListRichResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTxListRichResponse) ProtoMessage()    {}
func (*QueryTxListRichResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{15}
}
func (m *QueryTxListRichResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTxListRichResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTxListRichResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTxListRichResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTxListRichResponse.Merge(m, src)
}
func (m *QueryTxListRichResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTxListRichResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTxListRichResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTxListRichResponse proto.InternalMessageInfo

func (m *QueryTxListRichResponse) GetTx() []*Send {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *QueryTxListRichResponse) GetLength() uint64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type QueryGetInTxRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetInTxRequest) Reset()         { *m = QueryGetInTxRequest{} }
func (m *QueryGetInTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInTxRequest) ProtoMessage()    {}
func (*QueryGetInTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{16}
}
func (m *QueryGetInTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInTxRequest.Merge(m, src)
}
func (m *QueryGetInTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInTxRequest proto.InternalMessageInfo

func (m *QueryGetInTxRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetInTxResponse struct {
	InTx *InTx `protobuf:"bytes,1,opt,name=InTx,proto3" json:"InTx,omitempty"`
}

func (m *QueryGetInTxResponse) Reset()         { *m = QueryGetInTxResponse{} }
func (m *QueryGetInTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInTxResponse) ProtoMessage()    {}
func (*QueryGetInTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{17}
}
func (m *QueryGetInTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInTxResponse.Merge(m, src)
}
func (m *QueryGetInTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInTxResponse proto.InternalMessageInfo

func (m *QueryGetInTxResponse) GetInTx() *InTx {
	if m != nil {
		return m.InTx
	}
	return nil
}

type QueryGetInTxRichRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetInTxRichRequest) Reset()         { *m = QueryGetInTxRichRequest{} }
func (m *QueryGetInTxRichRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetInTxRichRequest) ProtoMessage()    {}
func (*QueryGetInTxRichRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{18}
}
func (m *QueryGetInTxRichRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInTxRichRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInTxRichRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInTxRichRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInTxRichRequest.Merge(m, src)
}
func (m *QueryGetInTxRichRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInTxRichRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInTxRichRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInTxRichRequest proto.InternalMessageInfo

func (m *QueryGetInTxRichRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetInTxRichResponse struct {
	Tx *Send `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (m *QueryGetInTxRichResponse) Reset()         { *m = QueryGetInTxRichResponse{} }
func (m *QueryGetInTxRichResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetInTxRichResponse) ProtoMessage()    {}
func (*QueryGetInTxRichResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{19}
}
func (m *QueryGetInTxRichResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetInTxRichResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetInTxRichResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetInTxRichResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetInTxRichResponse.Merge(m, src)
}
func (m *QueryGetInTxRichResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetInTxRichResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetInTxRichResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetInTxRichResponse proto.InternalMessageInfo

func (m *QueryGetInTxRichResponse) GetTx() *Send {
	if m != nil {
		return m.Tx
	}
	return nil
}

type QueryAllInTxRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInTxRequest) Reset()         { *m = QueryAllInTxRequest{} }
func (m *QueryAllInTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllInTxRequest) ProtoMessage()    {}
func (*QueryAllInTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{20}
}
func (m *QueryAllInTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInTxRequest.Merge(m, src)
}
func (m *QueryAllInTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInTxRequest proto.InternalMessageInfo

func (m *QueryAllInTxRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllInTxResponse struct {
	InTx       []*InTx             `protobuf:"bytes,1,rep,name=InTx,proto3" json:"InTx,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllInTxResponse) Reset()         { *m = QueryAllInTxResponse{} }
func (m *QueryAllInTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllInTxResponse) ProtoMessage()    {}
func (*QueryAllInTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{21}
}
func (m *QueryAllInTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllInTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllInTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllInTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllInTxResponse.Merge(m, src)
}
func (m *QueryAllInTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllInTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllInTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllInTxResponse proto.InternalMessageInfo

func (m *QueryAllInTxResponse) GetInTx() []*InTx {
	if m != nil {
		return m.InTx
	}
	return nil
}

func (m *QueryAllInTxResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTxRequest struct {
	From int64 `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	To   int64 `protobuf:"varint,2,opt,name=to,proto3" json:"to,omitempty"`
	Last int64 `protobuf:"varint,3,opt,name=last,proto3" json:"last,omitempty"`
}

func (m *QueryGetTxRequest) Reset()         { *m = QueryGetTxRequest{} }
func (m *QueryGetTxRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxRequest) ProtoMessage()    {}
func (*QueryGetTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{22}
}
func (m *QueryGetTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxRequest.Merge(m, src)
}
func (m *QueryGetTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxRequest proto.InternalMessageInfo

func (m *QueryGetTxRequest) GetFrom() int64 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *QueryGetTxRequest) GetTo() int64 {
	if m != nil {
		return m.To
	}
	return 0
}

func (m *QueryGetTxRequest) GetLast() int64 {
	if m != nil {
		return m.Last
	}
	return 0
}

type QueryGetTxResponse struct {
	Tx     []*Tx `protobuf:"bytes,1,rep,name=tx,proto3" json:"tx,omitempty"`
	Length int64 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *QueryGetTxResponse) Reset()         { *m = QueryGetTxResponse{} }
func (m *QueryGetTxResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTxResponse) ProtoMessage()    {}
func (*QueryGetTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{23}
}
func (m *QueryGetTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTxResponse.Merge(m, src)
}
func (m *QueryGetTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTxResponse proto.InternalMessageInfo

func (m *QueryGetTxResponse) GetTx() []*Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func (m *QueryGetTxResponse) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type QueryGetGasBalanceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGasBalanceRequest) Reset()         { *m = QueryGetGasBalanceRequest{} }
func (m *QueryGetGasBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasBalanceRequest) ProtoMessage()    {}
func (*QueryGetGasBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{24}
}
func (m *QueryGetGasBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasBalanceRequest.Merge(m, src)
}
func (m *QueryGetGasBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasBalanceRequest proto.InternalMessageInfo

func (m *QueryGetGasBalanceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetGasBalanceResponse struct {
	GasBalance *GasBalance `protobuf:"bytes,1,opt,name=GasBalance,proto3" json:"GasBalance,omitempty"`
}

func (m *QueryGetGasBalanceResponse) Reset()         { *m = QueryGetGasBalanceResponse{} }
func (m *QueryGetGasBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasBalanceResponse) ProtoMessage()    {}
func (*QueryGetGasBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{25}
}
func (m *QueryGetGasBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasBalanceResponse.Merge(m, src)
}
func (m *QueryGetGasBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasBalanceResponse proto.InternalMessageInfo

func (m *QueryGetGasBalanceResponse) GetGasBalance() *GasBalance {
	if m != nil {
		return m.GasBalance
	}
	return nil
}

type QueryAllGasBalanceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasBalanceRequest) Reset()         { *m = QueryAllGasBalanceRequest{} }
func (m *QueryAllGasBalanceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasBalanceRequest) ProtoMessage()    {}
func (*QueryAllGasBalanceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{26}
}
func (m *QueryAllGasBalanceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasBalanceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasBalanceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasBalanceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasBalanceRequest.Merge(m, src)
}
func (m *QueryAllGasBalanceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasBalanceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasBalanceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasBalanceRequest proto.InternalMessageInfo

func (m *QueryAllGasBalanceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGasBalanceResponse struct {
	GasBalance []*GasBalance       `protobuf:"bytes,1,rep,name=GasBalance,proto3" json:"GasBalance,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasBalanceResponse) Reset()         { *m = QueryAllGasBalanceResponse{} }
func (m *QueryAllGasBalanceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasBalanceResponse) ProtoMessage()    {}
func (*QueryAllGasBalanceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{27}
}
func (m *QueryAllGasBalanceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasBalanceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasBalanceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasBalanceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasBalanceResponse.Merge(m, src)
}
func (m *QueryAllGasBalanceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasBalanceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasBalanceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasBalanceResponse proto.InternalMessageInfo

func (m *QueryAllGasBalanceResponse) GetGasBalance() []*GasBalance {
	if m != nil {
		return m.GasBalance
	}
	return nil
}

func (m *QueryAllGasBalanceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetGasPriceRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetGasPriceRequest) Reset()         { *m = QueryGetGasPriceRequest{} }
func (m *QueryGetGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceRequest) ProtoMessage()    {}
func (*QueryGetGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{28}
}
func (m *QueryGetGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceRequest.Merge(m, src)
}
func (m *QueryGetGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceRequest proto.InternalMessageInfo

func (m *QueryGetGasPriceRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetGasPriceResponse struct {
	GasPrice *GasPrice `protobuf:"bytes,1,opt,name=GasPrice,proto3" json:"GasPrice,omitempty"`
}

func (m *QueryGetGasPriceResponse) Reset()         { *m = QueryGetGasPriceResponse{} }
func (m *QueryGetGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetGasPriceResponse) ProtoMessage()    {}
func (*QueryGetGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{29}
}
func (m *QueryGetGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetGasPriceResponse.Merge(m, src)
}
func (m *QueryGetGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetGasPriceResponse proto.InternalMessageInfo

func (m *QueryGetGasPriceResponse) GetGasPrice() *GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

type QueryAllGasPriceRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceRequest) Reset()         { *m = QueryAllGasPriceRequest{} }
func (m *QueryAllGasPriceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceRequest) ProtoMessage()    {}
func (*QueryAllGasPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{30}
}
func (m *QueryAllGasPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceRequest.Merge(m, src)
}
func (m *QueryAllGasPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceRequest proto.InternalMessageInfo

func (m *QueryAllGasPriceRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllGasPriceResponse struct {
	GasPrice   []*GasPrice         `protobuf:"bytes,1,rep,name=GasPrice,proto3" json:"GasPrice,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllGasPriceResponse) Reset()         { *m = QueryAllGasPriceResponse{} }
func (m *QueryAllGasPriceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllGasPriceResponse) ProtoMessage()    {}
func (*QueryAllGasPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{31}
}
func (m *QueryAllGasPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllGasPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllGasPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllGasPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllGasPriceResponse.Merge(m, src)
}
func (m *QueryAllGasPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllGasPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllGasPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllGasPriceResponse proto.InternalMessageInfo

func (m *QueryAllGasPriceResponse) GetGasPrice() []*GasPrice {
	if m != nil {
		return m.GasPrice
	}
	return nil
}

func (m *QueryAllGasPriceResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetChainNoncesRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetChainNoncesRequest) Reset()         { *m = QueryGetChainNoncesRequest{} }
func (m *QueryGetChainNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainNoncesRequest) ProtoMessage()    {}
func (*QueryGetChainNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{32}
}
func (m *QueryGetChainNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainNoncesRequest.Merge(m, src)
}
func (m *QueryGetChainNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainNoncesRequest proto.InternalMessageInfo

func (m *QueryGetChainNoncesRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetChainNoncesResponse struct {
	ChainNonces *ChainNonces `protobuf:"bytes,1,opt,name=ChainNonces,proto3" json:"ChainNonces,omitempty"`
}

func (m *QueryGetChainNoncesResponse) Reset()         { *m = QueryGetChainNoncesResponse{} }
func (m *QueryGetChainNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetChainNoncesResponse) ProtoMessage()    {}
func (*QueryGetChainNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{33}
}
func (m *QueryGetChainNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetChainNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetChainNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetChainNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetChainNoncesResponse.Merge(m, src)
}
func (m *QueryGetChainNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetChainNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetChainNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetChainNoncesResponse proto.InternalMessageInfo

func (m *QueryGetChainNoncesResponse) GetChainNonces() *ChainNonces {
	if m != nil {
		return m.ChainNonces
	}
	return nil
}

type QueryAllChainNoncesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainNoncesRequest) Reset()         { *m = QueryAllChainNoncesRequest{} }
func (m *QueryAllChainNoncesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainNoncesRequest) ProtoMessage()    {}
func (*QueryAllChainNoncesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{34}
}
func (m *QueryAllChainNoncesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainNoncesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainNoncesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainNoncesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainNoncesRequest.Merge(m, src)
}
func (m *QueryAllChainNoncesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainNoncesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainNoncesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainNoncesRequest proto.InternalMessageInfo

func (m *QueryAllChainNoncesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllChainNoncesResponse struct {
	ChainNonces []*ChainNonces      `protobuf:"bytes,1,rep,name=ChainNonces,proto3" json:"ChainNonces,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllChainNoncesResponse) Reset()         { *m = QueryAllChainNoncesResponse{} }
func (m *QueryAllChainNoncesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllChainNoncesResponse) ProtoMessage()    {}
func (*QueryAllChainNoncesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{35}
}
func (m *QueryAllChainNoncesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllChainNoncesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllChainNoncesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllChainNoncesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllChainNoncesResponse.Merge(m, src)
}
func (m *QueryAllChainNoncesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllChainNoncesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllChainNoncesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllChainNoncesResponse proto.InternalMessageInfo

func (m *QueryAllChainNoncesResponse) GetChainNonces() []*ChainNonces {
	if m != nil {
		return m.ChainNonces
	}
	return nil
}

func (m *QueryAllChainNoncesResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLastBlockHeightRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetLastBlockHeightRequest) Reset()         { *m = QueryGetLastBlockHeightRequest{} }
func (m *QueryGetLastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastBlockHeightRequest) ProtoMessage()    {}
func (*QueryGetLastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{36}
}
func (m *QueryGetLastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastBlockHeightRequest.Merge(m, src)
}
func (m *QueryGetLastBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastBlockHeightRequest proto.InternalMessageInfo

func (m *QueryGetLastBlockHeightRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetLastBlockHeightResponse struct {
	LastBlockHeight *LastBlockHeight `protobuf:"bytes,1,opt,name=LastBlockHeight,proto3" json:"LastBlockHeight,omitempty"`
}

func (m *QueryGetLastBlockHeightResponse) Reset()         { *m = QueryGetLastBlockHeightResponse{} }
func (m *QueryGetLastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastBlockHeightResponse) ProtoMessage()    {}
func (*QueryGetLastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{37}
}
func (m *QueryGetLastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastBlockHeightResponse.Merge(m, src)
}
func (m *QueryGetLastBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastBlockHeightResponse proto.InternalMessageInfo

func (m *QueryGetLastBlockHeightResponse) GetLastBlockHeight() *LastBlockHeight {
	if m != nil {
		return m.LastBlockHeight
	}
	return nil
}

type QueryAllLastBlockHeightRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastBlockHeightRequest) Reset()         { *m = QueryAllLastBlockHeightRequest{} }
func (m *QueryAllLastBlockHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastBlockHeightRequest) ProtoMessage()    {}
func (*QueryAllLastBlockHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{38}
}
func (m *QueryAllLastBlockHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastBlockHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastBlockHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastBlockHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastBlockHeightRequest.Merge(m, src)
}
func (m *QueryAllLastBlockHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastBlockHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastBlockHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastBlockHeightRequest proto.InternalMessageInfo

func (m *QueryAllLastBlockHeightRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLastBlockHeightResponse struct {
	LastBlockHeight []*LastBlockHeight  `protobuf:"bytes,1,rep,name=LastBlockHeight,proto3" json:"LastBlockHeight,omitempty"`
	Pagination      *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastBlockHeightResponse) Reset()         { *m = QueryAllLastBlockHeightResponse{} }
func (m *QueryAllLastBlockHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastBlockHeightResponse) ProtoMessage()    {}
func (*QueryAllLastBlockHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{39}
}
func (m *QueryAllLastBlockHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastBlockHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastBlockHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastBlockHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastBlockHeightResponse.Merge(m, src)
}
func (m *QueryAllLastBlockHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastBlockHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastBlockHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastBlockHeightResponse proto.InternalMessageInfo

func (m *QueryAllLastBlockHeightResponse) GetLastBlockHeight() []*LastBlockHeight {
	if m != nil {
		return m.LastBlockHeight
	}
	return nil
}

func (m *QueryAllLastBlockHeightResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetReceiveRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetReceiveRequest) Reset()         { *m = QueryGetReceiveRequest{} }
func (m *QueryGetReceiveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetReceiveRequest) ProtoMessage()    {}
func (*QueryGetReceiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{40}
}
func (m *QueryGetReceiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReceiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReceiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReceiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReceiveRequest.Merge(m, src)
}
func (m *QueryGetReceiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReceiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReceiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReceiveRequest proto.InternalMessageInfo

func (m *QueryGetReceiveRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetReceiveResponse struct {
	Receive *Receive `protobuf:"bytes,1,opt,name=Receive,proto3" json:"Receive,omitempty"`
}

func (m *QueryGetReceiveResponse) Reset()         { *m = QueryGetReceiveResponse{} }
func (m *QueryGetReceiveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetReceiveResponse) ProtoMessage()    {}
func (*QueryGetReceiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{41}
}
func (m *QueryGetReceiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetReceiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetReceiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetReceiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetReceiveResponse.Merge(m, src)
}
func (m *QueryGetReceiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetReceiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetReceiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetReceiveResponse proto.InternalMessageInfo

func (m *QueryGetReceiveResponse) GetReceive() *Receive {
	if m != nil {
		return m.Receive
	}
	return nil
}

type QueryAllReceiveRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReceiveRequest) Reset()         { *m = QueryAllReceiveRequest{} }
func (m *QueryAllReceiveRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllReceiveRequest) ProtoMessage()    {}
func (*QueryAllReceiveRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{42}
}
func (m *QueryAllReceiveRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReceiveRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReceiveRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReceiveRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReceiveRequest.Merge(m, src)
}
func (m *QueryAllReceiveRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReceiveRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReceiveRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReceiveRequest proto.InternalMessageInfo

func (m *QueryAllReceiveRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllReceiveResponse struct {
	Receive    []*Receive          `protobuf:"bytes,1,rep,name=Receive,proto3" json:"Receive,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllReceiveResponse) Reset()         { *m = QueryAllReceiveResponse{} }
func (m *QueryAllReceiveResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllReceiveResponse) ProtoMessage()    {}
func (*QueryAllReceiveResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{43}
}
func (m *QueryAllReceiveResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllReceiveResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllReceiveResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllReceiveResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllReceiveResponse.Merge(m, src)
}
func (m *QueryAllReceiveResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllReceiveResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllReceiveResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllReceiveResponse proto.InternalMessageInfo

func (m *QueryAllReceiveResponse) GetReceive() []*Receive {
	if m != nil {
		return m.Receive
	}
	return nil
}

func (m *QueryAllReceiveResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSendRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetSendRequest) Reset()         { *m = QueryGetSendRequest{} }
func (m *QueryGetSendRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSendRequest) ProtoMessage()    {}
func (*QueryGetSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{44}
}
func (m *QueryGetSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendRequest.Merge(m, src)
}
func (m *QueryGetSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendRequest proto.InternalMessageInfo

func (m *QueryGetSendRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetSendResponse struct {
	Send *Send `protobuf:"bytes,1,opt,name=Send,proto3" json:"Send,omitempty"`
}

func (m *QueryGetSendResponse) Reset()         { *m = QueryGetSendResponse{} }
func (m *QueryGetSendResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSendResponse) ProtoMessage()    {}
func (*QueryGetSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{45}
}
func (m *QueryGetSendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSendResponse.Merge(m, src)
}
func (m *QueryGetSendResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSendResponse proto.InternalMessageInfo

func (m *QueryGetSendResponse) GetSend() *Send {
	if m != nil {
		return m.Send
	}
	return nil
}

type QueryAllSendRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSendRequest) Reset()         { *m = QueryAllSendRequest{} }
func (m *QueryAllSendRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSendRequest) ProtoMessage()    {}
func (*QueryAllSendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{46}
}
func (m *QueryAllSendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSendRequest.Merge(m, src)
}
func (m *QueryAllSendRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSendRequest proto.InternalMessageInfo

func (m *QueryAllSendRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSendResponse struct {
	Send       []*Send             `protobuf:"bytes,1,rep,name=Send,proto3" json:"Send,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllSendResponse) Reset()         { *m = QueryAllSendResponse{} }
func (m *QueryAllSendResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSendResponse) ProtoMessage()    {}
func (*QueryAllSendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{47}
}
func (m *QueryAllSendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSendResponse.Merge(m, src)
}
func (m *QueryAllSendResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSendResponse proto.InternalMessageInfo

func (m *QueryAllSendResponse) GetSend() []*Send {
	if m != nil {
		return m.Send
	}
	return nil
}

func (m *QueryAllSendResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllSendPendingRequest struct {
}

func (m *QueryAllSendPendingRequest) Reset()         { *m = QueryAllSendPendingRequest{} }
func (m *QueryAllSendPendingRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllSendPendingRequest) ProtoMessage()    {}
func (*QueryAllSendPendingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{48}
}
func (m *QueryAllSendPendingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSendPendingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSendPendingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSendPendingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSendPendingRequest.Merge(m, src)
}
func (m *QueryAllSendPendingRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSendPendingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSendPendingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSendPendingRequest proto.InternalMessageInfo

type QueryAllSendPendingResponse struct {
	Send []*Send `protobuf:"bytes,1,rep,name=Send,proto3" json:"Send,omitempty"`
}

func (m *QueryAllSendPendingResponse) Reset()         { *m = QueryAllSendPendingResponse{} }
func (m *QueryAllSendPendingResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllSendPendingResponse) ProtoMessage()    {}
func (*QueryAllSendPendingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{49}
}
func (m *QueryAllSendPendingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllSendPendingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllSendPendingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllSendPendingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllSendPendingResponse.Merge(m, src)
}
func (m *QueryAllSendPendingResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllSendPendingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllSendPendingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllSendPendingResponse proto.InternalMessageInfo

func (m *QueryAllSendPendingResponse) GetSend() []*Send {
	if m != nil {
		return m.Send
	}
	return nil
}

type QueryGetNodeAccountRequest struct {
	Index string `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *QueryGetNodeAccountRequest) Reset()         { *m = QueryGetNodeAccountRequest{} }
func (m *QueryGetNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountRequest) ProtoMessage()    {}
func (*QueryGetNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{50}
}
func (m *QueryGetNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountRequest.Merge(m, src)
}
func (m *QueryGetNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountRequest proto.InternalMessageInfo

func (m *QueryGetNodeAccountRequest) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

type QueryGetNodeAccountResponse struct {
	NodeAccount *NodeAccount `protobuf:"bytes,1,opt,name=NodeAccount,proto3" json:"NodeAccount,omitempty"`
}

func (m *QueryGetNodeAccountResponse) Reset()         { *m = QueryGetNodeAccountResponse{} }
func (m *QueryGetNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetNodeAccountResponse) ProtoMessage()    {}
func (*QueryGetNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{51}
}
func (m *QueryGetNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetNodeAccountResponse.Merge(m, src)
}
func (m *QueryGetNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetNodeAccountResponse proto.InternalMessageInfo

func (m *QueryGetNodeAccountResponse) GetNodeAccount() *NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

type QueryAllNodeAccountRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountRequest) Reset()         { *m = QueryAllNodeAccountRequest{} }
func (m *QueryAllNodeAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountRequest) ProtoMessage()    {}
func (*QueryAllNodeAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{52}
}
func (m *QueryAllNodeAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountRequest.Merge(m, src)
}
func (m *QueryAllNodeAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountRequest proto.InternalMessageInfo

func (m *QueryAllNodeAccountRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllNodeAccountResponse struct {
	NodeAccount []*NodeAccount      `protobuf:"bytes,1,rep,name=NodeAccount,proto3" json:"NodeAccount,omitempty"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllNodeAccountResponse) Reset()         { *m = QueryAllNodeAccountResponse{} }
func (m *QueryAllNodeAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllNodeAccountResponse) ProtoMessage()    {}
func (*QueryAllNodeAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{53}
}
func (m *QueryAllNodeAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllNodeAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllNodeAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllNodeAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllNodeAccountResponse.Merge(m, src)
}
func (m *QueryAllNodeAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllNodeAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllNodeAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllNodeAccountResponse proto.InternalMessageInfo

func (m *QueryAllNodeAccountResponse) GetNodeAccount() []*NodeAccount {
	if m != nil {
		return m.NodeAccount
	}
	return nil
}

func (m *QueryAllNodeAccountResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryLastMetaHeightRequest struct {
}

func (m *QueryLastMetaHeightRequest) Reset()         { *m = QueryLastMetaHeightRequest{} }
func (m *QueryLastMetaHeightRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastMetaHeightRequest) ProtoMessage()    {}
func (*QueryLastMetaHeightRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{54}
}
func (m *QueryLastMetaHeightRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastMetaHeightRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastMetaHeightRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastMetaHeightRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastMetaHeightRequest.Merge(m, src)
}
func (m *QueryLastMetaHeightRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastMetaHeightRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastMetaHeightRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastMetaHeightRequest proto.InternalMessageInfo

type QueryLastMetaHeightResponse struct {
	Height uint64 `protobuf:"varint,1,opt,name=Height,proto3" json:"Height,omitempty"`
}

func (m *QueryLastMetaHeightResponse) Reset()         { *m = QueryLastMetaHeightResponse{} }
func (m *QueryLastMetaHeightResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastMetaHeightResponse) ProtoMessage()    {}
func (*QueryLastMetaHeightResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7136b193d26074a, []int{55}
}
func (m *QueryLastMetaHeightResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastMetaHeightResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastMetaHeightResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastMetaHeightResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastMetaHeightResponse.Merge(m, src)
}
func (m *QueryLastMetaHeightResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastMetaHeightResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastMetaHeightResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastMetaHeightResponse proto.InternalMessageInfo

func (m *QueryLastMetaHeightResponse) GetHeight() uint64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryGetZetaConversionRateRequest)(nil), "zetachain.zetacore.zetacore.QueryGetZetaConversionRateRequest")
	proto.RegisterType((*QueryGetZetaConversionRateResponse)(nil), "zetachain.zetacore.zetacore.QueryGetZetaConversionRateResponse")
	proto.RegisterType((*QueryAllZetaConversionRateRequest)(nil), "zetachain.zetacore.zetacore.QueryAllZetaConversionRateRequest")
	proto.RegisterType((*QueryAllZetaConversionRateResponse)(nil), "zetachain.zetacore.zetacore.QueryAllZetaConversionRateResponse")
	proto.RegisterType((*QueryGetKeygenRequest)(nil), "zetachain.zetacore.zetacore.QueryGetKeygenRequest")
	proto.RegisterType((*QueryGetKeygenResponse)(nil), "zetachain.zetacore.zetacore.QueryGetKeygenResponse")
	proto.RegisterType((*QueryGetTSSVoterRequest)(nil), "zetachain.zetacore.zetacore.QueryGetTSSVoterRequest")
	proto.RegisterType((*QueryGetTSSVoterResponse)(nil), "zetachain.zetacore.zetacore.QueryGetTSSVoterResponse")
	proto.RegisterType((*QueryAllTSSVoterRequest)(nil), "zetachain.zetacore.zetacore.QueryAllTSSVoterRequest")
	proto.RegisterType((*QueryAllTSSVoterResponse)(nil), "zetachain.zetacore.zetacore.QueryAllTSSVoterResponse")
	proto.RegisterType((*QueryGetTSSRequest)(nil), "zetachain.zetacore.zetacore.QueryGetTSSRequest")
	proto.RegisterType((*QueryGetTSSResponse)(nil), "zetachain.zetacore.zetacore.QueryGetTSSResponse")
	proto.RegisterType((*QueryAllTSSRequest)(nil), "zetachain.zetacore.zetacore.QueryAllTSSRequest")
	proto.RegisterType((*QueryAllTSSResponse)(nil), "zetachain.zetacore.zetacore.QueryAllTSSResponse")
	proto.RegisterType((*QueryTxListRichRequest)(nil), "zetachain.zetacore.zetacore.QueryTxListRichRequest")
	proto.RegisterType((*QueryTxListRichResponse)(nil), "zetachain.zetacore.zetacore.QueryTxListRichResponse")
	proto.RegisterType((*QueryGetInTxRequest)(nil), "zetachain.zetacore.zetacore.QueryGetInTxRequest")
	proto.RegisterType((*QueryGetInTxResponse)(nil), "zetachain.zetacore.zetacore.QueryGetInTxResponse")
	proto.RegisterType((*QueryGetInTxRichRequest)(nil), "zetachain.zetacore.zetacore.QueryGetInTxRichRequest")
	proto.RegisterType((*QueryGetInTxRichResponse)(nil), "zetachain.zetacore.zetacore.QueryGetInTxRichResponse")
	proto.RegisterType((*QueryAllInTxRequest)(nil), "zetachain.zetacore.zetacore.QueryAllInTxRequest")
	proto.RegisterType((*QueryAllInTxResponse)(nil), "zetachain.zetacore.zetacore.QueryAllInTxResponse")
	proto.RegisterType((*QueryGetTxRequest)(nil), "zetachain.zetacore.zetacore.QueryGetTxRequest")
	proto.RegisterType((*QueryGetTxResponse)(nil), "zetachain.zetacore.zetacore.QueryGetTxResponse")
	proto.RegisterType((*QueryGetGasBalanceRequest)(nil), "zetachain.zetacore.zetacore.QueryGetGasBalanceRequest")
	proto.RegisterType((*QueryGetGasBalanceResponse)(nil), "zetachain.zetacore.zetacore.QueryGetGasBalanceResponse")
	proto.RegisterType((*QueryAllGasBalanceRequest)(nil), "zetachain.zetacore.zetacore.QueryAllGasBalanceRequest")
	proto.RegisterType((*QueryAllGasBalanceResponse)(nil), "zetachain.zetacore.zetacore.QueryAllGasBalanceResponse")
	proto.RegisterType((*QueryGetGasPriceRequest)(nil), "zetachain.zetacore.zetacore.QueryGetGasPriceRequest")
	proto.RegisterType((*QueryGetGasPriceResponse)(nil), "zetachain.zetacore.zetacore.QueryGetGasPriceResponse")
	proto.RegisterType((*QueryAllGasPriceRequest)(nil), "zetachain.zetacore.zetacore.QueryAllGasPriceRequest")
	proto.RegisterType((*QueryAllGasPriceResponse)(nil), "zetachain.zetacore.zetacore.QueryAllGasPriceResponse")
	proto.RegisterType((*QueryGetChainNoncesRequest)(nil), "zetachain.zetacore.zetacore.QueryGetChainNoncesRequest")
	proto.RegisterType((*QueryGetChainNoncesResponse)(nil), "zetachain.zetacore.zetacore.QueryGetChainNoncesResponse")
	proto.RegisterType((*QueryAllChainNoncesRequest)(nil), "zetachain.zetacore.zetacore.QueryAllChainNoncesRequest")
	proto.RegisterType((*QueryAllChainNoncesResponse)(nil), "zetachain.zetacore.zetacore.QueryAllChainNoncesResponse")
	proto.RegisterType((*QueryGetLastBlockHeightRequest)(nil), "zetachain.zetacore.zetacore.QueryGetLastBlockHeightRequest")
	proto.RegisterType((*QueryGetLastBlockHeightResponse)(nil), "zetachain.zetacore.zetacore.QueryGetLastBlockHeightResponse")
	proto.RegisterType((*QueryAllLastBlockHeightRequest)(nil), "zetachain.zetacore.zetacore.QueryAllLastBlockHeightRequest")
	proto.RegisterType((*QueryAllLastBlockHeightResponse)(nil), "zetachain.zetacore.zetacore.QueryAllLastBlockHeightResponse")
	proto.RegisterType((*QueryGetReceiveRequest)(nil), "zetachain.zetacore.zetacore.QueryGetReceiveRequest")
	proto.RegisterType((*QueryGetReceiveResponse)(nil), "zetachain.zetacore.zetacore.QueryGetReceiveResponse")
	proto.RegisterType((*QueryAllReceiveRequest)(nil), "zetachain.zetacore.zetacore.QueryAllReceiveRequest")
	proto.RegisterType((*QueryAllReceiveResponse)(nil), "zetachain.zetacore.zetacore.QueryAllReceiveResponse")
	proto.RegisterType((*QueryGetSendRequest)(nil), "zetachain.zetacore.zetacore.QueryGetSendRequest")
	proto.RegisterType((*QueryGetSendResponse)(nil), "zetachain.zetacore.zetacore.QueryGetSendResponse")
	proto.RegisterType((*QueryAllSendRequest)(nil), "zetachain.zetacore.zetacore.QueryAllSendRequest")
	proto.RegisterType((*QueryAllSendResponse)(nil), "zetachain.zetacore.zetacore.QueryAllSendResponse")
	proto.RegisterType((*QueryAllSendPendingRequest)(nil), "zetachain.zetacore.zetacore.QueryAllSendPendingRequest")
	proto.RegisterType((*QueryAllSendPendingResponse)(nil), "zetachain.zetacore.zetacore.QueryAllSendPendingResponse")
	proto.RegisterType((*QueryGetNodeAccountRequest)(nil), "zetachain.zetacore.zetacore.QueryGetNodeAccountRequest")
	proto.RegisterType((*QueryGetNodeAccountResponse)(nil), "zetachain.zetacore.zetacore.QueryGetNodeAccountResponse")
	proto.RegisterType((*QueryAllNodeAccountRequest)(nil), "zetachain.zetacore.zetacore.QueryAllNodeAccountRequest")
	proto.RegisterType((*QueryAllNodeAccountResponse)(nil), "zetachain.zetacore.zetacore.QueryAllNodeAccountResponse")
	proto.RegisterType((*QueryLastMetaHeightRequest)(nil), "zetachain.zetacore.zetacore.QueryLastMetaHeightRequest")
	proto.RegisterType((*QueryLastMetaHeightResponse)(nil), "zetachain.zetacore.zetacore.QueryLastMetaHeightResponse")
}

func init() { proto.RegisterFile("zetacore/query.proto", fileDescriptor_a7136b193d26074a) }

var fileDescriptor_a7136b193d26074a = []byte{
	// 1949 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x5a, 0xcf, 0x6f, 0x14, 0x47,
	0x16, 0x76, 0xb9, 0x8d, 0xd9, 0x2d, 0xb4, 0xac, 0xb6, 0x30, 0xc6, 0x8c, 0x61, 0x6c, 0xb7, 0x31,
	0x36, 0x60, 0xa6, 0xb1, 0x31, 0xb0, 0x2b, 0x56, 0xac, 0xc6, 0x48, 0xeb, 0x65, 0x01, 0x8b, 0x9d,
	0xf1, 0x22, 0x2d, 0x5a, 0x34, 0xdb, 0x9e, 0xa9, 0x1d, 0xb7, 0x68, 0xba, 0xcd, 0x74, 0xdb, 0x1a,
	0xef, 0x6a, 0x2f, 0x7b, 0x8d, 0x12, 0x25, 0x44, 0xe2, 0x10, 0x29, 0x52, 0x82, 0x22, 0xa4, 0x1c,
	0x82, 0x22, 0xee, 0xb9, 0x70, 0x22, 0x97, 0x08, 0x29, 0x39, 0xe4, 0x14, 0x45, 0x90, 0x3f, 0x24,
	0xea, 0xea, 0xd7, 0xd5, 0xd5, 0x3f, 0xa6, 0xbb, 0x66, 0x68, 0x72, 0xeb, 0xa9, 0xae, 0xf7, 0xea,
	0xfb, 0xde, 0x7b, 0x55, 0xaf, 0xfa, 0xb3, 0xf1, 0xd8, 0x7f, 0xa8, 0xab, 0x37, 0xed, 0x0e, 0xd5,
	0x1e, 0xec, 0xd0, 0xce, 0x5e, 0x65, 0xbb, 0x63, 0xbb, 0x36, 0x99, 0x64, 0xa3, 0x5b, 0xba, 0x61,
	0x55, 0x82, 0xf7, 0xfc, 0xa1, 0x74, 0xac, 0x6d, 0xdb, 0x6d, 0x93, 0x6a, 0xfa, 0xb6, 0xa1, 0xe9,
	0x96, 0x65, 0xbb, 0xba, 0x6b, 0xd8, 0x96, 0xe3, 0x9b, 0x96, 0x4e, 0x37, 0x6d, 0xe7, 0xbe, 0xed,
	0x68, 0x9b, 0xba, 0x03, 0x3e, 0xb5, 0xdd, 0xa5, 0x4d, 0xea, 0xea, 0x4b, 0xda, 0xb6, 0xde, 0x36,
	0x2c, 0x36, 0x19, 0xe6, 0xce, 0xf2, 0xc5, 0xbd, 0x87, 0x46, 0xd3, 0xb6, 0x76, 0x69, 0xc7, 0x31,
	0x6c, 0xab, 0xd1, 0xd1, 0x5d, 0x0a, 0x93, 0xc6, 0xda, 0x76, 0xdb, 0x66, 0x8f, 0x9a, 0xf7, 0x04,
	0xa3, 0x87, 0xb9, 0xe9, 0x3d, 0xba, 0xd7, 0xa6, 0x81, 0xc7, 0x09, 0x3e, 0xec, 0x3a, 0x4e, 0x63,
	0xd7, 0x76, 0x69, 0x07, 0xde, 0x10, 0xf1, 0x4d, 0xe0, 0x9a, 0x8f, 0x19, 0x56, 0xc3, 0xed, 0xc2,
	0xe8, 0x78, 0x38, 0xb3, 0xdb, 0x30, 0x0d, 0xc7, 0x85, 0xf1, 0x12, 0x1f, 0x6f, 0xeb, 0x4e, 0x63,
	0x53, 0x37, 0x75, 0xab, 0x49, 0x13, 0xeb, 0x7a, 0xef, 0xb6, 0x3b, 0x06, 0x7f, 0x33, 0xc9, 0xdf,
	0xb0, 0x78, 0x36, 0x2c, 0xdb, 0x6a, 0xd2, 0x00, 0xc0, 0x34, 0x7f, 0x69, 0xea, 0x8e, 0xdb, 0xd8,
	0x34, 0xed, 0xe6, 0xbd, 0xc6, 0x16, 0x35, 0xda, 0x5b, 0x6e, 0x02, 0x4c, 0x87, 0x36, 0xa9, 0xb1,
	0x1b, 0xb8, 0x3d, 0xc4, 0xc7, 0x1d, 0x6a, 0xb5, 0x12, 0x6b, 0x59, 0x76, 0x8b, 0x36, 0xf4, 0x66,
	0xd3, 0xde, 0xb1, 0xc0, 0x93, 0xfa, 0x07, 0x3c, 0xf3, 0x37, 0x2f, 0x1d, 0x6b, 0xd4, 0xbd, 0x43,
	0x5d, 0xfd, 0x2a, 0x0f, 0x76, 0x4d, 0x77, 0x69, 0x8d, 0x3e, 0xd8, 0xa1, 0x8e, 0x4b, 0xc6, 0xf0,
	0x3e, 0xc3, 0x6a, 0xd1, 0xee, 0x04, 0x9a, 0x46, 0x0b, 0xbf, 0xae, 0xf9, 0x3f, 0xd4, 0x77, 0x10,
	0x56, 0xb3, 0x6c, 0x9d, 0x6d, 0xdb, 0x72, 0x28, 0xa1, 0x98, 0x05, 0x39, 0xfa, 0x96, 0x79, 0x3a,
	0xb0, 0xac, 0x55, 0x32, 0x4a, 0xaa, 0x92, 0x74, 0xba, 0x3a, 0xf2, 0xe2, 0x87, 0xa9, 0xa1, 0x5a,
	0x8a, 0x43, 0xf5, 0x1e, 0x10, 0xa9, 0x9a, 0x66, 0x6f, 0x22, 0x7f, 0xc6, 0x38, 0x2c, 0x37, 0xc0,
	0x70, 0xb2, 0xe2, 0xd7, 0x66, 0xc5, 0xab, 0xcd, 0x8a, 0x5f, 0xef, 0x50, 0x9b, 0x95, 0x5b, 0x7a,
	0x3b, 0xb0, 0xad, 0x09, 0x96, 0xea, 0x77, 0x01, 0xf5, 0x1e, 0xab, 0xe5, 0x50, 0x57, 0x0a, 0xa5,
	0x4e, 0xd6, 0x22, 0xac, 0x86, 0x19, 0xab, 0xf9, 0x5c, 0x56, 0x3e, 0xc6, 0x08, 0xad, 0x23, 0xf8,
	0x70, 0x90, 0xd0, 0xeb, 0x6c, 0xff, 0x00, 0x77, 0xf5, 0xef, 0x78, 0x3c, 0xfe, 0x02, 0x28, 0x5e,
	0xc6, 0xa3, 0xfe, 0x08, 0x44, 0x73, 0x36, 0x93, 0x16, 0x18, 0x83, 0x89, 0xaa, 0xe1, 0x23, 0x81,
	0xdb, 0x8d, 0x7a, 0xfd, 0xb6, 0xb7, 0x2f, 0xb3, 0x4b, 0xee, 0x2e, 0x9e, 0x48, 0x1a, 0x00, 0x92,
	0x2a, 0xfe, 0x55, 0x30, 0x06, 0x58, 0xe6, 0x32, 0xb1, 0x70, 0x07, 0xdc, 0x4c, 0xd5, 0x01, 0x4f,
	0xd5, 0x34, 0xe3, 0x78, 0x8a, 0xaa, 0x9c, 0x27, 0x08, 0x28, 0x44, 0xd6, 0x48, 0xa5, 0xa0, 0x0c,
	0x40, 0xa1, 0xb8, 0x5a, 0x38, 0x8d, 0x89, 0x10, 0xea, 0xec, 0xb4, 0x5c, 0xc3, 0x87, 0x22, 0x73,
	0x81, 0xce, 0x32, 0x56, 0x36, 0xea, 0x75, 0x08, 0xd6, 0x74, 0x1e, 0x93, 0x9a, 0x37, 0x59, 0xfd,
	0x27, 0x2c, 0xeb, 0x87, 0xa7, 0xe8, 0xe8, 0x3f, 0x44, 0x80, 0x34, 0x70, 0x1f, 0x47, 0xaa, 0x48,
	0x23, 0x2d, 0x2e, 0xd2, 0x8b, 0xb0, 0xb9, 0x36, 0xba, 0x37, 0x0c, 0xc7, 0xad, 0x19, 0xcd, 0xad,
	0x80, 0x36, 0xc1, 0x23, 0x5e, 0x07, 0x60, 0x84, 0x47, 0x6a, 0xec, 0x59, 0x6d, 0x41, 0x8d, 0x8a,
	0xb3, 0x81, 0xc5, 0x12, 0x1e, 0x76, 0xbb, 0x40, 0x62, 0x26, 0x93, 0x44, 0x9d, 0x5a, 0xad, 0xda,
	0xb0, 0xdb, 0x25, 0xe3, 0x78, 0xd4, 0xa4, 0x56, 0xdb, 0xdd, 0x62, 0x04, 0x46, 0x6a, 0xf0, 0x4b,
	0x3d, 0x13, 0x66, 0xf4, 0x9a, 0xb5, 0xd1, 0xcd, 0x4e, 0xff, 0x4d, 0x3c, 0x16, 0x9d, 0x0c, 0x78,
	0x2e, 0xe0, 0x11, 0xef, 0x37, 0xe4, 0x2b, 0x1b, 0x11, 0x33, 0x64, 0xd3, 0xc5, 0x53, 0x81, 0x8d,
	0x0a, 0x01, 0xe9, 0xb5, 0xfe, 0x44, 0xd2, 0x20, 0x16, 0x13, 0x24, 0x1d, 0x13, 0xf5, 0x6e, 0x58,
	0x23, 0x22, 0xf7, 0xa2, 0x6a, 0xf0, 0x11, 0x82, 0x70, 0x71, 0xff, 0x89, 0x70, 0x29, 0x7d, 0x84,
	0xab, 0xb8, 0x3a, 0xbc, 0x8e, 0x7f, 0xc7, 0x77, 0x71, 0x57, 0x28, 0xc1, 0x7f, 0x77, 0xec, 0xfb,
	0x8c, 0xaf, 0x52, 0x63, 0xcf, 0xe4, 0x20, 0x1e, 0x76, 0x6d, 0xb6, 0x92, 0x52, 0x1b, 0x76, 0x6d,
	0x5e, 0xa6, 0x8a, 0x3f, 0x87, 0x95, 0xe9, 0x5d, 0xe1, 0xf8, 0x08, 0x29, 0x6a, 0x42, 0x85, 0x4e,
	0x65, 0x6f, 0xb3, 0x6e, 0x4a, 0x7d, 0x2a, 0xbc, 0x3e, 0x97, 0xf0, 0xd1, 0xc0, 0xfd, 0x9a, 0xee,
	0xac, 0xfa, 0xb7, 0xae, 0xec, 0x2a, 0xa1, 0xb8, 0x94, 0x66, 0x02, 0xc8, 0xd6, 0x30, 0x0e, 0x47,
	0x21, 0xbb, 0xf3, 0x99, 0x08, 0x05, 0x27, 0x82, 0xa9, 0xda, 0x04, 0x64, 0x55, 0xd3, 0x4c, 0x22,
	0x2b, 0xaa, 0x86, 0x9e, 0x22, 0x20, 0x13, 0x5b, 0xa5, 0x07, 0x19, 0x65, 0x40, 0x32, 0xc5, 0xd5,
	0x96, 0xb0, 0xa7, 0xd7, 0x74, 0xe7, 0x96, 0x77, 0x13, 0x96, 0xee, 0xf4, 0xa1, 0x41, 0xd8, 0x26,
	0x83, 0x31, 0xa9, 0x4e, 0xcf, 0x1d, 0x70, 0x33, 0xb1, 0xd3, 0xc7, 0xf1, 0xbc, 0x8d, 0x4e, 0x9f,
	0x43, 0x41, 0x19, 0x80, 0x42, 0x71, 0xb9, 0x59, 0x0e, 0x37, 0xc6, 0x55, 0x6f, 0xf9, 0x75, 0xf6,
	0x2d, 0x92, 0x9d, 0x1e, 0x03, 0x4f, 0xa6, 0xda, 0x00, 0xbd, 0xbf, 0xe2, 0x03, 0xc2, 0x30, 0x04,
	0x71, 0x21, 0x93, 0xa1, 0xe8, 0x46, 0x34, 0x56, 0x5b, 0x61, 0xa9, 0xa7, 0xc0, 0x2b, 0x2a, 0x5b,
	0xcf, 0x10, 0x30, 0x8a, 0x2f, 0xd3, 0x8b, 0x91, 0x32, 0x30, 0xa3, 0xe2, 0x32, 0x77, 0x11, 0x97,
	0x83, 0x2c, 0xdc, 0xd0, 0x1d, 0x77, 0xd5, 0xfb, 0x50, 0xfc, 0x0b, 0xfb, 0x4e, 0xcc, 0xce, 0xde,
	0x1e, 0x9e, 0xea, 0x69, 0x07, 0x7c, 0x6f, 0xe3, 0xdf, 0xc6, 0x5e, 0x41, 0x70, 0x17, 0x33, 0x39,
	0xc7, 0xdd, 0xc5, 0x9d, 0xa8, 0x5b, 0x00, 0xb9, 0x6a, 0x9a, 0x3d, 0x20, 0x17, 0x95, 0xd1, 0xe7,
	0x08, 0x58, 0xa6, 0x2d, 0x95, 0xc5, 0x52, 0x79, 0x63, 0x96, 0xc5, 0x65, 0xb8, 0x12, 0x7e, 0x78,
	0xd5, 0xfc, 0x2f, 0xfd, 0xec, 0xcc, 0xfe, 0x23, 0x3c, 0x67, 0xf9, 0x7c, 0xe0, 0x7a, 0x05, 0xef,
	0x87, 0x21, 0x08, 0xea, 0x89, 0x4c, 0x8e, 0x81, 0x79, 0x60, 0xa4, 0xfe, 0x0b, 0xa0, 0x54, 0x4d,
	0x33, 0x06, 0xa5, 0xa8, 0x8c, 0x3d, 0x46, 0xe1, 0xa9, 0x9c, 0x89, 0x5e, 0xe9, 0x1b, 0x7d, 0x71,
	0x19, 0x11, 0x6e, 0xc6, 0xec, 0xc6, 0x28, 0x7b, 0x33, 0xf6, 0x27, 0x87, 0x57, 0x3d, 0xef, 0xb7,
	0xfc, 0xbd, 0x94, 0x4d, 0x17, 0x6f, 0xa6, 0xe2, 0xda, 0x6f, 0xe3, 0x66, 0xda, 0x03, 0xae, 0xd2,
	0x07, 0xdc, 0xe2, 0x62, 0x7e, 0x2c, 0x6c, 0x01, 0x9e, 0xe3, 0x5b, 0xd4, 0x6a, 0x19, 0x56, 0x3b,
	0x10, 0x27, 0x36, 0xc2, 0x93, 0x3b, 0xf2, 0xf6, 0x8d, 0xc0, 0x8b, 0x5d, 0x71, 0xdd, 0x6e, 0xd1,
	0xaa, 0xaf, 0x9a, 0x49, 0x77, 0xc5, 0x88, 0x4d, 0xd8, 0x43, 0x84, 0x61, 0xa9, 0xae, 0x28, 0xba,
	0x11, 0x8d, 0xc5, 0xae, 0x98, 0x02, 0xef, 0x6d, 0x74, 0x45, 0x29, 0x46, 0xca, 0xc0, 0x8c, 0x8a,
	0xaf, 0x16, 0xef, 0x50, 0xbe, 0x49, 0x5d, 0x3d, 0xd2, 0x5e, 0xd4, 0x0b, 0xc0, 0x28, 0xfe, 0x16,
	0x18, 0x8d, 0xe3, 0x51, 0xa1, 0xdd, 0x8d, 0xd4, 0xe0, 0xd7, 0xf2, 0x67, 0x27, 0xf1, 0x3e, 0x66,
	0x47, 0xbe, 0x41, 0x98, 0x24, 0xe5, 0x39, 0x72, 0x25, 0x93, 0x75, 0xae, 0xc6, 0x5a, 0xfa, 0xd3,
	0xc0, 0xf6, 0x3e, 0x72, 0xf5, 0xd2, 0xff, 0xbf, 0xfd, 0xe9, 0xc3, 0xe1, 0x25, 0xa2, 0x31, 0xd9,
	0xfc, 0x2c, 0xf3, 0xa4, 0x45, 0xa4, 0xf4, 0xa8, 0xa1, 0xf6, 0x5f, 0x56, 0xb4, 0xff, 0x23, 0x5f,
	0x23, 0x7c, 0x38, 0xe9, 0xb7, 0x6a, 0x9a, 0x32, 0x9c, 0xb2, 0xe4, 0x56, 0x19, 0x4e, 0x99, 0x02,
	0xaa, 0xaa, 0x31, 0x4e, 0xa7, 0xc8, 0xbc, 0x24, 0x27, 0xf2, 0x08, 0x05, 0x7a, 0x24, 0x59, 0x96,
	0x0a, 0x68, 0x44, 0xe7, 0x2c, 0x9d, 0xef, 0xcb, 0x06, 0x40, 0xce, 0x32, 0x90, 0xc7, 0xc9, 0x64,
	0x2a, 0x48, 0xff, 0x0f, 0x11, 0xe4, 0x09, 0x0a, 0xb5, 0x3d, 0xb2, 0x22, 0xb5, 0x4c, 0x4c, 0x82,
	0x2c, 0x5d, 0xe8, 0xd3, 0x0a, 0xe0, 0x9d, 0x65, 0xf0, 0xe6, 0xc9, 0x5c, 0x2a, 0xbc, 0x60, 0x3a,
	0xaf, 0x86, 0x4f, 0x11, 0x3e, 0x10, 0x0c, 0x7a, 0x35, 0xb0, 0x22, 0x95, 0xc3, 0x01, 0xb0, 0xa6,
	0x08, 0xa0, 0xea, 0x1c, 0xc3, 0x3a, 0x45, 0x8e, 0x67, 0x62, 0x25, 0x0f, 0x11, 0xd3, 0xeb, 0x88,
	0x26, 0x1b, 0x91, 0x00, 0xd6, 0x39, 0x79, 0x03, 0x40, 0xb4, 0xc0, 0x10, 0xa9, 0x64, 0xba, 0x17,
	0x22, 0x1e, 0xb8, 0x77, 0x11, 0x1e, 0xdd, 0xa8, 0xd7, 0xbd, 0x98, 0x69, 0xb2, 0xec, 0xfb, 0xc0,
	0x15, 0x55, 0x2c, 0xd5, 0x69, 0x86, 0xab, 0x44, 0x26, 0x7a, 0xe1, 0x22, 0x9f, 0x20, 0x8c, 0x43,
	0x91, 0x90, 0x48, 0x94, 0x76, 0x42, 0x80, 0x2c, 0xad, 0xf4, 0x67, 0x04, 0xd8, 0xe6, 0x19, 0xb6,
	0x19, 0x32, 0x95, 0x8a, 0xcd, 0x0d, 0x31, 0x3d, 0x42, 0xbe, 0xe4, 0x45, 0xe4, 0xf2, 0x22, 0xa8,
	0x71, 0xa5, 0xa5, 0x3e, 0x2c, 0x00, 0xd6, 0x29, 0x06, 0x6b, 0x96, 0xcc, 0xa4, 0xc2, 0x32, 0xac,
	0x8d, 0x2e, 0xcf, 0xe5, 0x47, 0x08, 0x8f, 0x7a, 0xb6, 0xeb, 0xf5, 0x5f, 0x06, 0xda, 0x19, 0x06,
	0x6d, 0x8e, 0xcc, 0xf6, 0x84, 0xb6, 0x1e, 0x16, 0x9a, 0x77, 0x94, 0x04, 0x3a, 0xa7, 0xe4, 0x51,
	0x12, 0xd3, 0x51, 0x25, 0x8f, 0x92, 0xb8, 0x98, 0x9a, 0x73, 0x94, 0x18, 0x30, 0x9d, 0x03, 0xfd,
	0x00, 0xe1, 0xfd, 0x9e, 0x0f, 0x6f, 0x4b, 0xc8, 0x55, 0x78, 0x9f, 0x61, 0x8c, 0x29, 0xa8, 0xea,
	0x0c, 0xc3, 0x37, 0x49, 0x8e, 0xf6, 0xc4, 0x47, 0xde, 0xf3, 0x76, 0x29, 0xab, 0x40, 0x52, 0x91,
	0x3b, 0x0c, 0x38, 0x20, 0x4d, 0x7a, 0xbe, 0x54, 0x63, 0xf0, 0xf7, 0x01, 0x79, 0x8a, 0x44, 0xb1,
	0x8e, 0x5c, 0x94, 0x5a, 0x24, 0xa1, 0x2c, 0x96, 0x2e, 0xf5, 0x6d, 0x27, 0xd5, 0x62, 0xdb, 0xdc,
	0x80, 0x67, 0xf5, 0x73, 0x84, 0x7f, 0x13, 0xfa, 0xf1, 0x72, 0x7b, 0x51, 0x2a, 0x53, 0x03, 0x61,
	0x4e, 0xd5, 0x37, 0x73, 0x0e, 0x98, 0x10, 0x33, 0xdb, 0x2a, 0x5c, 0x30, 0x5b, 0x91, 0x0d, 0x91,
	0x28, 0x07, 0x4a, 0x6e, 0x95, 0xb8, 0xc0, 0x97, 0xb3, 0x55, 0xda, 0x30, 0x3d, 0xd2, 0x75, 0x03,
	0x1f, 0xf2, 0x5d, 0x77, 0x00, 0xac, 0x29, 0x62, 0x64, 0x4e, 0xd7, 0x0d, 0xb0, 0x92, 0x67, 0x28,
	0xa2, 0x81, 0x11, 0xb9, 0x92, 0x4b, 0x6a, 0x76, 0xa5, 0xdf, 0xf7, 0x6f, 0x08, 0x48, 0xcf, 0x31,
	0xa4, 0xa7, 0xc9, 0x42, 0x2a, 0xd2, 0x66, 0x68, 0xc1, 0x03, 0xfb, 0x05, 0xc2, 0x07, 0x05, 0x4f,
	0x5e, 0x6c, 0xe5, 0xca, 0x6e, 0x30, 0xdc, 0xe9, 0xea, 0x61, 0xce, 0x2d, 0x42, 0xc0, 0x4d, 0x9e,
	0xa3, 0x84, 0x24, 0x45, 0x2e, 0x4b, 0xc5, 0x2b, 0x5d, 0x4e, 0x2b, 0xfd, 0x71, 0x30, 0x63, 0x00,
	0xbe, 0xc2, 0x80, 0x57, 0xc8, 0x62, 0x2a, 0x70, 0x33, 0x6a, 0xc5, 0x83, 0xfe, 0x15, 0xc2, 0x24,
	0xe6, 0xd1, 0x0b, 0xfc, 0x65, 0xa9, 0xf8, 0x0d, 0xce, 0xa3, 0xb7, 0xd0, 0xa7, 0x2e, 0x32, 0x1e,
	0x27, 0xc9, 0x09, 0x19, 0x1e, 0xe4, 0x31, 0xe2, 0x6a, 0x13, 0x91, 0xfb, 0x24, 0x88, 0x2a, 0x62,
	0xa5, 0x95, 0xfe, 0x8c, 0xa4, 0x40, 0xc2, 0x7f, 0xfa, 0xf0, 0x20, 0x7f, 0x8c, 0x30, 0x06, 0x0f,
	0x5e, 0x70, 0xcf, 0x4b, 0xc5, 0xa7, 0x7f, 0x9c, 0x49, 0x2d, 0x4e, 0x3d, 0xc1, 0x70, 0x96, 0xc9,
	0xb1, 0x2c, 0x9c, 0xec, 0x72, 0xc7, 0x64, 0x20, 0xb9, 0x1b, 0x94, 0x20, 0x68, 0x49, 0xde, 0xa0,
	0x44, 0x89, 0x2a, 0xe7, 0x72, 0xe7, 0x50, 0xab, 0x15, 0xb9, 0x96, 0x78, 0xb6, 0xf2, 0xd7, 0x92,
	0x3e, 0xb1, 0xc5, 0xe4, 0xb3, 0x9c, 0x6b, 0x89, 0x87, 0x8d, 0x1d, 0x53, 0x80, 0x09, 0xf4, 0x2b,
	0xc9, 0x63, 0x2a, 0xa9, 0x87, 0x49, 0x1e, 0x53, 0x29, 0x52, 0x59, 0xce, 0x31, 0xe5, 0x84, 0x16,
	0xac, 0x17, 0x88, 0xe2, 0x8d, 0x5c, 0x2f, 0x48, 0x2a, 0x55, 0x92, 0xbd, 0x20, 0x45, 0x7b, 0xca,
	0xe9, 0x05, 0x56, 0x68, 0x11, 0xe9, 0x05, 0x82, 0x27, 0xf9, 0x5e, 0x30, 0x18, 0xee, 0x74, 0xcd,
	0x2c, 0x27, 0xc8, 0x02, 0x6e, 0xf2, 0x25, 0xc2, 0x07, 0xa3, 0x32, 0x95, 0x0c, 0xde, 0x54, 0xd9,
	0x4b, 0x06, 0x6f, 0xba, 0x22, 0x96, 0xf3, 0x6d, 0x62, 0x46, 0x8c, 0x56, 0xaf, 0xbd, 0x78, 0x55,
	0x46, 0x2f, 0x5f, 0x95, 0xd1, 0x8f, 0xaf, 0xca, 0xe8, 0xfd, 0xd7, 0xe5, 0xa1, 0x97, 0xaf, 0xcb,
	0x43, 0xdf, 0xbf, 0x2e, 0x0f, 0xdd, 0xd1, 0xda, 0x86, 0xbb, 0xb5, 0xb3, 0x59, 0x69, 0xda, 0xf7,
	0x53, 0x1d, 0x75, 0x85, 0x9b, 0xf1, 0xde, 0x36, 0x75, 0x36, 0x47, 0xd9, 0x3f, 0x28, 0x9e, 0xff,
	0x39, 0x00, 0x00, 0xff, 0xff, 0x56, 0xe8, 0x3b, 0x17, 0x8c, 0x2a, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a ZetaConversionRate by index.
	ZetaConversionRate(ctx context.Context, in *QueryGetZetaConversionRateRequest, opts ...grpc.CallOption) (*QueryGetZetaConversionRateResponse, error)
	// Queries a list of ZetaConversionRate items.
	ZetaConversionRateAll(ctx context.Context, in *QueryAllZetaConversionRateRequest, opts ...grpc.CallOption) (*QueryAllZetaConversionRateResponse, error)
	// Queries a keygen by index.
	Keygen(ctx context.Context, in *QueryGetKeygenRequest, opts ...grpc.CallOption) (*QueryGetKeygenResponse, error)
	// Queries a tSSVoter by index.
	TSSVoter(ctx context.Context, in *QueryGetTSSVoterRequest, opts ...grpc.CallOption) (*QueryGetTSSVoterResponse, error)
	// Queries a list of tSSVoter items.
	TSSVoterAll(ctx context.Context, in *QueryAllTSSVoterRequest, opts ...grpc.CallOption) (*QueryAllTSSVoterResponse, error)
	// Queries a tSS by index.
	TSS(ctx context.Context, in *QueryGetTSSRequest, opts ...grpc.CallOption) (*QueryGetTSSResponse, error)
	// Queries a list of tSS items.
	TSSAll(ctx context.Context, in *QueryAllTSSRequest, opts ...grpc.CallOption) (*QueryAllTSSResponse, error)
	// Queries a list of txListRich items.
	TxListRich(ctx context.Context, in *QueryTxListRichRequest, opts ...grpc.CallOption) (*QueryTxListRichResponse, error)
	// Queries a inTx by index.
	InTx(ctx context.Context, in *QueryGetInTxRequest, opts ...grpc.CallOption) (*QueryGetInTxResponse, error)
	// Queries a inTx by index.
	InTxNS(ctx context.Context, in *QueryGetInTxRequest, opts ...grpc.CallOption) (*QueryGetInTxResponse, error)
	// Queries a inTx by index.
	InTxRich(ctx context.Context, in *QueryGetInTxRichRequest, opts ...grpc.CallOption) (*QueryGetInTxRichResponse, error)
	// Queries a list of inTx items.
	InTxAll(ctx context.Context, in *QueryAllInTxRequest, opts ...grpc.CallOption) (*QueryAllInTxResponse, error)
	// Queries a txList by index.
	TxList(ctx context.Context, in *QueryGetTxRequest, opts ...grpc.CallOption) (*QueryGetTxResponse, error)
	// Queries a gasBalance by index.
	GasBalance(ctx context.Context, in *QueryGetGasBalanceRequest, opts ...grpc.CallOption) (*QueryGetGasBalanceResponse, error)
	// Queries a list of gasBalance items.
	GasBalanceAll(ctx context.Context, in *QueryAllGasBalanceRequest, opts ...grpc.CallOption) (*QueryAllGasBalanceResponse, error)
	// Queries a gasPrice by index.
	GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGetGasPriceResponse, error)
	// Queries a list of gasPrice items.
	GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryAllGasPriceResponse, error)
	// Queries a chainNonces by index.
	ChainNonces(ctx context.Context, in *QueryGetChainNoncesRequest, opts ...grpc.CallOption) (*QueryGetChainNoncesResponse, error)
	// Queries a list of chainNonces items.
	ChainNoncesAll(ctx context.Context, in *QueryAllChainNoncesRequest, opts ...grpc.CallOption) (*QueryAllChainNoncesResponse, error)
	// Queries a lastBlockHeight by index.
	LastBlockHeight(ctx context.Context, in *QueryGetLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryGetLastBlockHeightResponse, error)
	// Queries a list of lastBlockHeight items.
	LastBlockHeightAll(ctx context.Context, in *QueryAllLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryAllLastBlockHeightResponse, error)
	// Queries a receive by index.
	Receive(ctx context.Context, in *QueryGetReceiveRequest, opts ...grpc.CallOption) (*QueryGetReceiveResponse, error)
	// Queries a list of receive items.
	ReceiveAll(ctx context.Context, in *QueryAllReceiveRequest, opts ...grpc.CallOption) (*QueryAllReceiveResponse, error)
	// Queries a send by index.
	Send(ctx context.Context, in *QueryGetSendRequest, opts ...grpc.CallOption) (*QueryGetSendResponse, error)
	// Queries a list of send items.
	SendAll(ctx context.Context, in *QueryAllSendRequest, opts ...grpc.CallOption) (*QueryAllSendResponse, error)
	// Queries a list of send items.
	SendAllPending(ctx context.Context, in *QueryAllSendPendingRequest, opts ...grpc.CallOption) (*QueryAllSendPendingResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryGetNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryAllNodeAccountResponse, error)
	// Queries a list of lastMetaHeight items.
	LastMetaHeight(ctx context.Context, in *QueryLastMetaHeightRequest, opts ...grpc.CallOption) (*QueryLastMetaHeightResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) ZetaConversionRate(ctx context.Context, in *QueryGetZetaConversionRateRequest, opts ...grpc.CallOption) (*QueryGetZetaConversionRateResponse, error) {
	out := new(QueryGetZetaConversionRateResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/ZetaConversionRate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ZetaConversionRateAll(ctx context.Context, in *QueryAllZetaConversionRateRequest, opts ...grpc.CallOption) (*QueryAllZetaConversionRateResponse, error) {
	out := new(QueryAllZetaConversionRateResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/ZetaConversionRateAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Keygen(ctx context.Context, in *QueryGetKeygenRequest, opts ...grpc.CallOption) (*QueryGetKeygenResponse, error) {
	out := new(QueryGetKeygenResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/Keygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSSVoter(ctx context.Context, in *QueryGetTSSVoterRequest, opts ...grpc.CallOption) (*QueryGetTSSVoterResponse, error) {
	out := new(QueryGetTSSVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/TSSVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSSVoterAll(ctx context.Context, in *QueryAllTSSVoterRequest, opts ...grpc.CallOption) (*QueryAllTSSVoterResponse, error) {
	out := new(QueryAllTSSVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/TSSVoterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSS(ctx context.Context, in *QueryGetTSSRequest, opts ...grpc.CallOption) (*QueryGetTSSResponse, error) {
	out := new(QueryGetTSSResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/TSS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TSSAll(ctx context.Context, in *QueryAllTSSRequest, opts ...grpc.CallOption) (*QueryAllTSSResponse, error) {
	out := new(QueryAllTSSResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/TSSAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxListRich(ctx context.Context, in *QueryTxListRichRequest, opts ...grpc.CallOption) (*QueryTxListRichResponse, error) {
	out := new(QueryTxListRichResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/TxListRich", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTx(ctx context.Context, in *QueryGetInTxRequest, opts ...grpc.CallOption) (*QueryGetInTxResponse, error) {
	out := new(QueryGetInTxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/InTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxNS(ctx context.Context, in *QueryGetInTxRequest, opts ...grpc.CallOption) (*QueryGetInTxResponse, error) {
	out := new(QueryGetInTxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/InTxNS", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxRich(ctx context.Context, in *QueryGetInTxRichRequest, opts ...grpc.CallOption) (*QueryGetInTxRichResponse, error) {
	out := new(QueryGetInTxRichResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/InTxRich", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) InTxAll(ctx context.Context, in *QueryAllInTxRequest, opts ...grpc.CallOption) (*QueryAllInTxResponse, error) {
	out := new(QueryAllInTxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/InTxAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TxList(ctx context.Context, in *QueryGetTxRequest, opts ...grpc.CallOption) (*QueryGetTxResponse, error) {
	out := new(QueryGetTxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/TxList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasBalance(ctx context.Context, in *QueryGetGasBalanceRequest, opts ...grpc.CallOption) (*QueryGetGasBalanceResponse, error) {
	out := new(QueryGetGasBalanceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/GasBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasBalanceAll(ctx context.Context, in *QueryAllGasBalanceRequest, opts ...grpc.CallOption) (*QueryAllGasBalanceResponse, error) {
	out := new(QueryAllGasBalanceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/GasBalanceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPrice(ctx context.Context, in *QueryGetGasPriceRequest, opts ...grpc.CallOption) (*QueryGetGasPriceResponse, error) {
	out := new(QueryGetGasPriceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/GasPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GasPriceAll(ctx context.Context, in *QueryAllGasPriceRequest, opts ...grpc.CallOption) (*QueryAllGasPriceResponse, error) {
	out := new(QueryAllGasPriceResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/GasPriceAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNonces(ctx context.Context, in *QueryGetChainNoncesRequest, opts ...grpc.CallOption) (*QueryGetChainNoncesResponse, error) {
	out := new(QueryGetChainNoncesResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/ChainNonces", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ChainNoncesAll(ctx context.Context, in *QueryAllChainNoncesRequest, opts ...grpc.CallOption) (*QueryAllChainNoncesResponse, error) {
	out := new(QueryAllChainNoncesResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/ChainNoncesAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlockHeight(ctx context.Context, in *QueryGetLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryGetLastBlockHeightResponse, error) {
	out := new(QueryGetLastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/LastBlockHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastBlockHeightAll(ctx context.Context, in *QueryAllLastBlockHeightRequest, opts ...grpc.CallOption) (*QueryAllLastBlockHeightResponse, error) {
	out := new(QueryAllLastBlockHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/LastBlockHeightAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Receive(ctx context.Context, in *QueryGetReceiveRequest, opts ...grpc.CallOption) (*QueryGetReceiveResponse, error) {
	out := new(QueryGetReceiveResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/Receive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ReceiveAll(ctx context.Context, in *QueryAllReceiveRequest, opts ...grpc.CallOption) (*QueryAllReceiveResponse, error) {
	out := new(QueryAllReceiveResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/ReceiveAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Send(ctx context.Context, in *QueryGetSendRequest, opts ...grpc.CallOption) (*QueryGetSendResponse, error) {
	out := new(QueryGetSendResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendAll(ctx context.Context, in *QueryAllSendRequest, opts ...grpc.CallOption) (*QueryAllSendResponse, error) {
	out := new(QueryAllSendResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/SendAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SendAllPending(ctx context.Context, in *QueryAllSendPendingRequest, opts ...grpc.CallOption) (*QueryAllSendPendingResponse, error) {
	out := new(QueryAllSendPendingResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/SendAllPending", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccount(ctx context.Context, in *QueryGetNodeAccountRequest, opts ...grpc.CallOption) (*QueryGetNodeAccountResponse, error) {
	out := new(QueryGetNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/NodeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NodeAccountAll(ctx context.Context, in *QueryAllNodeAccountRequest, opts ...grpc.CallOption) (*QueryAllNodeAccountResponse, error) {
	out := new(QueryAllNodeAccountResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/NodeAccountAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastMetaHeight(ctx context.Context, in *QueryLastMetaHeightRequest, opts ...grpc.CallOption) (*QueryLastMetaHeightResponse, error) {
	out := new(QueryLastMetaHeightResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Query/LastMetaHeight", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a ZetaConversionRate by index.
	ZetaConversionRate(context.Context, *QueryGetZetaConversionRateRequest) (*QueryGetZetaConversionRateResponse, error)
	// Queries a list of ZetaConversionRate items.
	ZetaConversionRateAll(context.Context, *QueryAllZetaConversionRateRequest) (*QueryAllZetaConversionRateResponse, error)
	// Queries a keygen by index.
	Keygen(context.Context, *QueryGetKeygenRequest) (*QueryGetKeygenResponse, error)
	// Queries a tSSVoter by index.
	TSSVoter(context.Context, *QueryGetTSSVoterRequest) (*QueryGetTSSVoterResponse, error)
	// Queries a list of tSSVoter items.
	TSSVoterAll(context.Context, *QueryAllTSSVoterRequest) (*QueryAllTSSVoterResponse, error)
	// Queries a tSS by index.
	TSS(context.Context, *QueryGetTSSRequest) (*QueryGetTSSResponse, error)
	// Queries a list of tSS items.
	TSSAll(context.Context, *QueryAllTSSRequest) (*QueryAllTSSResponse, error)
	// Queries a list of txListRich items.
	TxListRich(context.Context, *QueryTxListRichRequest) (*QueryTxListRichResponse, error)
	// Queries a inTx by index.
	InTx(context.Context, *QueryGetInTxRequest) (*QueryGetInTxResponse, error)
	// Queries a inTx by index.
	InTxNS(context.Context, *QueryGetInTxRequest) (*QueryGetInTxResponse, error)
	// Queries a inTx by index.
	InTxRich(context.Context, *QueryGetInTxRichRequest) (*QueryGetInTxRichResponse, error)
	// Queries a list of inTx items.
	InTxAll(context.Context, *QueryAllInTxRequest) (*QueryAllInTxResponse, error)
	// Queries a txList by index.
	TxList(context.Context, *QueryGetTxRequest) (*QueryGetTxResponse, error)
	// Queries a gasBalance by index.
	GasBalance(context.Context, *QueryGetGasBalanceRequest) (*QueryGetGasBalanceResponse, error)
	// Queries a list of gasBalance items.
	GasBalanceAll(context.Context, *QueryAllGasBalanceRequest) (*QueryAllGasBalanceResponse, error)
	// Queries a gasPrice by index.
	GasPrice(context.Context, *QueryGetGasPriceRequest) (*QueryGetGasPriceResponse, error)
	// Queries a list of gasPrice items.
	GasPriceAll(context.Context, *QueryAllGasPriceRequest) (*QueryAllGasPriceResponse, error)
	// Queries a chainNonces by index.
	ChainNonces(context.Context, *QueryGetChainNoncesRequest) (*QueryGetChainNoncesResponse, error)
	// Queries a list of chainNonces items.
	ChainNoncesAll(context.Context, *QueryAllChainNoncesRequest) (*QueryAllChainNoncesResponse, error)
	// Queries a lastBlockHeight by index.
	LastBlockHeight(context.Context, *QueryGetLastBlockHeightRequest) (*QueryGetLastBlockHeightResponse, error)
	// Queries a list of lastBlockHeight items.
	LastBlockHeightAll(context.Context, *QueryAllLastBlockHeightRequest) (*QueryAllLastBlockHeightResponse, error)
	// Queries a receive by index.
	Receive(context.Context, *QueryGetReceiveRequest) (*QueryGetReceiveResponse, error)
	// Queries a list of receive items.
	ReceiveAll(context.Context, *QueryAllReceiveRequest) (*QueryAllReceiveResponse, error)
	// Queries a send by index.
	Send(context.Context, *QueryGetSendRequest) (*QueryGetSendResponse, error)
	// Queries a list of send items.
	SendAll(context.Context, *QueryAllSendRequest) (*QueryAllSendResponse, error)
	// Queries a list of send items.
	SendAllPending(context.Context, *QueryAllSendPendingRequest) (*QueryAllSendPendingResponse, error)
	// Queries a nodeAccount by index.
	NodeAccount(context.Context, *QueryGetNodeAccountRequest) (*QueryGetNodeAccountResponse, error)
	// Queries a list of nodeAccount items.
	NodeAccountAll(context.Context, *QueryAllNodeAccountRequest) (*QueryAllNodeAccountResponse, error)
	// Queries a list of lastMetaHeight items.
	LastMetaHeight(context.Context, *QueryLastMetaHeightRequest) (*QueryLastMetaHeightResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) ZetaConversionRate(ctx context.Context, req *QueryGetZetaConversionRateRequest) (*QueryGetZetaConversionRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZetaConversionRate not implemented")
}
func (*UnimplementedQueryServer) ZetaConversionRateAll(ctx context.Context, req *QueryAllZetaConversionRateRequest) (*QueryAllZetaConversionRateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZetaConversionRateAll not implemented")
}
func (*UnimplementedQueryServer) Keygen(ctx context.Context, req *QueryGetKeygenRequest) (*QueryGetKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Keygen not implemented")
}
func (*UnimplementedQueryServer) TSSVoter(ctx context.Context, req *QueryGetTSSVoterRequest) (*QueryGetTSSVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSSVoter not implemented")
}
func (*UnimplementedQueryServer) TSSVoterAll(ctx context.Context, req *QueryAllTSSVoterRequest) (*QueryAllTSSVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSSVoterAll not implemented")
}
func (*UnimplementedQueryServer) TSS(ctx context.Context, req *QueryGetTSSRequest) (*QueryGetTSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSS not implemented")
}
func (*UnimplementedQueryServer) TSSAll(ctx context.Context, req *QueryAllTSSRequest) (*QueryAllTSSResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TSSAll not implemented")
}
func (*UnimplementedQueryServer) TxListRich(ctx context.Context, req *QueryTxListRichRequest) (*QueryTxListRichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxListRich not implemented")
}
func (*UnimplementedQueryServer) InTx(ctx context.Context, req *QueryGetInTxRequest) (*QueryGetInTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTx not implemented")
}
func (*UnimplementedQueryServer) InTxNS(ctx context.Context, req *QueryGetInTxRequest) (*QueryGetInTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxNS not implemented")
}
func (*UnimplementedQueryServer) InTxRich(ctx context.Context, req *QueryGetInTxRichRequest) (*QueryGetInTxRichResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxRich not implemented")
}
func (*UnimplementedQueryServer) InTxAll(ctx context.Context, req *QueryAllInTxRequest) (*QueryAllInTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InTxAll not implemented")
}
func (*UnimplementedQueryServer) TxList(ctx context.Context, req *QueryGetTxRequest) (*QueryGetTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TxList not implemented")
}
func (*UnimplementedQueryServer) GasBalance(ctx context.Context, req *QueryGetGasBalanceRequest) (*QueryGetGasBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasBalance not implemented")
}
func (*UnimplementedQueryServer) GasBalanceAll(ctx context.Context, req *QueryAllGasBalanceRequest) (*QueryAllGasBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasBalanceAll not implemented")
}
func (*UnimplementedQueryServer) GasPrice(ctx context.Context, req *QueryGetGasPriceRequest) (*QueryGetGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPrice not implemented")
}
func (*UnimplementedQueryServer) GasPriceAll(ctx context.Context, req *QueryAllGasPriceRequest) (*QueryAllGasPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPriceAll not implemented")
}
func (*UnimplementedQueryServer) ChainNonces(ctx context.Context, req *QueryGetChainNoncesRequest) (*QueryGetChainNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNonces not implemented")
}
func (*UnimplementedQueryServer) ChainNoncesAll(ctx context.Context, req *QueryAllChainNoncesRequest) (*QueryAllChainNoncesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChainNoncesAll not implemented")
}
func (*UnimplementedQueryServer) LastBlockHeight(ctx context.Context, req *QueryGetLastBlockHeightRequest) (*QueryGetLastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeight not implemented")
}
func (*UnimplementedQueryServer) LastBlockHeightAll(ctx context.Context, req *QueryAllLastBlockHeightRequest) (*QueryAllLastBlockHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastBlockHeightAll not implemented")
}
func (*UnimplementedQueryServer) Receive(ctx context.Context, req *QueryGetReceiveRequest) (*QueryGetReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (*UnimplementedQueryServer) ReceiveAll(ctx context.Context, req *QueryAllReceiveRequest) (*QueryAllReceiveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveAll not implemented")
}
func (*UnimplementedQueryServer) Send(ctx context.Context, req *QueryGetSendRequest) (*QueryGetSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (*UnimplementedQueryServer) SendAll(ctx context.Context, req *QueryAllSendRequest) (*QueryAllSendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAll not implemented")
}
func (*UnimplementedQueryServer) SendAllPending(ctx context.Context, req *QueryAllSendPendingRequest) (*QueryAllSendPendingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendAllPending not implemented")
}
func (*UnimplementedQueryServer) NodeAccount(ctx context.Context, req *QueryGetNodeAccountRequest) (*QueryGetNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccount not implemented")
}
func (*UnimplementedQueryServer) NodeAccountAll(ctx context.Context, req *QueryAllNodeAccountRequest) (*QueryAllNodeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NodeAccountAll not implemented")
}
func (*UnimplementedQueryServer) LastMetaHeight(ctx context.Context, req *QueryLastMetaHeightRequest) (*QueryLastMetaHeightResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastMetaHeight not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_ZetaConversionRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetZetaConversionRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZetaConversionRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/ZetaConversionRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZetaConversionRate(ctx, req.(*QueryGetZetaConversionRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ZetaConversionRateAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllZetaConversionRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ZetaConversionRateAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/ZetaConversionRateAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ZetaConversionRateAll(ctx, req.(*QueryAllZetaConversionRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Keygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetKeygenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Keygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/Keygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Keygen(ctx, req.(*QueryGetKeygenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSSVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTSSVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSSVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/TSSVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSSVoter(ctx, req.(*QueryGetTSSVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSSVoterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTSSVoterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSSVoterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/TSSVoterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSSVoterAll(ctx, req.(*QueryAllTSSVoterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/TSS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSS(ctx, req.(*QueryGetTSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TSSAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTSSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TSSAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/TSSAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TSSAll(ctx, req.(*QueryAllTSSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxListRich_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTxListRichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxListRich(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/TxListRich",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxListRich(ctx, req.(*QueryTxListRichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/InTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTx(ctx, req.(*QueryGetInTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxNS_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxNS(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/InTxNS",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxNS(ctx, req.(*QueryGetInTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxRich_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetInTxRichRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxRich(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/InTxRich",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxRich(ctx, req.(*QueryGetInTxRichRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_InTxAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllInTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).InTxAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/InTxAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).InTxAll(ctx, req.(*QueryAllInTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TxList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TxList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/TxList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TxList(ctx, req.(*QueryGetTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGasBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/GasBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasBalance(ctx, req.(*QueryGetGasBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasBalanceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGasBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasBalanceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/GasBalanceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasBalanceAll(ctx, req.(*QueryAllGasBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/GasPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPrice(ctx, req.(*QueryGetGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GasPriceAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllGasPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GasPriceAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/GasPriceAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GasPriceAll(ctx, req.(*QueryAllGasPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNonces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetChainNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNonces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/ChainNonces",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNonces(ctx, req.(*QueryGetChainNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ChainNoncesAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllChainNoncesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ChainNoncesAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/ChainNoncesAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ChainNoncesAll(ctx, req.(*QueryAllChainNoncesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlockHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlockHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/LastBlockHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlockHeight(ctx, req.(*QueryGetLastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastBlockHeightAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLastBlockHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastBlockHeightAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/LastBlockHeightAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastBlockHeightAll(ctx, req.(*QueryAllLastBlockHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/Receive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Receive(ctx, req.(*QueryGetReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ReceiveAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ReceiveAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/ReceiveAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ReceiveAll(ctx, req.(*QueryAllReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Send(ctx, req.(*QueryGetSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/SendAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendAll(ctx, req.(*QueryAllSendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SendAllPending_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllSendPendingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SendAllPending(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/SendAllPending",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SendAllPending(ctx, req.(*QueryAllSendPendingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/NodeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccount(ctx, req.(*QueryGetNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NodeAccountAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllNodeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NodeAccountAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/NodeAccountAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NodeAccountAll(ctx, req.(*QueryAllNodeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastMetaHeight_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastMetaHeightRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastMetaHeight(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Query/LastMetaHeight",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastMetaHeight(ctx, req.(*QueryLastMetaHeightRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.zetacore.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ZetaConversionRate",
			Handler:    _Query_ZetaConversionRate_Handler,
		},
		{
			MethodName: "ZetaConversionRateAll",
			Handler:    _Query_ZetaConversionRateAll_Handler,
		},
		{
			MethodName: "Keygen",
			Handler:    _Query_Keygen_Handler,
		},
		{
			MethodName: "TSSVoter",
			Handler:    _Query_TSSVoter_Handler,
		},
		{
			MethodName: "TSSVoterAll",
			Handler:    _Query_TSSVoterAll_Handler,
		},
		{
			MethodName: "TSS",
			Handler:    _Query_TSS_Handler,
		},
		{
			MethodName: "TSSAll",
			Handler:    _Query_TSSAll_Handler,
		},
		{
			MethodName: "TxListRich",
			Handler:    _Query_TxListRich_Handler,
		},
		{
			MethodName: "InTx",
			Handler:    _Query_InTx_Handler,
		},
		{
			MethodName: "InTxNS",
			Handler:    _Query_InTxNS_Handler,
		},
		{
			MethodName: "InTxRich",
			Handler:    _Query_InTxRich_Handler,
		},
		{
			MethodName: "InTxAll",
			Handler:    _Query_InTxAll_Handler,
		},
		{
			MethodName: "TxList",
			Handler:    _Query_TxList_Handler,
		},
		{
			MethodName: "GasBalance",
			Handler:    _Query_GasBalance_Handler,
		},
		{
			MethodName: "GasBalanceAll",
			Handler:    _Query_GasBalanceAll_Handler,
		},
		{
			MethodName: "GasPrice",
			Handler:    _Query_GasPrice_Handler,
		},
		{
			MethodName: "GasPriceAll",
			Handler:    _Query_GasPriceAll_Handler,
		},
		{
			MethodName: "ChainNonces",
			Handler:    _Query_ChainNonces_Handler,
		},
		{
			MethodName: "ChainNoncesAll",
			Handler:    _Query_ChainNoncesAll_Handler,
		},
		{
			MethodName: "LastBlockHeight",
			Handler:    _Query_LastBlockHeight_Handler,
		},
		{
			MethodName: "LastBlockHeightAll",
			Handler:    _Query_LastBlockHeightAll_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _Query_Receive_Handler,
		},
		{
			MethodName: "ReceiveAll",
			Handler:    _Query_ReceiveAll_Handler,
		},
		{
			MethodName: "Send",
			Handler:    _Query_Send_Handler,
		},
		{
			MethodName: "SendAll",
			Handler:    _Query_SendAll_Handler,
		},
		{
			MethodName: "SendAllPending",
			Handler:    _Query_SendAllPending_Handler,
		},
		{
			MethodName: "NodeAccount",
			Handler:    _Query_NodeAccount_Handler,
		},
		{
			MethodName: "NodeAccountAll",
			Handler:    _Query_NodeAccountAll_Handler,
		},
		{
			MethodName: "LastMetaHeight",
			Handler:    _Query_LastMetaHeight_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetacore/query.proto",
}

func (m *QueryGetZetaConversionRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetZetaConversionRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetZetaConversionRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetZetaConversionRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetZetaConversionRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetZetaConversionRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ZetaConversionRate.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllZetaConversionRateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllZetaConversionRateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllZetaConversionRateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllZetaConversionRateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllZetaConversionRateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllZetaConversionRateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ZetaConversionRate) > 0 {
		for iNdEx := len(m.ZetaConversionRate) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ZetaConversionRate[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetKeygenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeygenRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeygenRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Keygen != nil {
		{
			size, err := m.Keygen.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TSSVoter != nil {
		{
			size, err := m.TSSVoter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTSSVoterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTSSVoterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTSSVoterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTSSVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTSSVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTSSVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TSSVoter) > 0 {
		for iNdEx := len(m.TSSVoter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TSSVoter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTSSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTSSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTSSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TSS != nil {
		{
			size, err := m.TSS.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTSSRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTSSRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTSSRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTSSResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTSSResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTSSResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TSS) > 0 {
		for iNdEx := len(m.TSS) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TSS[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxListRichRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxListRichRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxListRichRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Last != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Last))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryTxListRichResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTxListRichResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTxListRichResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tx) > 0 {
		for iNdEx := len(m.Tx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InTx != nil {
		{
			size, err := m.InTx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInTxRichRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInTxRichRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInTxRichRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetInTxRichResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetInTxRichResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetInTxRichResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Tx != nil {
		{
			size, err := m.Tx.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllInTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllInTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllInTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.InTx) > 0 {
		for iNdEx := len(m.InTx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.InTx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Last != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Last))
		i--
		dAtA[i] = 0x18
	}
	if m.To != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.To))
		i--
		dAtA[i] = 0x10
	}
	if m.From != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.From))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Tx) > 0 {
		for iNdEx := len(m.Tx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasBalance != nil {
		{
			size, err := m.GasBalance.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasBalanceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasBalanceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasBalanceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasBalanceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasBalanceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasBalanceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasBalance) > 0 {
		for iNdEx := len(m.GasBalance) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasBalance[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasPrice != nil {
		{
			size, err := m.GasPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllGasPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllGasPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllGasPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.GasPrice) > 0 {
		for iNdEx := len(m.GasPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GasPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetChainNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetChainNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetChainNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainNonces != nil {
		{
			size, err := m.ChainNonces.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainNoncesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainNoncesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainNoncesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllChainNoncesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllChainNoncesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllChainNoncesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ChainNonces) > 0 {
		for iNdEx := len(m.ChainNonces) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ChainNonces[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastBlockHeight != nil {
		{
			size, err := m.LastBlockHeight.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLastBlockHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastBlockHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastBlockHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLastBlockHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastBlockHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastBlockHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LastBlockHeight) > 0 {
		for iNdEx := len(m.LastBlockHeight) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastBlockHeight[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReceiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReceiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReceiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetReceiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetReceiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetReceiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Receive != nil {
		{
			size, err := m.Receive.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReceiveRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReceiveRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReceiveRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllReceiveResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllReceiveResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllReceiveResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receive) > 0 {
		for iNdEx := len(m.Receive) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Receive[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Send != nil {
		{
			size, err := m.Send.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSendRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSendRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSendResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSendResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Send) > 0 {
		for iNdEx := len(m.Send) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Send[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllSendPendingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSendPendingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSendPendingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllSendPendingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllSendPendingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllSendPendingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Send) > 0 {
		for iNdEx := len(m.Send) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Send[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NodeAccount != nil {
		{
			size, err := m.NodeAccount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllNodeAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllNodeAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllNodeAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.NodeAccount) > 0 {
		for iNdEx := len(m.NodeAccount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NodeAccount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastMetaHeightRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastMetaHeightRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastMetaHeightRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastMetaHeightResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastMetaHeightResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastMetaHeightResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetZetaConversionRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetZetaConversionRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ZetaConversionRate.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllZetaConversionRateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllZetaConversionRateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ZetaConversionRate) > 0 {
		for _, e := range m.ZetaConversionRate {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetKeygenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Keygen != nil {
		l = m.Keygen.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTSSVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTSSVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TSSVoter != nil {
		l = m.TSSVoter.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTSSVoterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTSSVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TSSVoter) > 0 {
		for _, e := range m.TSSVoter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTSSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTSSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TSS != nil {
		l = m.TSS.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTSSRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTSSResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TSS) > 0 {
		for _, e := range m.TSS {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTxListRichRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Last != 0 {
		n += 1 + sovQuery(uint64(m.Last))
	}
	return n
}

func (m *QueryTxListRichResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tx) > 0 {
		for _, e := range m.Tx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Length != 0 {
		n += 1 + sovQuery(uint64(m.Length))
	}
	return n
}

func (m *QueryGetInTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InTx != nil {
		l = m.InTx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInTxRichRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetInTxRichResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Tx != nil {
		l = m.Tx.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllInTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.InTx) > 0 {
		for _, e := range m.InTx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.From != 0 {
		n += 1 + sovQuery(uint64(m.From))
	}
	if m.To != 0 {
		n += 1 + sovQuery(uint64(m.To))
	}
	if m.Last != 0 {
		n += 1 + sovQuery(uint64(m.Last))
	}
	return n
}

func (m *QueryGetTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Tx) > 0 {
		for _, e := range m.Tx {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Length != 0 {
		n += 1 + sovQuery(uint64(m.Length))
	}
	return n
}

func (m *QueryGetGasBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasBalance != nil {
		l = m.GasBalance.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasBalanceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasBalanceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasBalance) > 0 {
		for _, e := range m.GasBalance {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.GasPrice != nil {
		l = m.GasPrice.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllGasPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.GasPrice) > 0 {
		for _, e := range m.GasPrice {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetChainNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainNonces != nil {
		l = m.ChainNonces.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainNoncesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllChainNoncesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ChainNonces) > 0 {
		for _, e := range m.ChainNonces {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastBlockHeight != nil {
		l = m.LastBlockHeight.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLastBlockHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLastBlockHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LastBlockHeight) > 0 {
		for _, e := range m.LastBlockHeight {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReceiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetReceiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Receive != nil {
		l = m.Receive.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReceiveRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllReceiveResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Receive) > 0 {
		for _, e := range m.Receive {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Send != nil {
		l = m.Send.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Send) > 0 {
		for _, e := range m.Send {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllSendPendingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllSendPendingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Send) > 0 {
		for _, e := range m.Send {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeAccount != nil {
		l = m.NodeAccount.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllNodeAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NodeAccount) > 0 {
		for _, e := range m.NodeAccount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLastMetaHeightRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastMetaHeightResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Height != 0 {
		n += 1 + sovQuery(uint64(m.Height))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetZetaConversionRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetZetaConversionRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetZetaConversionRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetZetaConversionRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetZetaConversionRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetZetaConversionRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaConversionRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZetaConversionRate.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllZetaConversionRateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllZetaConversionRateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllZetaConversionRateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllZetaConversionRateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllZetaConversionRateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllZetaConversionRateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaConversionRate", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZetaConversionRate = append(m.ZetaConversionRate, ZetaConversionRate{})
			if err := m.ZetaConversionRate[len(m.ZetaConversionRate)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeygenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeygenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeygenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keygen", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Keygen == nil {
				m.Keygen = &Keygen{}
			}
			if err := m.Keygen.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSSVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TSSVoter == nil {
				m.TSSVoter = &TSSVoter{}
			}
			if err := m.TSSVoter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTSSVoterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTSSVoterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTSSVoterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTSSVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTSSVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTSSVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSSVoter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TSSVoter = append(m.TSSVoter, &TSSVoter{})
			if err := m.TSSVoter[len(m.TSSVoter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTSSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTSSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTSSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TSS == nil {
				m.TSS = &TSS{}
			}
			if err := m.TSS.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTSSRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTSSRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTSSRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTSSResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTSSResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTSSResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TSS", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TSS = append(m.TSS, &TSS{})
			if err := m.TSS[len(m.TSS)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxListRichRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxListRichRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxListRichRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			m.Last = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Last |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTxListRichResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTxListRichResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTxListRichResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx, &Send{})
			if err := m.Tx[len(m.Tx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InTx == nil {
				m.InTx = &InTx{}
			}
			if err := m.InTx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInTxRichRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInTxRichRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInTxRichRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetInTxRichResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetInTxRichResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetInTxRichResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tx == nil {
				m.Tx = &Send{}
			}
			if err := m.Tx.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllInTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllInTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllInTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTx = append(m.InTx, &InTx{})
			if err := m.InTx[len(m.InTx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			m.From = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.From |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			m.To = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.To |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Last", wireType)
			}
			m.Last = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Last |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx, &Tx{})
			if err := m.Tx[len(m.Tx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasBalance == nil {
				m.GasBalance = &GasBalance{}
			}
			if err := m.GasBalance.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasBalanceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasBalanceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasBalanceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasBalanceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasBalanceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasBalanceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasBalance", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasBalance = append(m.GasBalance, &GasBalance{})
			if err := m.GasBalance[len(m.GasBalance)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GasPrice == nil {
				m.GasPrice = &GasPrice{}
			}
			if err := m.GasPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllGasPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllGasPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllGasPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GasPrice = append(m.GasPrice, &GasPrice{})
			if err := m.GasPrice[len(m.GasPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetChainNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetChainNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetChainNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChainNonces == nil {
				m.ChainNonces = &ChainNonces{}
			}
			if err := m.ChainNonces.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainNoncesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainNoncesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainNoncesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllChainNoncesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllChainNoncesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllChainNoncesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainNonces", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainNonces = append(m.ChainNonces, &ChainNonces{})
			if err := m.ChainNonces[len(m.ChainNonces)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.LastBlockHeight == nil {
				m.LastBlockHeight = &LastBlockHeight{}
			}
			if err := m.LastBlockHeight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastBlockHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastBlockHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastBlockHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastBlockHeight", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastBlockHeight = append(m.LastBlockHeight, &LastBlockHeight{})
			if err := m.LastBlockHeight[len(m.LastBlockHeight)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReceiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReceiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReceiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetReceiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetReceiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetReceiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Receive == nil {
				m.Receive = &Receive{}
			}
			if err := m.Receive.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReceiveRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReceiveRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReceiveRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllReceiveResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllReceiveResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllReceiveResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receive", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receive = append(m.Receive, &Receive{})
			if err := m.Receive[len(m.Receive)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Send == nil {
				m.Send = &Send{}
			}
			if err := m.Send.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Send = append(m.Send, &Send{})
			if err := m.Send[len(m.Send)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSendPendingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSendPendingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSendPendingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllSendPendingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllSendPendingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllSendPendingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Send", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Send = append(m.Send, &Send{})
			if err := m.Send[len(m.Send)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.NodeAccount == nil {
				m.NodeAccount = &NodeAccount{}
			}
			if err := m.NodeAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllNodeAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllNodeAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllNodeAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeAccount = append(m.NodeAccount, &NodeAccount{})
			if err := m.NodeAccount[len(m.NodeAccount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastMetaHeightRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastMetaHeightRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastMetaHeightRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastMetaHeightResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastMetaHeightResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastMetaHeightResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
