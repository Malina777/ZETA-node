// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetacore/zeta_conversion_rate.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ZetaConversionRate struct {
	Index               string   `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	Chain               string   `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Signers             []string `protobuf:"bytes,3,rep,name=signers,proto3" json:"signers,omitempty"`
	BlockNums           []uint64 `protobuf:"varint,4,rep,packed,name=blockNums,proto3" json:"blockNums,omitempty"`
	ZetaConversionRates []string `protobuf:"bytes,5,rep,name=zetaConversionRates,proto3" json:"zetaConversionRates,omitempty"`
	NativeTokenSymbol   string   `protobuf:"bytes,6,opt,name=nativeTokenSymbol,proto3" json:"nativeTokenSymbol,omitempty"`
	MedianIndex         uint64   `protobuf:"varint,7,opt,name=medianIndex,proto3" json:"medianIndex,omitempty"`
}

func (m *ZetaConversionRate) Reset()         { *m = ZetaConversionRate{} }
func (m *ZetaConversionRate) String() string { return proto.CompactTextString(m) }
func (*ZetaConversionRate) ProtoMessage()    {}
func (*ZetaConversionRate) Descriptor() ([]byte, []int) {
	return fileDescriptor_413932a0558b5207, []int{0}
}
func (m *ZetaConversionRate) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ZetaConversionRate) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ZetaConversionRate.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ZetaConversionRate) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ZetaConversionRate.Merge(m, src)
}
func (m *ZetaConversionRate) XXX_Size() int {
	return m.Size()
}
func (m *ZetaConversionRate) XXX_DiscardUnknown() {
	xxx_messageInfo_ZetaConversionRate.DiscardUnknown(m)
}

var xxx_messageInfo_ZetaConversionRate proto.InternalMessageInfo

func (m *ZetaConversionRate) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *ZetaConversionRate) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *ZetaConversionRate) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *ZetaConversionRate) GetBlockNums() []uint64 {
	if m != nil {
		return m.BlockNums
	}
	return nil
}

func (m *ZetaConversionRate) GetZetaConversionRates() []string {
	if m != nil {
		return m.ZetaConversionRates
	}
	return nil
}

func (m *ZetaConversionRate) GetNativeTokenSymbol() string {
	if m != nil {
		return m.NativeTokenSymbol
	}
	return ""
}

func (m *ZetaConversionRate) GetMedianIndex() uint64 {
	if m != nil {
		return m.MedianIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*ZetaConversionRate)(nil), "zetachain.zetacore.zetacore.ZetaConversionRate")
}

func init() {
	proto.RegisterFile("zetacore/zeta_conversion_rate.proto", fileDescriptor_413932a0558b5207)
}

var fileDescriptor_413932a0558b5207 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x10, 0x86, 0x63, 0x92, 0xb6, 0x8a, 0x99, 0x30, 0x0c, 0x96, 0x40, 0x56, 0x04, 0x4b, 0x06, 0x48,
	0x90, 0x78, 0x03, 0x98, 0xba, 0x30, 0x18, 0xa6, 0x2e, 0x95, 0x93, 0x9e, 0x5a, 0xab, 0x8d, 0x5d,
	0xd9, 0x6e, 0xd5, 0xf6, 0x29, 0x78, 0x2c, 0xc6, 0x8e, 0x8c, 0x28, 0x79, 0x0b, 0x26, 0x54, 0x57,
	0x4d, 0x91, 0xca, 0xf6, 0xff, 0xdf, 0x9d, 0xcf, 0x77, 0x3f, 0xbe, 0xdb, 0x80, 0x13, 0xa5, 0x36,
	0x90, 0xef, 0xc4, 0xb0, 0xd4, 0x6a, 0x09, 0xc6, 0x4a, 0xad, 0x86, 0x46, 0x38, 0xc8, 0xe6, 0x46,
	0x3b, 0x4d, 0xae, 0x7d, 0xd3, 0x44, 0x48, 0x95, 0x1d, 0xda, 0x5b, 0x71, 0xfb, 0x83, 0x30, 0x19,
	0x80, 0x13, 0x2f, 0xed, 0x53, 0x2e, 0x1c, 0x90, 0x2b, 0xdc, 0x91, 0x6a, 0x04, 0x2b, 0x8a, 0x12,
	0x94, 0xc6, 0x7c, 0x6f, 0x76, 0xd4, 0xcf, 0xa1, 0x67, 0x7b, 0xea, 0x0d, 0xa1, 0xb8, 0x67, 0xe5,
	0x58, 0x81, 0xb1, 0x34, 0x4c, 0xc2, 0x34, 0xe6, 0x07, 0x4b, 0x6e, 0x70, 0x5c, 0xcc, 0x74, 0x39,
	0x7d, 0x5d, 0x54, 0x96, 0x46, 0x49, 0x98, 0x46, 0xfc, 0x08, 0xc8, 0x23, 0xbe, 0xdc, 0x9c, 0xfc,
	0x6c, 0x69, 0xc7, 0xcf, 0xf8, 0xaf, 0x44, 0xee, 0xf1, 0x85, 0x12, 0x4e, 0x2e, 0xe1, 0x5d, 0x4f,
	0x41, 0xbd, 0xad, 0xab, 0x42, 0xcf, 0x68, 0xd7, 0xef, 0x72, 0x5a, 0x20, 0x09, 0x3e, 0xaf, 0x60,
	0x24, 0x85, 0xea, 0xfb, 0x4b, 0x7a, 0x09, 0x4a, 0x23, 0xfe, 0x17, 0x3d, 0xf7, 0x3f, 0x6b, 0x86,
	0xb6, 0x35, 0x43, 0xdf, 0x35, 0x43, 0x1f, 0x0d, 0x0b, 0xb6, 0x0d, 0x0b, 0xbe, 0x1a, 0x16, 0x0c,
	0xf2, 0xb1, 0x74, 0x93, 0x45, 0x91, 0x95, 0xba, 0xf2, 0xd1, 0x3e, 0xf8, 0x53, 0xf3, 0x36, 0xee,
	0xd5, 0x51, 0xba, 0xf5, 0x1c, 0x6c, 0xd1, 0xf5, 0x59, 0x3f, 0xfd, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x3d, 0x5e, 0x9f, 0x4a, 0x92, 0x01, 0x00, 0x00,
}

func (m *ZetaConversionRate) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ZetaConversionRate) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ZetaConversionRate) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MedianIndex != 0 {
		i = encodeVarintZetaConversionRate(dAtA, i, uint64(m.MedianIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.NativeTokenSymbol) > 0 {
		i -= len(m.NativeTokenSymbol)
		copy(dAtA[i:], m.NativeTokenSymbol)
		i = encodeVarintZetaConversionRate(dAtA, i, uint64(len(m.NativeTokenSymbol)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ZetaConversionRates) > 0 {
		for iNdEx := len(m.ZetaConversionRates) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ZetaConversionRates[iNdEx])
			copy(dAtA[i:], m.ZetaConversionRates[iNdEx])
			i = encodeVarintZetaConversionRate(dAtA, i, uint64(len(m.ZetaConversionRates[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.BlockNums) > 0 {
		dAtA2 := make([]byte, len(m.BlockNums)*10)
		var j1 int
		for _, num := range m.BlockNums {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintZetaConversionRate(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintZetaConversionRate(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintZetaConversionRate(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintZetaConversionRate(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintZetaConversionRate(dAtA []byte, offset int, v uint64) int {
	offset -= sovZetaConversionRate(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ZetaConversionRate) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovZetaConversionRate(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovZetaConversionRate(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovZetaConversionRate(uint64(l))
		}
	}
	if len(m.BlockNums) > 0 {
		l = 0
		for _, e := range m.BlockNums {
			l += sovZetaConversionRate(uint64(e))
		}
		n += 1 + sovZetaConversionRate(uint64(l)) + l
	}
	if len(m.ZetaConversionRates) > 0 {
		for _, s := range m.ZetaConversionRates {
			l = len(s)
			n += 1 + l + sovZetaConversionRate(uint64(l))
		}
	}
	l = len(m.NativeTokenSymbol)
	if l > 0 {
		n += 1 + l + sovZetaConversionRate(uint64(l))
	}
	if m.MedianIndex != 0 {
		n += 1 + sovZetaConversionRate(uint64(m.MedianIndex))
	}
	return n
}

func sovZetaConversionRate(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozZetaConversionRate(x uint64) (n int) {
	return sovZetaConversionRate(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ZetaConversionRate) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowZetaConversionRate
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ZetaConversionRate: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ZetaConversionRate: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZetaConversionRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZetaConversionRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZetaConversionRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZetaConversionRate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockNums = append(m.BlockNums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowZetaConversionRate
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthZetaConversionRate
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthZetaConversionRate
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlockNums) == 0 {
					m.BlockNums = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowZetaConversionRate
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlockNums = append(m.BlockNums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNums", wireType)
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaConversionRates", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZetaConversionRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZetaConversionRates = append(m.ZetaConversionRates, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NativeTokenSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZetaConversionRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NativeTokenSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedianIndex", wireType)
			}
			m.MedianIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowZetaConversionRate
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedianIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipZetaConversionRate(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthZetaConversionRate
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipZetaConversionRate(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowZetaConversionRate
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZetaConversionRate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowZetaConversionRate
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthZetaConversionRate
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupZetaConversionRate
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthZetaConversionRate
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthZetaConversionRate        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowZetaConversionRate          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupZetaConversionRate = fmt.Errorf("proto: unexpected end of group")
)
