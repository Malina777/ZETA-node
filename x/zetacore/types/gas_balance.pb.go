// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetacore/gas_balance.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type GasBalance struct {
	Creator     string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index       string   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Chain       string   `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Signers     []string `protobuf:"bytes,4,rep,name=signers,proto3" json:"signers,omitempty"`
	BlockNums   []uint64 `protobuf:"varint,5,rep,packed,name=blockNums,proto3" json:"blockNums,omitempty"`
	Balances    []string `protobuf:"bytes,6,rep,name=balances,proto3" json:"balances,omitempty"`
	MedianIndex uint64   `protobuf:"varint,7,opt,name=medianIndex,proto3" json:"medianIndex,omitempty"`
}

func (m *GasBalance) Reset()         { *m = GasBalance{} }
func (m *GasBalance) String() string { return proto.CompactTextString(m) }
func (*GasBalance) ProtoMessage()    {}
func (*GasBalance) Descriptor() ([]byte, []int) {
	return fileDescriptor_eeeda7824d0c4fbf, []int{0}
}
func (m *GasBalance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasBalance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasBalance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasBalance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasBalance.Merge(m, src)
}
func (m *GasBalance) XXX_Size() int {
	return m.Size()
}
func (m *GasBalance) XXX_DiscardUnknown() {
	xxx_messageInfo_GasBalance.DiscardUnknown(m)
}

var xxx_messageInfo_GasBalance proto.InternalMessageInfo

func (m *GasBalance) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *GasBalance) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *GasBalance) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *GasBalance) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *GasBalance) GetBlockNums() []uint64 {
	if m != nil {
		return m.BlockNums
	}
	return nil
}

func (m *GasBalance) GetBalances() []string {
	if m != nil {
		return m.Balances
	}
	return nil
}

func (m *GasBalance) GetMedianIndex() uint64 {
	if m != nil {
		return m.MedianIndex
	}
	return 0
}

func init() {
	proto.RegisterType((*GasBalance)(nil), "zetachain.zetacore.zetacore.GasBalance")
}

func init() { proto.RegisterFile("zetacore/gas_balance.proto", fileDescriptor_eeeda7824d0c4fbf) }

var fileDescriptor_eeeda7824d0c4fbf = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x18, 0x85, 0x63, 0x92, 0xb6, 0xd4, 0x6c, 0x56, 0x07, 0x2b, 0x20, 0x2b, 0x62, 0xca, 0x42, 0x3c,
	0x70, 0x83, 0x2e, 0xa8, 0x0b, 0x43, 0x46, 0x16, 0xe4, 0xb8, 0x96, 0x6b, 0xd1, 0xd8, 0x95, 0xed,
	0x4a, 0x85, 0x53, 0x70, 0xac, 0x8e, 0x1d, 0x19, 0x51, 0x72, 0x11, 0x64, 0xa7, 0x4d, 0xd9, 0xde,
	0xfb, 0xf2, 0xff, 0x2f, 0xbf, 0x1f, 0xcc, 0xbf, 0x84, 0x67, 0xdc, 0x58, 0x41, 0x25, 0x73, 0xef,
	0x0d, 0xdb, 0x32, 0xcd, 0x45, 0xb5, 0xb3, 0xc6, 0x1b, 0x74, 0x1f, 0xbf, 0x6d, 0x98, 0xd2, 0xd5,
	0x65, 0x6a, 0x14, 0xf9, 0x42, 0x1a, 0x69, 0xe2, 0x1c, 0x0d, 0x6a, 0x58, 0x79, 0x3c, 0x02, 0x08,
	0x5f, 0x98, 0x5b, 0x0e, 0x39, 0x08, 0xc3, 0x19, 0xb7, 0x82, 0x79, 0x63, 0x31, 0x28, 0x40, 0x39,
	0xaf, 0x2f, 0x16, 0x2d, 0xe0, 0x44, 0xe9, 0xb5, 0x38, 0xe0, 0x9b, 0xc8, 0x07, 0x13, 0x68, 0xfc,
	0x1f, 0x4e, 0x07, 0x1a, 0x4d, 0x48, 0x71, 0x4a, 0x6a, 0x61, 0x1d, 0xce, 0x8a, 0x34, 0xa4, 0x9c,
	0x2d, 0x7a, 0x80, 0xf3, 0x66, 0x6b, 0xf8, 0xc7, 0xeb, 0xbe, 0x75, 0x78, 0x52, 0xa4, 0x65, 0x56,
	0x5f, 0x01, 0xca, 0xe1, 0xed, 0xf9, 0x41, 0x0e, 0x4f, 0xe3, 0xe2, 0xe8, 0x51, 0x01, 0xef, 0x5a,
	0xb1, 0x56, 0x4c, 0xaf, 0xe2, 0x15, 0xb3, 0x02, 0x94, 0x59, 0xfd, 0x1f, 0x2d, 0x57, 0xc7, 0x8e,
	0x80, 0x53, 0x47, 0xc0, 0x6f, 0x47, 0xc0, 0x77, 0x4f, 0x92, 0x53, 0x4f, 0x92, 0x9f, 0x9e, 0x24,
	0x6f, 0x54, 0x2a, 0xbf, 0xd9, 0x37, 0x15, 0x37, 0x2d, 0x0d, 0x7d, 0x3c, 0xc5, 0x33, 0xe9, 0xd8,
	0xe4, 0xe1, 0x2a, 0xfd, 0xe7, 0x4e, 0xb8, 0x66, 0x1a, 0xcb, 0x79, 0xfe, 0x0b, 0x00, 0x00, 0xff,
	0xff, 0x8b, 0xf9, 0x2b, 0x06, 0x6d, 0x01, 0x00, 0x00,
}

func (m *GasBalance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasBalance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GasBalance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MedianIndex != 0 {
		i = encodeVarintGasBalance(dAtA, i, uint64(m.MedianIndex))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Balances) > 0 {
		for iNdEx := len(m.Balances) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Balances[iNdEx])
			copy(dAtA[i:], m.Balances[iNdEx])
			i = encodeVarintGasBalance(dAtA, i, uint64(len(m.Balances[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.BlockNums) > 0 {
		dAtA2 := make([]byte, len(m.BlockNums)*10)
		var j1 int
		for _, num := range m.BlockNums {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintGasBalance(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintGasBalance(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintGasBalance(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintGasBalance(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGasBalance(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGasBalance(dAtA []byte, offset int, v uint64) int {
	offset -= sovGasBalance(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GasBalance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGasBalance(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovGasBalance(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovGasBalance(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovGasBalance(uint64(l))
		}
	}
	if len(m.BlockNums) > 0 {
		l = 0
		for _, e := range m.BlockNums {
			l += sovGasBalance(uint64(e))
		}
		n += 1 + sovGasBalance(uint64(l)) + l
	}
	if len(m.Balances) > 0 {
		for _, s := range m.Balances {
			l = len(s)
			n += 1 + l + sovGasBalance(uint64(l))
		}
	}
	if m.MedianIndex != 0 {
		n += 1 + sovGasBalance(uint64(m.MedianIndex))
	}
	return n
}

func sovGasBalance(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGasBalance(x uint64) (n int) {
	return sovGasBalance(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GasBalance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGasBalance
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasBalance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasBalance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGasBalance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.BlockNums = append(m.BlockNums, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGasBalance
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthGasBalance
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthGasBalance
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.BlockNums) == 0 {
					m.BlockNums = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGasBalance
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.BlockNums = append(m.BlockNums, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNums", wireType)
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balances", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGasBalance
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGasBalance
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balances = append(m.Balances, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MedianIndex", wireType)
			}
			m.MedianIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGasBalance
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MedianIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGasBalance(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGasBalance
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGasBalance(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGasBalance
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGasBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGasBalance
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGasBalance
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGasBalance
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGasBalance
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGasBalance        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGasBalance          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGasBalance = fmt.Errorf("proto: unexpected end of group")
)
