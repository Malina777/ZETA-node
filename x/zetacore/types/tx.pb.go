// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetacore/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	common "github.com/zeta-chain/zetacore/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgZetaConversionRateVoter struct {
	Creator            string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain              string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	ZetaConversionRate string `protobuf:"bytes,3,opt,name=zetaConversionRate,proto3" json:"zetaConversionRate,omitempty"`
	BlockNumber        uint64 `protobuf:"varint,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (m *MsgZetaConversionRateVoter) Reset()         { *m = MsgZetaConversionRateVoter{} }
func (m *MsgZetaConversionRateVoter) String() string { return proto.CompactTextString(m) }
func (*MsgZetaConversionRateVoter) ProtoMessage()    {}
func (*MsgZetaConversionRateVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{0}
}
func (m *MsgZetaConversionRateVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgZetaConversionRateVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgZetaConversionRateVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgZetaConversionRateVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgZetaConversionRateVoter.Merge(m, src)
}
func (m *MsgZetaConversionRateVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgZetaConversionRateVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgZetaConversionRateVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgZetaConversionRateVoter proto.InternalMessageInfo

func (m *MsgZetaConversionRateVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgZetaConversionRateVoter) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgZetaConversionRateVoter) GetZetaConversionRate() string {
	if m != nil {
		return m.ZetaConversionRate
	}
	return ""
}

func (m *MsgZetaConversionRateVoter) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type MsgZetaConversionRateVoterResponse struct {
}

func (m *MsgZetaConversionRateVoterResponse) Reset()         { *m = MsgZetaConversionRateVoterResponse{} }
func (m *MsgZetaConversionRateVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgZetaConversionRateVoterResponse) ProtoMessage()    {}
func (*MsgZetaConversionRateVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{1}
}
func (m *MsgZetaConversionRateVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgZetaConversionRateVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgZetaConversionRateVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgZetaConversionRateVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgZetaConversionRateVoterResponse.Merge(m, src)
}
func (m *MsgZetaConversionRateVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgZetaConversionRateVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgZetaConversionRateVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgZetaConversionRateVoterResponse proto.InternalMessageInfo

type MsgAddToOutTxTracker struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Nonce   uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
	TxHash  string `protobuf:"bytes,4,opt,name=txHash,proto3" json:"txHash,omitempty"`
}

func (m *MsgAddToOutTxTracker) Reset()         { *m = MsgAddToOutTxTracker{} }
func (m *MsgAddToOutTxTracker) String() string { return proto.CompactTextString(m) }
func (*MsgAddToOutTxTracker) ProtoMessage()    {}
func (*MsgAddToOutTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{2}
}
func (m *MsgAddToOutTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToOutTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToOutTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToOutTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToOutTxTracker.Merge(m, src)
}
func (m *MsgAddToOutTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToOutTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToOutTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToOutTxTracker proto.InternalMessageInfo

func (m *MsgAddToOutTxTracker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgAddToOutTxTracker) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgAddToOutTxTracker) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *MsgAddToOutTxTracker) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

type MsgAddToOutTxTrackerResponse struct {
}

func (m *MsgAddToOutTxTrackerResponse) Reset()         { *m = MsgAddToOutTxTrackerResponse{} }
func (m *MsgAddToOutTxTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgAddToOutTxTrackerResponse) ProtoMessage()    {}
func (*MsgAddToOutTxTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{3}
}
func (m *MsgAddToOutTxTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgAddToOutTxTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgAddToOutTxTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgAddToOutTxTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgAddToOutTxTrackerResponse.Merge(m, src)
}
func (m *MsgAddToOutTxTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgAddToOutTxTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgAddToOutTxTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgAddToOutTxTrackerResponse proto.InternalMessageInfo

type MsgRemoveFromOutTxTracker struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Nonce   uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgRemoveFromOutTxTracker) Reset()         { *m = MsgRemoveFromOutTxTracker{} }
func (m *MsgRemoveFromOutTxTracker) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFromOutTxTracker) ProtoMessage()    {}
func (*MsgRemoveFromOutTxTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{4}
}
func (m *MsgRemoveFromOutTxTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFromOutTxTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFromOutTxTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFromOutTxTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFromOutTxTracker.Merge(m, src)
}
func (m *MsgRemoveFromOutTxTracker) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFromOutTxTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFromOutTxTracker.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFromOutTxTracker proto.InternalMessageInfo

func (m *MsgRemoveFromOutTxTracker) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRemoveFromOutTxTracker) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgRemoveFromOutTxTracker) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgRemoveFromOutTxTrackerResponse struct {
}

func (m *MsgRemoveFromOutTxTrackerResponse) Reset()         { *m = MsgRemoveFromOutTxTrackerResponse{} }
func (m *MsgRemoveFromOutTxTrackerResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRemoveFromOutTxTrackerResponse) ProtoMessage()    {}
func (*MsgRemoveFromOutTxTrackerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{5}
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRemoveFromOutTxTrackerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRemoveFromOutTxTrackerResponse.Merge(m, src)
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRemoveFromOutTxTrackerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRemoveFromOutTxTrackerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRemoveFromOutTxTrackerResponse proto.InternalMessageInfo

// this line is used by starport scaffolding # proto/tx/message
type MsgCreateTSSVoter struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain   string `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Pubkey  string `protobuf:"bytes,5,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
}

func (m *MsgCreateTSSVoter) Reset()         { *m = MsgCreateTSSVoter{} }
func (m *MsgCreateTSSVoter) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTSSVoter) ProtoMessage()    {}
func (*MsgCreateTSSVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{6}
}
func (m *MsgCreateTSSVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTSSVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTSSVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTSSVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTSSVoter.Merge(m, src)
}
func (m *MsgCreateTSSVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTSSVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTSSVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTSSVoter proto.InternalMessageInfo

func (m *MsgCreateTSSVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateTSSVoter) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgCreateTSSVoter) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *MsgCreateTSSVoter) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

type MsgCreateTSSVoterResponse struct {
}

func (m *MsgCreateTSSVoterResponse) Reset()         { *m = MsgCreateTSSVoterResponse{} }
func (m *MsgCreateTSSVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateTSSVoterResponse) ProtoMessage()    {}
func (*MsgCreateTSSVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{7}
}
func (m *MsgCreateTSSVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateTSSVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateTSSVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateTSSVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateTSSVoterResponse.Merge(m, src)
}
func (m *MsgCreateTSSVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateTSSVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateTSSVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateTSSVoterResponse proto.InternalMessageInfo

type MsgGasBalanceVoter struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain       string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Balance     string `protobuf:"bytes,3,opt,name=balance,proto3" json:"balance,omitempty"`
	BlockNumber uint64 `protobuf:"varint,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
}

func (m *MsgGasBalanceVoter) Reset()         { *m = MsgGasBalanceVoter{} }
func (m *MsgGasBalanceVoter) String() string { return proto.CompactTextString(m) }
func (*MsgGasBalanceVoter) ProtoMessage()    {}
func (*MsgGasBalanceVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{8}
}
func (m *MsgGasBalanceVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasBalanceVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasBalanceVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasBalanceVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasBalanceVoter.Merge(m, src)
}
func (m *MsgGasBalanceVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasBalanceVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasBalanceVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasBalanceVoter proto.InternalMessageInfo

func (m *MsgGasBalanceVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgGasBalanceVoter) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgGasBalanceVoter) GetBalance() string {
	if m != nil {
		return m.Balance
	}
	return ""
}

func (m *MsgGasBalanceVoter) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

type MsgGasBalanceVoterResponse struct {
}

func (m *MsgGasBalanceVoterResponse) Reset()         { *m = MsgGasBalanceVoterResponse{} }
func (m *MsgGasBalanceVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGasBalanceVoterResponse) ProtoMessage()    {}
func (*MsgGasBalanceVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{9}
}
func (m *MsgGasBalanceVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasBalanceVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasBalanceVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasBalanceVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasBalanceVoterResponse.Merge(m, src)
}
func (m *MsgGasBalanceVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasBalanceVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasBalanceVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasBalanceVoterResponse proto.InternalMessageInfo

type MsgGasPriceVoter struct {
	Creator     string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain       string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Price       uint64 `protobuf:"varint,3,opt,name=price,proto3" json:"price,omitempty"`
	BlockNumber uint64 `protobuf:"varint,4,opt,name=blockNumber,proto3" json:"blockNumber,omitempty"`
	Supply      string `protobuf:"bytes,5,opt,name=supply,proto3" json:"supply,omitempty"`
}

func (m *MsgGasPriceVoter) Reset()         { *m = MsgGasPriceVoter{} }
func (m *MsgGasPriceVoter) String() string { return proto.CompactTextString(m) }
func (*MsgGasPriceVoter) ProtoMessage()    {}
func (*MsgGasPriceVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{10}
}
func (m *MsgGasPriceVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasPriceVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasPriceVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasPriceVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasPriceVoter.Merge(m, src)
}
func (m *MsgGasPriceVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasPriceVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasPriceVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasPriceVoter proto.InternalMessageInfo

func (m *MsgGasPriceVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgGasPriceVoter) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgGasPriceVoter) GetPrice() uint64 {
	if m != nil {
		return m.Price
	}
	return 0
}

func (m *MsgGasPriceVoter) GetBlockNumber() uint64 {
	if m != nil {
		return m.BlockNumber
	}
	return 0
}

func (m *MsgGasPriceVoter) GetSupply() string {
	if m != nil {
		return m.Supply
	}
	return ""
}

type MsgGasPriceVoterResponse struct {
}

func (m *MsgGasPriceVoterResponse) Reset()         { *m = MsgGasPriceVoterResponse{} }
func (m *MsgGasPriceVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgGasPriceVoterResponse) ProtoMessage()    {}
func (*MsgGasPriceVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{11}
}
func (m *MsgGasPriceVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgGasPriceVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgGasPriceVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgGasPriceVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgGasPriceVoterResponse.Merge(m, src)
}
func (m *MsgGasPriceVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgGasPriceVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgGasPriceVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgGasPriceVoterResponse proto.InternalMessageInfo

type MsgNonceVoter struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chain   string `protobuf:"bytes,2,opt,name=chain,proto3" json:"chain,omitempty"`
	Nonce   uint64 `protobuf:"varint,3,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *MsgNonceVoter) Reset()         { *m = MsgNonceVoter{} }
func (m *MsgNonceVoter) String() string { return proto.CompactTextString(m) }
func (*MsgNonceVoter) ProtoMessage()    {}
func (*MsgNonceVoter) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{12}
}
func (m *MsgNonceVoter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNonceVoter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNonceVoter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNonceVoter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNonceVoter.Merge(m, src)
}
func (m *MsgNonceVoter) XXX_Size() int {
	return m.Size()
}
func (m *MsgNonceVoter) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNonceVoter.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNonceVoter proto.InternalMessageInfo

func (m *MsgNonceVoter) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgNonceVoter) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *MsgNonceVoter) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

type MsgNonceVoterResponse struct {
}

func (m *MsgNonceVoterResponse) Reset()         { *m = MsgNonceVoterResponse{} }
func (m *MsgNonceVoterResponse) String() string { return proto.CompactTextString(m) }
func (*MsgNonceVoterResponse) ProtoMessage()    {}
func (*MsgNonceVoterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{13}
}
func (m *MsgNonceVoterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgNonceVoterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgNonceVoterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgNonceVoterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgNonceVoterResponse.Merge(m, src)
}
func (m *MsgNonceVoterResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgNonceVoterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgNonceVoterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgNonceVoterResponse proto.InternalMessageInfo

type MsgVoteOnObservedOutboundTx struct {
	Creator                  string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CctxHash                 string                                  `protobuf:"bytes,2,opt,name=cctx_hash,json=cctxHash,proto3" json:"cctx_hash,omitempty"`
	ObservedOutTxHash        string                                  `protobuf:"bytes,3,opt,name=observed_outTx_hash,json=observedOutTxHash,proto3" json:"observed_outTx_hash,omitempty"`
	ObservedOutTxBlockHeight uint64                                  `protobuf:"varint,4,opt,name=observed_outTx_blockHeight,json=observedOutTxBlockHeight,proto3" json:"observed_outTx_blockHeight,omitempty"`
	ZetaMinted               github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,5,opt,name=zeta_minted,json=zetaMinted,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"zeta_minted" yaml:"zeta_minted"`
	Status                   common.ReceiveStatus                    `protobuf:"varint,6,opt,name=status,proto3,enum=common.ReceiveStatus" json:"status,omitempty"`
	OutTxChain               string                                  `protobuf:"bytes,7,opt,name=outTx_chain,json=outTxChain,proto3" json:"outTx_chain,omitempty"`
	OutTxTssNonce            uint64                                  `protobuf:"varint,8,opt,name=outTx_tss_nonce,json=outTxTssNonce,proto3" json:"outTx_tss_nonce,omitempty"`
}

func (m *MsgVoteOnObservedOutboundTx) Reset()         { *m = MsgVoteOnObservedOutboundTx{} }
func (m *MsgVoteOnObservedOutboundTx) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedOutboundTx) ProtoMessage()    {}
func (*MsgVoteOnObservedOutboundTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{14}
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedOutboundTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedOutboundTx.Merge(m, src)
}
func (m *MsgVoteOnObservedOutboundTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedOutboundTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedOutboundTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedOutboundTx proto.InternalMessageInfo

func (m *MsgVoteOnObservedOutboundTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetCctxHash() string {
	if m != nil {
		return m.CctxHash
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxHash() string {
	if m != nil {
		return m.ObservedOutTxHash
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetObservedOutTxBlockHeight() uint64 {
	if m != nil {
		return m.ObservedOutTxBlockHeight
	}
	return 0
}

func (m *MsgVoteOnObservedOutboundTx) GetStatus() common.ReceiveStatus {
	if m != nil {
		return m.Status
	}
	return common.ReceiveStatus_Created
}

func (m *MsgVoteOnObservedOutboundTx) GetOutTxChain() string {
	if m != nil {
		return m.OutTxChain
	}
	return ""
}

func (m *MsgVoteOnObservedOutboundTx) GetOutTxTssNonce() uint64 {
	if m != nil {
		return m.OutTxTssNonce
	}
	return 0
}

type MsgVoteOnObservedOutboundTxResponse struct {
}

func (m *MsgVoteOnObservedOutboundTxResponse) Reset()         { *m = MsgVoteOnObservedOutboundTxResponse{} }
func (m *MsgVoteOnObservedOutboundTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedOutboundTxResponse) ProtoMessage()    {}
func (*MsgVoteOnObservedOutboundTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{15}
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedOutboundTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedOutboundTxResponse.Merge(m, src)
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedOutboundTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedOutboundTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedOutboundTxResponse proto.InternalMessageInfo

type MsgVoteOnObservedInboundTx struct {
	Creator       string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Sender        string `protobuf:"bytes,2,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChain   string `protobuf:"bytes,3,opt,name=senderChain,proto3" json:"senderChain,omitempty"`
	Receiver      string `protobuf:"bytes,4,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain string `protobuf:"bytes,5,opt,name=receiverChain,proto3" json:"receiverChain,omitempty"`
	ZetaBurnt     string `protobuf:"bytes,6,opt,name=zetaBurnt,proto3" json:"zetaBurnt,omitempty"`
	//  string mMint = 7;
	Message       string `protobuf:"bytes,8,opt,name=message,proto3" json:"message,omitempty"`
	InTxHash      string `protobuf:"bytes,9,opt,name=inTxHash,proto3" json:"inTxHash,omitempty"`
	InBlockHeight uint64 `protobuf:"varint,10,opt,name=inBlockHeight,proto3" json:"inBlockHeight,omitempty"`
	GasLimit      uint64 `protobuf:"varint,11,opt,name=gasLimit,proto3" json:"gasLimit,omitempty"`
}

func (m *MsgVoteOnObservedInboundTx) Reset()         { *m = MsgVoteOnObservedInboundTx{} }
func (m *MsgVoteOnObservedInboundTx) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedInboundTx) ProtoMessage()    {}
func (*MsgVoteOnObservedInboundTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{16}
}
func (m *MsgVoteOnObservedInboundTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedInboundTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedInboundTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedInboundTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedInboundTx.Merge(m, src)
}
func (m *MsgVoteOnObservedInboundTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedInboundTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedInboundTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedInboundTx proto.InternalMessageInfo

func (m *MsgVoteOnObservedInboundTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetSenderChain() string {
	if m != nil {
		return m.SenderChain
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetReceiverChain() string {
	if m != nil {
		return m.ReceiverChain
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetZetaBurnt() string {
	if m != nil {
		return m.ZetaBurnt
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *MsgVoteOnObservedInboundTx) GetInBlockHeight() uint64 {
	if m != nil {
		return m.InBlockHeight
	}
	return 0
}

func (m *MsgVoteOnObservedInboundTx) GetGasLimit() uint64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

type MsgVoteOnObservedInboundTxResponse struct {
}

func (m *MsgVoteOnObservedInboundTxResponse) Reset()         { *m = MsgVoteOnObservedInboundTxResponse{} }
func (m *MsgVoteOnObservedInboundTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgVoteOnObservedInboundTxResponse) ProtoMessage()    {}
func (*MsgVoteOnObservedInboundTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{17}
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgVoteOnObservedInboundTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgVoteOnObservedInboundTxResponse.Merge(m, src)
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgVoteOnObservedInboundTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgVoteOnObservedInboundTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgVoteOnObservedInboundTxResponse proto.InternalMessageInfo

type MsgSetSupportedChains struct {
	Creator   string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Chainlist []string `protobuf:"bytes,2,rep,name=Chainlist,proto3" json:"Chainlist,omitempty"`
}

func (m *MsgSetSupportedChains) Reset()         { *m = MsgSetSupportedChains{} }
func (m *MsgSetSupportedChains) String() string { return proto.CompactTextString(m) }
func (*MsgSetSupportedChains) ProtoMessage()    {}
func (*MsgSetSupportedChains) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{18}
}
func (m *MsgSetSupportedChains) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSupportedChains) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSupportedChains.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSupportedChains) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSupportedChains.Merge(m, src)
}
func (m *MsgSetSupportedChains) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSupportedChains) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSupportedChains.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSupportedChains proto.InternalMessageInfo

func (m *MsgSetSupportedChains) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetSupportedChains) GetChainlist() []string {
	if m != nil {
		return m.Chainlist
	}
	return nil
}

type MsgSetSupportedChainsResponse struct {
}

func (m *MsgSetSupportedChainsResponse) Reset()         { *m = MsgSetSupportedChainsResponse{} }
func (m *MsgSetSupportedChainsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetSupportedChainsResponse) ProtoMessage()    {}
func (*MsgSetSupportedChainsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{19}
}
func (m *MsgSetSupportedChainsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetSupportedChainsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetSupportedChainsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetSupportedChainsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetSupportedChainsResponse.Merge(m, src)
}
func (m *MsgSetSupportedChainsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetSupportedChainsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetSupportedChainsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetSupportedChainsResponse proto.InternalMessageInfo

type MsgSetNodeKeys struct {
	Creator                  string            `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	PubkeySet                *common.PubKeySet `protobuf:"bytes,2,opt,name=pubkeySet,proto3" json:"pubkeySet,omitempty"`
	ValidatorConsensusPubkey string            `protobuf:"bytes,3,opt,name=validatorConsensusPubkey,proto3" json:"validatorConsensusPubkey,omitempty"`
}

func (m *MsgSetNodeKeys) Reset()         { *m = MsgSetNodeKeys{} }
func (m *MsgSetNodeKeys) String() string { return proto.CompactTextString(m) }
func (*MsgSetNodeKeys) ProtoMessage()    {}
func (*MsgSetNodeKeys) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{20}
}
func (m *MsgSetNodeKeys) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNodeKeys) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNodeKeys.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNodeKeys) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNodeKeys.Merge(m, src)
}
func (m *MsgSetNodeKeys) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNodeKeys) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNodeKeys.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNodeKeys proto.InternalMessageInfo

func (m *MsgSetNodeKeys) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgSetNodeKeys) GetPubkeySet() *common.PubKeySet {
	if m != nil {
		return m.PubkeySet
	}
	return nil
}

func (m *MsgSetNodeKeys) GetValidatorConsensusPubkey() string {
	if m != nil {
		return m.ValidatorConsensusPubkey
	}
	return ""
}

type MsgSetNodeKeysResponse struct {
}

func (m *MsgSetNodeKeysResponse) Reset()         { *m = MsgSetNodeKeysResponse{} }
func (m *MsgSetNodeKeysResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetNodeKeysResponse) ProtoMessage()    {}
func (*MsgSetNodeKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b502766e6a14552, []int{21}
}
func (m *MsgSetNodeKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetNodeKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetNodeKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetNodeKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetNodeKeysResponse.Merge(m, src)
}
func (m *MsgSetNodeKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetNodeKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetNodeKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetNodeKeysResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgZetaConversionRateVoter)(nil), "zetachain.zetacore.zetacore.MsgZetaConversionRateVoter")
	proto.RegisterType((*MsgZetaConversionRateVoterResponse)(nil), "zetachain.zetacore.zetacore.MsgZetaConversionRateVoterResponse")
	proto.RegisterType((*MsgAddToOutTxTracker)(nil), "zetachain.zetacore.zetacore.MsgAddToOutTxTracker")
	proto.RegisterType((*MsgAddToOutTxTrackerResponse)(nil), "zetachain.zetacore.zetacore.MsgAddToOutTxTrackerResponse")
	proto.RegisterType((*MsgRemoveFromOutTxTracker)(nil), "zetachain.zetacore.zetacore.MsgRemoveFromOutTxTracker")
	proto.RegisterType((*MsgRemoveFromOutTxTrackerResponse)(nil), "zetachain.zetacore.zetacore.MsgRemoveFromOutTxTrackerResponse")
	proto.RegisterType((*MsgCreateTSSVoter)(nil), "zetachain.zetacore.zetacore.MsgCreateTSSVoter")
	proto.RegisterType((*MsgCreateTSSVoterResponse)(nil), "zetachain.zetacore.zetacore.MsgCreateTSSVoterResponse")
	proto.RegisterType((*MsgGasBalanceVoter)(nil), "zetachain.zetacore.zetacore.MsgGasBalanceVoter")
	proto.RegisterType((*MsgGasBalanceVoterResponse)(nil), "zetachain.zetacore.zetacore.MsgGasBalanceVoterResponse")
	proto.RegisterType((*MsgGasPriceVoter)(nil), "zetachain.zetacore.zetacore.MsgGasPriceVoter")
	proto.RegisterType((*MsgGasPriceVoterResponse)(nil), "zetachain.zetacore.zetacore.MsgGasPriceVoterResponse")
	proto.RegisterType((*MsgNonceVoter)(nil), "zetachain.zetacore.zetacore.MsgNonceVoter")
	proto.RegisterType((*MsgNonceVoterResponse)(nil), "zetachain.zetacore.zetacore.MsgNonceVoterResponse")
	proto.RegisterType((*MsgVoteOnObservedOutboundTx)(nil), "zetachain.zetacore.zetacore.MsgVoteOnObservedOutboundTx")
	proto.RegisterType((*MsgVoteOnObservedOutboundTxResponse)(nil), "zetachain.zetacore.zetacore.MsgVoteOnObservedOutboundTxResponse")
	proto.RegisterType((*MsgVoteOnObservedInboundTx)(nil), "zetachain.zetacore.zetacore.MsgVoteOnObservedInboundTx")
	proto.RegisterType((*MsgVoteOnObservedInboundTxResponse)(nil), "zetachain.zetacore.zetacore.MsgVoteOnObservedInboundTxResponse")
	proto.RegisterType((*MsgSetSupportedChains)(nil), "zetachain.zetacore.zetacore.MsgSetSupportedChains")
	proto.RegisterType((*MsgSetSupportedChainsResponse)(nil), "zetachain.zetacore.zetacore.MsgSetSupportedChainsResponse")
	proto.RegisterType((*MsgSetNodeKeys)(nil), "zetachain.zetacore.zetacore.MsgSetNodeKeys")
	proto.RegisterType((*MsgSetNodeKeysResponse)(nil), "zetachain.zetacore.zetacore.MsgSetNodeKeysResponse")
}

func init() { proto.RegisterFile("zetacore/tx.proto", fileDescriptor_4b502766e6a14552) }

var fileDescriptor_4b502766e6a14552 = []byte{
	// 1151 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0x5f, 0x6f, 0xe3, 0x44,
	0x10, 0xaf, 0xaf, 0x7f, 0x33, 0x51, 0x7b, 0x74, 0xaf, 0xd7, 0x33, 0x6e, 0x49, 0x8b, 0xef, 0x80,
	0x0a, 0xd4, 0x44, 0xf4, 0xc4, 0x15, 0x2a, 0xc4, 0x9f, 0x56, 0xc0, 0x9d, 0x8e, 0xb4, 0x95, 0x93,
	0xe3, 0xe1, 0x5e, 0x2a, 0xc7, 0x5e, 0x5c, 0xab, 0xb1, 0x37, 0xf2, 0xae, 0xa3, 0xf4, 0x78, 0x01,
	0x89, 0x0f, 0x70, 0x02, 0x09, 0xde, 0x78, 0xe0, 0x3b, 0xf0, 0x1d, 0xfa, 0x78, 0x8f, 0x88, 0x87,
	0x0a, 0xb5, 0xdf, 0x80, 0x4f, 0x80, 0x76, 0xd7, 0xde, 0xfc, 0x69, 0x5c, 0x37, 0x81, 0xa7, 0xec,
	0xcc, 0xfe, 0x66, 0xe6, 0xb7, 0x33, 0xeb, 0xd9, 0x09, 0x2c, 0xbe, 0xc0, 0xcc, 0x76, 0x48, 0x84,
	0x2b, 0xac, 0x53, 0x6e, 0x45, 0x84, 0x11, 0xb4, 0x22, 0x54, 0xc7, 0xb6, 0x1f, 0x96, 0xd3, 0x4d,
	0xb5, 0x30, 0xf4, 0x2e, 0x9e, 0xd2, 0xa3, 0x36, 0x61, 0x38, 0x92, 0x66, 0xc6, 0x1d, 0x87, 0x04,
	0x01, 0x09, 0x2b, 0xf2, 0x27, 0x51, 0x2e, 0x79, 0xc4, 0x23, 0x62, 0x59, 0xe1, 0x2b, 0xa9, 0x35,
	0x7f, 0xd3, 0xc0, 0xa8, 0x52, 0xef, 0x39, 0x66, 0xf6, 0x1e, 0x09, 0xdb, 0x38, 0xa2, 0x3e, 0x09,
	0x2d, 0x9b, 0xe1, 0x6f, 0xb8, 0x3f, 0xa4, 0xc3, 0xac, 0x13, 0x61, 0x9b, 0x91, 0x48, 0xd7, 0xd6,
	0xb5, 0x8d, 0x82, 0x95, 0x8a, 0x68, 0x09, 0xa6, 0x05, 0x31, 0xfd, 0x96, 0xd0, 0x4b, 0x01, 0x95,
	0x01, 0xbd, 0xb8, 0xe2, 0x4a, 0x9f, 0x14, 0x90, 0x21, 0x3b, 0x68, 0x1d, 0x8a, 0x8d, 0x26, 0x71,
	0x4e, 0xf6, 0xe3, 0xa0, 0x81, 0x23, 0x7d, 0x6a, 0x5d, 0xdb, 0x98, 0xb2, 0x7a, 0x55, 0xe6, 0x03,
	0x30, 0xb3, 0xf9, 0x59, 0x98, 0xb6, 0x48, 0x48, 0xb1, 0xc9, 0x60, 0xa9, 0x4a, 0xbd, 0xcf, 0x5d,
	0xb7, 0x4e, 0x0e, 0x62, 0x56, 0xef, 0xd4, 0x23, 0xdb, 0x39, 0x19, 0x83, 0xff, 0x12, 0x4c, 0x87,
	0x24, 0x74, 0x24, 0xe5, 0x29, 0x4b, 0x0a, 0x68, 0x19, 0x66, 0x58, 0xe7, 0xb1, 0x4d, 0x8f, 0x05,
	0xc1, 0x82, 0x95, 0x48, 0x66, 0x09, 0x56, 0x87, 0x45, 0x55, 0xac, 0x6c, 0x78, 0xbd, 0x4a, 0x3d,
	0x0b, 0x07, 0xa4, 0x8d, 0xbf, 0x8c, 0x48, 0xf0, 0xff, 0x53, 0x33, 0xef, 0xc3, 0x9b, 0x99, 0x21,
	0x14, 0x8f, 0x18, 0x16, 0xab, 0xd4, 0xdb, 0xe3, 0xee, 0x71, 0xbd, 0x56, 0xbb, 0x71, 0x69, 0x27,
	0x7b, 0xe3, 0xeb, 0x30, 0x6b, 0xbb, 0x6e, 0x84, 0x29, 0x4d, 0xb2, 0x90, 0x8a, 0x3c, 0x3d, 0xad,
	0xb8, 0x71, 0x82, 0x4f, 0xf5, 0x69, 0x99, 0x1e, 0x29, 0x99, 0x2b, 0xe2, 0xf8, 0xfd, 0x61, 0x15,
	0xa7, 0xef, 0x35, 0x40, 0x55, 0xea, 0x7d, 0x65, 0xd3, 0x5d, 0xbb, 0x69, 0x87, 0xce, 0x98, 0x17,
	0x4e, 0x87, 0xd9, 0x86, 0xb4, 0x4f, 0xd8, 0xa6, 0xe2, 0x0d, 0xae, 0xd6, 0xaa, 0xb8, 0xfa, 0x03,
	0x0c, 0x14, 0xc1, 0x9f, 0x34, 0x78, 0x4d, 0x6e, 0x1f, 0x46, 0xfe, 0xb8, 0xf4, 0x96, 0x60, 0xba,
	0xc5, 0xad, 0xd3, 0xa2, 0x09, 0x21, 0x9f, 0x1a, 0x4f, 0x29, 0x8d, 0x5b, 0xad, 0xa6, 0x4a, 0xa9,
	0x94, 0x4c, 0x03, 0xf4, 0x41, 0x4e, 0x8a, 0xf0, 0x33, 0x98, 0xaf, 0x52, 0x6f, 0x9f, 0x84, 0xff,
	0x81, 0xec, 0x90, 0x1b, 0x76, 0x0f, 0xee, 0xf6, 0xb9, 0x55, 0xf1, 0x7e, 0x9f, 0x84, 0x95, 0x2a,
	0xf5, 0xb8, 0xf2, 0x20, 0x3c, 0x68, 0x50, 0x1c, 0xb5, 0xb1, 0x7b, 0x10, 0xb3, 0x06, 0x89, 0x43,
	0xb7, 0xde, 0xb9, 0x26, 0xfc, 0x0a, 0x14, 0x1c, 0x87, 0x75, 0x8e, 0x8e, 0xf9, 0x27, 0x25, 0x29,
	0xcc, 0x71, 0x05, 0xff, 0xa8, 0x50, 0x19, 0xee, 0x90, 0xc4, 0xd9, 0x11, 0xe1, 0xb7, 0x59, 0xc2,
	0x64, 0x75, 0x17, 0x49, 0x37, 0x4e, 0x5d, 0xe2, 0x3f, 0x06, 0x63, 0x00, 0x2f, 0x12, 0xf9, 0x18,
	0xfb, 0xde, 0x31, 0x4b, 0x72, 0xab, 0xf7, 0x99, 0xed, 0x76, 0xf7, 0xd1, 0xb7, 0x50, 0xe4, 0x6d,
	0xe9, 0x28, 0xf0, 0x43, 0x86, 0x5d, 0x99, 0xed, 0xdd, 0x2f, 0xce, 0xce, 0xd7, 0x26, 0xfe, 0x3a,
	0x5f, 0x7b, 0xc7, 0xf3, 0xd9, 0x71, 0xdc, 0x28, 0x3b, 0x24, 0xa8, 0x38, 0x84, 0x06, 0x84, 0x26,
	0x3f, 0x9b, 0xd4, 0x3d, 0xa9, 0xb0, 0xd3, 0x16, 0xa6, 0xe5, 0x67, 0x7e, 0xc8, 0xfe, 0x39, 0x5f,
	0x43, 0xa7, 0x76, 0xd0, 0xdc, 0x31, 0x7b, 0x7c, 0x99, 0x16, 0x70, 0xa9, 0x2a, 0x04, 0xb4, 0x09,
	0x33, 0x94, 0xd9, 0x2c, 0xa6, 0xfa, 0xcc, 0xba, 0xb6, 0xb1, 0xb0, 0x75, 0xb7, 0x9c, 0x34, 0x67,
	0x0b, 0x3b, 0xd8, 0x6f, 0xe3, 0x9a, 0xd8, 0xb4, 0x12, 0x10, 0x5a, 0x83, 0xa2, 0x3c, 0x8b, 0x2c,
	0xd3, 0xac, 0x38, 0x3c, 0x08, 0xd5, 0x9e, 0xa8, 0xd5, 0xdb, 0x70, 0x5b, 0x02, 0x78, 0xef, 0x97,
	0x55, 0x9b, 0x13, 0x47, 0x9d, 0x17, 0xea, 0x3a, 0xa5, 0xa2, 0x62, 0xe6, 0x5b, 0x70, 0xff, 0x9a,
	0x1a, 0xa9, 0x5a, 0x9e, 0xdd, 0x12, 0xdf, 0x42, 0x3f, 0xee, 0x49, 0x98, 0x5f, 0x4a, 0x7e, 0x51,
	0x71, 0xe8, 0xe2, 0x28, 0xa9, 0x63, 0x22, 0xf1, 0x2b, 0x2e, 0x57, 0x7b, 0x3d, 0x9d, 0xa4, 0x57,
	0x85, 0x0c, 0x98, 0x8b, 0xe4, 0xd9, 0xa3, 0xa4, 0xa1, 0x28, 0x19, 0x3d, 0x80, 0xf9, 0x74, 0x2d,
	0xed, 0xe5, 0x57, 0xd0, 0xaf, 0x44, 0xab, 0x50, 0xe0, 0x19, 0xde, 0x8d, 0xa3, 0x90, 0x89, 0xb4,
	0x16, 0xac, 0xae, 0x82, 0x73, 0x0e, 0x30, 0xa5, 0xb6, 0x27, 0x33, 0x53, 0xb0, 0x52, 0x91, 0x47,
	0xf6, 0x43, 0x79, 0x7b, 0xf4, 0x82, 0x8c, 0x9c, 0xca, 0x3c, 0xb2, 0x1f, 0xf6, 0x5c, 0x10, 0x1d,
	0x64, 0x56, 0xfb, 0x94, 0xdc, 0x83, 0x67, 0xd3, 0xaf, 0xfd, 0xc0, 0x67, 0x7a, 0x51, 0x00, 0x94,
	0x9c, 0x3c, 0x58, 0x19, 0x99, 0x54, 0x09, 0x3f, 0x10, 0x5f, 0x55, 0x0d, 0xb3, 0x5a, 0xdc, 0x6a,
	0x91, 0x88, 0x61, 0x57, 0x9c, 0x89, 0x5e, 0x93, 0xea, 0x55, 0x28, 0x08, 0x4c, 0xd3, 0xa7, 0x4c,
	0xbf, 0xb5, 0x3e, 0xc9, 0x8f, 0xab, 0x14, 0xe6, 0x1a, 0xbc, 0x31, 0xd4, 0xa1, 0x8a, 0xf8, 0xab,
	0x06, 0x0b, 0x12, 0xb1, 0x4f, 0x5c, 0xfc, 0x14, 0x9f, 0x5e, 0x17, 0xab, 0x02, 0x05, 0xd9, 0xc4,
	0x6b, 0x98, 0x89, 0xca, 0x16, 0xb7, 0x16, 0xd3, 0x1b, 0x7b, 0x18, 0x37, 0x9e, 0x8a, 0x0d, 0xab,
	0x8b, 0x41, 0x3b, 0xa0, 0xb7, 0xed, 0xa6, 0xef, 0x72, 0xeb, 0x3d, 0x1e, 0x2f, 0xa4, 0x31, 0x3d,
	0x94, 0xaf, 0x82, 0x2c, 0x7e, 0xe6, 0xbe, 0xa9, 0xc3, 0x72, 0x3f, 0xb1, 0x94, 0xf3, 0xd6, 0x1f,
	0x45, 0x98, 0xac, 0x52, 0x0f, 0xfd, 0xac, 0xc1, 0xbd, 0xac, 0x11, 0x65, 0xbb, 0x7c, 0xcd, 0x90,
	0x54, 0xce, 0x9e, 0x1d, 0x8c, 0x4f, 0xc7, 0x34, 0x4c, 0xd9, 0xa1, 0x1f, 0x34, 0x58, 0xbc, 0x3a,
	0x72, 0xbc, 0x9f, 0xe7, 0xf6, 0x8a, 0x89, 0xf1, 0xd1, 0xc8, 0x26, 0x8a, 0xc3, 0x4b, 0x0d, 0x96,
	0x33, 0x06, 0x8c, 0x47, 0x79, 0x5e, 0x87, 0xdb, 0x19, 0x9f, 0x8c, 0x67, 0xa7, 0x28, 0x75, 0x60,
	0x61, 0x60, 0xd4, 0x28, 0xe7, 0x79, 0xec, 0xc7, 0x1b, 0x8f, 0x46, 0xc3, 0xab, 0xc8, 0xdf, 0xc1,
	0xed, 0xc1, 0x79, 0xa2, 0x92, 0xe7, 0x6a, 0xc0, 0xc0, 0xd8, 0x1e, 0xd1, 0x40, 0x05, 0x8f, 0x61,
	0xbe, 0x7f, 0x56, 0xd8, 0xbc, 0x81, 0xa7, 0x2e, 0xdc, 0xf8, 0x60, 0x24, 0xb8, 0x0a, 0xdb, 0x04,
	0xe8, 0x79, 0xf2, 0xdf, 0xcd, 0x73, 0xd2, 0xc5, 0x1a, 0x5b, 0x37, 0xc7, 0xaa, 0x68, 0xbf, 0x68,
	0xa0, 0x67, 0x3e, 0xf8, 0x1f, 0xe6, 0x39, 0xcc, 0xb2, 0x34, 0x3e, 0x1b, 0xd7, 0x52, 0x11, 0xe3,
	0x1d, 0x22, 0xeb, 0xf5, 0xda, 0x1e, 0xcd, 0xbb, 0x32, 0xcc, 0xef, 0x10, 0x39, 0x5d, 0x1e, 0x11,
	0x28, 0xf6, 0xf6, 0xdb, 0xf7, 0xf2, 0xfc, 0xf5, 0x80, 0x8d, 0x87, 0x23, 0x80, 0x55, 0xc0, 0x1f,
	0x35, 0x40, 0x43, 0x1e, 0x95, 0xad, 0x1b, 0xf8, 0x1a, 0xb0, 0x31, 0x76, 0x46, 0xb7, 0x49, 0x69,
	0xec, 0x3e, 0x39, 0xbb, 0x28, 0x69, 0xaf, 0x2e, 0x4a, 0xda, 0xdf, 0x17, 0x25, 0xed, 0xe5, 0x65,
	0x69, 0xe2, 0xd5, 0x65, 0x69, 0xe2, 0xcf, 0xcb, 0xd2, 0xc4, 0xf3, 0x4a, 0xcf, 0x48, 0xc5, 0x9d,
	0x6d, 0x8a, 0x00, 0x15, 0xf5, 0x57, 0xb6, 0xd3, 0x5d, 0x8a, 0xf9, 0xaa, 0x31, 0x23, 0xfe, 0xa7,
	0x3e, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x12, 0x81, 0x21, 0xad, 0x1e, 0x0f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	ZetaConversionRateVoter(ctx context.Context, in *MsgZetaConversionRateVoter, opts ...grpc.CallOption) (*MsgZetaConversionRateVoterResponse, error)
	AddToOutTxTracker(ctx context.Context, in *MsgAddToOutTxTracker, opts ...grpc.CallOption) (*MsgAddToOutTxTrackerResponse, error)
	RemoveFromOutTxTracker(ctx context.Context, in *MsgRemoveFromOutTxTracker, opts ...grpc.CallOption) (*MsgRemoveFromOutTxTrackerResponse, error)
	CreateTSSVoter(ctx context.Context, in *MsgCreateTSSVoter, opts ...grpc.CallOption) (*MsgCreateTSSVoterResponse, error)
	GasBalanceVoter(ctx context.Context, in *MsgGasBalanceVoter, opts ...grpc.CallOption) (*MsgGasBalanceVoterResponse, error)
	GasPriceVoter(ctx context.Context, in *MsgGasPriceVoter, opts ...grpc.CallOption) (*MsgGasPriceVoterResponse, error)
	NonceVoter(ctx context.Context, in *MsgNonceVoter, opts ...grpc.CallOption) (*MsgNonceVoterResponse, error)
	VoteOnObservedOutboundTx(ctx context.Context, in *MsgVoteOnObservedOutboundTx, opts ...grpc.CallOption) (*MsgVoteOnObservedOutboundTxResponse, error)
	VoteOnObservedInboundTx(ctx context.Context, in *MsgVoteOnObservedInboundTx, opts ...grpc.CallOption) (*MsgVoteOnObservedInboundTxResponse, error)
	SetNodeKeys(ctx context.Context, in *MsgSetNodeKeys, opts ...grpc.CallOption) (*MsgSetNodeKeysResponse, error)
	SetSupportedChains(ctx context.Context, in *MsgSetSupportedChains, opts ...grpc.CallOption) (*MsgSetSupportedChainsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) ZetaConversionRateVoter(ctx context.Context, in *MsgZetaConversionRateVoter, opts ...grpc.CallOption) (*MsgZetaConversionRateVoterResponse, error) {
	out := new(MsgZetaConversionRateVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/ZetaConversionRateVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) AddToOutTxTracker(ctx context.Context, in *MsgAddToOutTxTracker, opts ...grpc.CallOption) (*MsgAddToOutTxTrackerResponse, error) {
	out := new(MsgAddToOutTxTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/AddToOutTxTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RemoveFromOutTxTracker(ctx context.Context, in *MsgRemoveFromOutTxTracker, opts ...grpc.CallOption) (*MsgRemoveFromOutTxTrackerResponse, error) {
	out := new(MsgRemoveFromOutTxTrackerResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/RemoveFromOutTxTracker", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CreateTSSVoter(ctx context.Context, in *MsgCreateTSSVoter, opts ...grpc.CallOption) (*MsgCreateTSSVoterResponse, error) {
	out := new(MsgCreateTSSVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/CreateTSSVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GasBalanceVoter(ctx context.Context, in *MsgGasBalanceVoter, opts ...grpc.CallOption) (*MsgGasBalanceVoterResponse, error) {
	out := new(MsgGasBalanceVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/GasBalanceVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) GasPriceVoter(ctx context.Context, in *MsgGasPriceVoter, opts ...grpc.CallOption) (*MsgGasPriceVoterResponse, error) {
	out := new(MsgGasPriceVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/GasPriceVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) NonceVoter(ctx context.Context, in *MsgNonceVoter, opts ...grpc.CallOption) (*MsgNonceVoterResponse, error) {
	out := new(MsgNonceVoterResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/NonceVoter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOnObservedOutboundTx(ctx context.Context, in *MsgVoteOnObservedOutboundTx, opts ...grpc.CallOption) (*MsgVoteOnObservedOutboundTxResponse, error) {
	out := new(MsgVoteOnObservedOutboundTxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/VoteOnObservedOutboundTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) VoteOnObservedInboundTx(ctx context.Context, in *MsgVoteOnObservedInboundTx, opts ...grpc.CallOption) (*MsgVoteOnObservedInboundTxResponse, error) {
	out := new(MsgVoteOnObservedInboundTxResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/VoteOnObservedInboundTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetNodeKeys(ctx context.Context, in *MsgSetNodeKeys, opts ...grpc.CallOption) (*MsgSetNodeKeysResponse, error) {
	out := new(MsgSetNodeKeysResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/SetNodeKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetSupportedChains(ctx context.Context, in *MsgSetSupportedChains, opts ...grpc.CallOption) (*MsgSetSupportedChainsResponse, error) {
	out := new(MsgSetSupportedChainsResponse)
	err := c.cc.Invoke(ctx, "/zetachain.zetacore.zetacore.Msg/SetSupportedChains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	ZetaConversionRateVoter(context.Context, *MsgZetaConversionRateVoter) (*MsgZetaConversionRateVoterResponse, error)
	AddToOutTxTracker(context.Context, *MsgAddToOutTxTracker) (*MsgAddToOutTxTrackerResponse, error)
	RemoveFromOutTxTracker(context.Context, *MsgRemoveFromOutTxTracker) (*MsgRemoveFromOutTxTrackerResponse, error)
	CreateTSSVoter(context.Context, *MsgCreateTSSVoter) (*MsgCreateTSSVoterResponse, error)
	GasBalanceVoter(context.Context, *MsgGasBalanceVoter) (*MsgGasBalanceVoterResponse, error)
	GasPriceVoter(context.Context, *MsgGasPriceVoter) (*MsgGasPriceVoterResponse, error)
	NonceVoter(context.Context, *MsgNonceVoter) (*MsgNonceVoterResponse, error)
	VoteOnObservedOutboundTx(context.Context, *MsgVoteOnObservedOutboundTx) (*MsgVoteOnObservedOutboundTxResponse, error)
	VoteOnObservedInboundTx(context.Context, *MsgVoteOnObservedInboundTx) (*MsgVoteOnObservedInboundTxResponse, error)
	SetNodeKeys(context.Context, *MsgSetNodeKeys) (*MsgSetNodeKeysResponse, error)
	SetSupportedChains(context.Context, *MsgSetSupportedChains) (*MsgSetSupportedChainsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) ZetaConversionRateVoter(ctx context.Context, req *MsgZetaConversionRateVoter) (*MsgZetaConversionRateVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ZetaConversionRateVoter not implemented")
}
func (*UnimplementedMsgServer) AddToOutTxTracker(ctx context.Context, req *MsgAddToOutTxTracker) (*MsgAddToOutTxTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddToOutTxTracker not implemented")
}
func (*UnimplementedMsgServer) RemoveFromOutTxTracker(ctx context.Context, req *MsgRemoveFromOutTxTracker) (*MsgRemoveFromOutTxTrackerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFromOutTxTracker not implemented")
}
func (*UnimplementedMsgServer) CreateTSSVoter(ctx context.Context, req *MsgCreateTSSVoter) (*MsgCreateTSSVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTSSVoter not implemented")
}
func (*UnimplementedMsgServer) GasBalanceVoter(ctx context.Context, req *MsgGasBalanceVoter) (*MsgGasBalanceVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasBalanceVoter not implemented")
}
func (*UnimplementedMsgServer) GasPriceVoter(ctx context.Context, req *MsgGasPriceVoter) (*MsgGasPriceVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GasPriceVoter not implemented")
}
func (*UnimplementedMsgServer) NonceVoter(ctx context.Context, req *MsgNonceVoter) (*MsgNonceVoterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NonceVoter not implemented")
}
func (*UnimplementedMsgServer) VoteOnObservedOutboundTx(ctx context.Context, req *MsgVoteOnObservedOutboundTx) (*MsgVoteOnObservedOutboundTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnObservedOutboundTx not implemented")
}
func (*UnimplementedMsgServer) VoteOnObservedInboundTx(ctx context.Context, req *MsgVoteOnObservedInboundTx) (*MsgVoteOnObservedInboundTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteOnObservedInboundTx not implemented")
}
func (*UnimplementedMsgServer) SetNodeKeys(ctx context.Context, req *MsgSetNodeKeys) (*MsgSetNodeKeysResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetNodeKeys not implemented")
}
func (*UnimplementedMsgServer) SetSupportedChains(ctx context.Context, req *MsgSetSupportedChains) (*MsgSetSupportedChainsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetSupportedChains not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_ZetaConversionRateVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgZetaConversionRateVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ZetaConversionRateVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/ZetaConversionRateVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ZetaConversionRateVoter(ctx, req.(*MsgZetaConversionRateVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_AddToOutTxTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgAddToOutTxTracker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).AddToOutTxTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/AddToOutTxTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).AddToOutTxTracker(ctx, req.(*MsgAddToOutTxTracker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RemoveFromOutTxTracker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRemoveFromOutTxTracker)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RemoveFromOutTxTracker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/RemoveFromOutTxTracker",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RemoveFromOutTxTracker(ctx, req.(*MsgRemoveFromOutTxTracker))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CreateTSSVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateTSSVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateTSSVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/CreateTSSVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateTSSVoter(ctx, req.(*MsgCreateTSSVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GasBalanceVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGasBalanceVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GasBalanceVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/GasBalanceVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GasBalanceVoter(ctx, req.(*MsgGasBalanceVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_GasPriceVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgGasPriceVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).GasPriceVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/GasPriceVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).GasPriceVoter(ctx, req.(*MsgGasPriceVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_NonceVoter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgNonceVoter)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).NonceVoter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/NonceVoter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).NonceVoter(ctx, req.(*MsgNonceVoter))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOnObservedOutboundTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOnObservedOutboundTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOnObservedOutboundTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/VoteOnObservedOutboundTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOnObservedOutboundTx(ctx, req.(*MsgVoteOnObservedOutboundTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_VoteOnObservedInboundTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgVoteOnObservedInboundTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).VoteOnObservedInboundTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/VoteOnObservedInboundTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).VoteOnObservedInboundTx(ctx, req.(*MsgVoteOnObservedInboundTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetNodeKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetNodeKeys)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetNodeKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/SetNodeKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetNodeKeys(ctx, req.(*MsgSetNodeKeys))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetSupportedChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetSupportedChains)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetSupportedChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zetachain.zetacore.zetacore.Msg/SetSupportedChains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetSupportedChains(ctx, req.(*MsgSetSupportedChains))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zetachain.zetacore.zetacore.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ZetaConversionRateVoter",
			Handler:    _Msg_ZetaConversionRateVoter_Handler,
		},
		{
			MethodName: "AddToOutTxTracker",
			Handler:    _Msg_AddToOutTxTracker_Handler,
		},
		{
			MethodName: "RemoveFromOutTxTracker",
			Handler:    _Msg_RemoveFromOutTxTracker_Handler,
		},
		{
			MethodName: "CreateTSSVoter",
			Handler:    _Msg_CreateTSSVoter_Handler,
		},
		{
			MethodName: "GasBalanceVoter",
			Handler:    _Msg_GasBalanceVoter_Handler,
		},
		{
			MethodName: "GasPriceVoter",
			Handler:    _Msg_GasPriceVoter_Handler,
		},
		{
			MethodName: "NonceVoter",
			Handler:    _Msg_NonceVoter_Handler,
		},
		{
			MethodName: "VoteOnObservedOutboundTx",
			Handler:    _Msg_VoteOnObservedOutboundTx_Handler,
		},
		{
			MethodName: "VoteOnObservedInboundTx",
			Handler:    _Msg_VoteOnObservedInboundTx_Handler,
		},
		{
			MethodName: "SetNodeKeys",
			Handler:    _Msg_SetNodeKeys_Handler,
		},
		{
			MethodName: "SetSupportedChains",
			Handler:    _Msg_SetSupportedChains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "zetacore/tx.proto",
}

func (m *MsgZetaConversionRateVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgZetaConversionRateVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgZetaConversionRateVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ZetaConversionRate) > 0 {
		i -= len(m.ZetaConversionRate)
		copy(dAtA[i:], m.ZetaConversionRate)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ZetaConversionRate)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgZetaConversionRateVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgZetaConversionRateVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgZetaConversionRateVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgAddToOutTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToOutTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToOutTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgAddToOutTxTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgAddToOutTxTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgAddToOutTxTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFromOutTxTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFromOutTxTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFromOutTxTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRemoveFromOutTxTrackerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRemoveFromOutTxTrackerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRemoveFromOutTxTrackerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCreateTSSVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTSSVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTSSVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateTSSVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateTSSVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateTSSVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGasBalanceVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasBalanceVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasBalanceVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Balance) > 0 {
		i -= len(m.Balance)
		copy(dAtA[i:], m.Balance)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Balance)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGasBalanceVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasBalanceVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasBalanceVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgGasPriceVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasPriceVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasPriceVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Supply) > 0 {
		i -= len(m.Supply)
		copy(dAtA[i:], m.Supply)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Supply)))
		i--
		dAtA[i] = 0x2a
	}
	if m.BlockNumber != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.BlockNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.Price != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Price))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgGasPriceVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgGasPriceVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgGasPriceVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgNonceVoter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNonceVoter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNonceVoter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Nonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Nonce))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgNonceVoterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgNonceVoterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgNonceVoterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedOutboundTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedOutboundTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedOutboundTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutTxTssNonce != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.OutTxTssNonce))
		i--
		dAtA[i] = 0x40
	}
	if len(m.OutTxChain) > 0 {
		i -= len(m.OutTxChain)
		copy(dAtA[i:], m.OutTxChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.OutTxChain)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Status != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	{
		size := m.ZetaMinted.Size()
		i -= size
		if _, err := m.ZetaMinted.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ObservedOutTxBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ObservedOutTxBlockHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ObservedOutTxHash) > 0 {
		i -= len(m.ObservedOutTxHash)
		copy(dAtA[i:], m.ObservedOutTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ObservedOutTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CctxHash) > 0 {
		i -= len(m.CctxHash)
		copy(dAtA[i:], m.CctxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.CctxHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedOutboundTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedOutboundTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedOutboundTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedInboundTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedInboundTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedInboundTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GasLimit != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.GasLimit))
		i--
		dAtA[i] = 0x58
	}
	if m.InBlockHeight != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.InBlockHeight))
		i--
		dAtA[i] = 0x50
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintTx(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.ZetaBurnt) > 0 {
		i -= len(m.ZetaBurnt)
		copy(dAtA[i:], m.ZetaBurnt)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ZetaBurnt)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.ReceiverChain) > 0 {
		i -= len(m.ReceiverChain)
		copy(dAtA[i:], m.ReceiverChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ReceiverChain)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.SenderChain) > 0 {
		i -= len(m.SenderChain)
		copy(dAtA[i:], m.SenderChain)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SenderChain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgVoteOnObservedInboundTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgVoteOnObservedInboundTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgVoteOnObservedInboundTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetSupportedChains) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSupportedChains) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSupportedChains) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Chainlist) > 0 {
		for iNdEx := len(m.Chainlist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Chainlist[iNdEx])
			copy(dAtA[i:], m.Chainlist[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Chainlist[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetSupportedChainsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetSupportedChainsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetSupportedChainsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetNodeKeys) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNodeKeys) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNodeKeys) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorConsensusPubkey) > 0 {
		i -= len(m.ValidatorConsensusPubkey)
		copy(dAtA[i:], m.ValidatorConsensusPubkey)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ValidatorConsensusPubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PubkeySet != nil {
		{
			size, err := m.PubkeySet.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetNodeKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetNodeKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetNodeKeysResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgZetaConversionRateVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ZetaConversionRate)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	return n
}

func (m *MsgZetaConversionRateVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgAddToOutTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgAddToOutTxTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRemoveFromOutTxTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgRemoveFromOutTxTrackerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCreateTSSVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCreateTSSVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGasBalanceVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Balance)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	return n
}

func (m *MsgGasBalanceVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgGasPriceVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Price != 0 {
		n += 1 + sovTx(uint64(m.Price))
	}
	if m.BlockNumber != 0 {
		n += 1 + sovTx(uint64(m.BlockNumber))
	}
	l = len(m.Supply)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgGasPriceVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgNonceVoter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Nonce != 0 {
		n += 1 + sovTx(uint64(m.Nonce))
	}
	return n
}

func (m *MsgNonceVoterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOnObservedOutboundTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.CctxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ObservedOutTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.ObservedOutTxBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.ObservedOutTxBlockHeight))
	}
	l = m.ZetaMinted.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.Status != 0 {
		n += 1 + sovTx(uint64(m.Status))
	}
	l = len(m.OutTxChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.OutTxTssNonce != 0 {
		n += 1 + sovTx(uint64(m.OutTxTssNonce))
	}
	return n
}

func (m *MsgVoteOnObservedOutboundTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgVoteOnObservedInboundTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SenderChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ReceiverChain)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ZetaBurnt)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.InBlockHeight != 0 {
		n += 1 + sovTx(uint64(m.InBlockHeight))
	}
	if m.GasLimit != 0 {
		n += 1 + sovTx(uint64(m.GasLimit))
	}
	return n
}

func (m *MsgVoteOnObservedInboundTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetSupportedChains) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Chainlist) > 0 {
		for _, s := range m.Chainlist {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetSupportedChainsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetNodeKeys) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.PubkeySet != nil {
		l = m.PubkeySet.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.ValidatorConsensusPubkey)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetNodeKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgZetaConversionRateVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgZetaConversionRateVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgZetaConversionRateVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaConversionRate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZetaConversionRate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgZetaConversionRateVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgZetaConversionRateVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgZetaConversionRateVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToOutTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToOutTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToOutTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgAddToOutTxTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgAddToOutTxTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgAddToOutTxTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFromOutTxTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRemoveFromOutTxTrackerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTrackerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRemoveFromOutTxTrackerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTSSVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTSSVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTSSVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateTSSVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateTSSVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateTSSVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasBalanceVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasBalanceVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasBalanceVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Balance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Balance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasBalanceVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasBalanceVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasBalanceVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasPriceVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasPriceVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasPriceVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Price", wireType)
			}
			m.Price = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Price |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockNumber", wireType)
			}
			m.BlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supply", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Supply = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgGasPriceVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgGasPriceVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgGasPriceVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNonceVoter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNonceVoter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNonceVoter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nonce", wireType)
			}
			m.Nonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgNonceVoterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgNonceVoterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgNonceVoterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedOutboundTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CctxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ObservedOutTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ObservedOutTxBlockHeight", wireType)
			}
			m.ObservedOutTxBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ObservedOutTxBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaMinted", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZetaMinted.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= common.ReceiveStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxTssNonce", wireType)
			}
			m.OutTxTssNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutTxTssNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedOutboundTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedOutboundTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedInboundTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaBurnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZetaBurnt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBlockHeight", wireType)
			}
			m.InBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GasLimit", wireType)
			}
			m.GasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgVoteOnObservedInboundTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgVoteOnObservedInboundTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSupportedChains) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSupportedChains: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSupportedChains: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chainlist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chainlist = append(m.Chainlist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetSupportedChainsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetSupportedChainsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetSupportedChainsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetNodeKeys) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNodeKeys: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNodeKeys: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubkeySet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PubkeySet == nil {
				m.PubkeySet = &common.PubKeySet{}
			}
			if err := m.PubkeySet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorConsensusPubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorConsensusPubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetNodeKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetNodeKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetNodeKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
