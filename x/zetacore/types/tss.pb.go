// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetacore/tss.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TSS struct {
	Creator             string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index               string   `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	Chain               string   `protobuf:"bytes,3,opt,name=chain,proto3" json:"chain,omitempty"`
	Address             string   `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
	Pubkey              string   `protobuf:"bytes,5,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Signer              []string `protobuf:"bytes,6,rep,name=signer,proto3" json:"signer,omitempty"`
	FinalizedZetaHeight uint64   `protobuf:"varint,7,opt,name=finalizedZetaHeight,proto3" json:"finalizedZetaHeight,omitempty"`
}

func (m *TSS) Reset()         { *m = TSS{} }
func (m *TSS) String() string { return proto.CompactTextString(m) }
func (*TSS) ProtoMessage()    {}
func (*TSS) Descriptor() ([]byte, []int) {
	return fileDescriptor_2c94904cd86aa9ce, []int{0}
}
func (m *TSS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TSS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TSS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TSS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TSS.Merge(m, src)
}
func (m *TSS) XXX_Size() int {
	return m.Size()
}
func (m *TSS) XXX_DiscardUnknown() {
	xxx_messageInfo_TSS.DiscardUnknown(m)
}

var xxx_messageInfo_TSS proto.InternalMessageInfo

func (m *TSS) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TSS) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *TSS) GetChain() string {
	if m != nil {
		return m.Chain
	}
	return ""
}

func (m *TSS) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *TSS) GetPubkey() string {
	if m != nil {
		return m.Pubkey
	}
	return ""
}

func (m *TSS) GetSigner() []string {
	if m != nil {
		return m.Signer
	}
	return nil
}

func (m *TSS) GetFinalizedZetaHeight() uint64 {
	if m != nil {
		return m.FinalizedZetaHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*TSS)(nil), "zetachain.zetacore.zetacore.TSS")
}

func init() { proto.RegisterFile("zetacore/tss.proto", fileDescriptor_2c94904cd86aa9ce) }

var fileDescriptor_2c94904cd86aa9ce = []byte{
	// 258 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x31, 0x4e, 0xc3, 0x30,
	0x14, 0x86, 0x63, 0xd2, 0xa6, 0xc2, 0xa3, 0xa9, 0x90, 0x05, 0x92, 0x15, 0x31, 0x75, 0x21, 0x46,
	0xe2, 0x06, 0x4c, 0xb0, 0xb6, 0x4c, 0xdd, 0x9c, 0xe4, 0xe1, 0x58, 0x40, 0x1c, 0xd9, 0xae, 0xd4,
	0xf6, 0x14, 0xdc, 0x0a, 0xc6, 0x8e, 0x8c, 0x28, 0xb9, 0x08, 0xb2, 0xdd, 0x86, 0x85, 0xed, 0x7d,
	0xdf, 0x6f, 0x3f, 0x5b, 0x3f, 0x26, 0x7b, 0x70, 0xa2, 0xd2, 0x06, 0xb8, 0xb3, 0xb6, 0xe8, 0x8c,
	0x76, 0x9a, 0x5c, 0x07, 0xd7, 0x08, 0xd5, 0x16, 0xa7, 0x74, 0x1c, 0xae, 0xe6, 0x52, 0x4b, 0x1d,
	0xce, 0x71, 0x3f, 0xc5, 0x2b, 0x37, 0x9f, 0x08, 0xa7, 0xcf, 0xab, 0x15, 0xa1, 0x78, 0x56, 0x19,
	0x10, 0x4e, 0x1b, 0x8a, 0x72, 0xb4, 0x38, 0x5f, 0x9e, 0x90, 0xcc, 0xf1, 0x54, 0xb5, 0x35, 0x6c,
	0xe9, 0x59, 0xf0, 0x11, 0xbc, 0x0d, 0x0f, 0xd1, 0x34, 0xda, 0x00, 0x7e, 0x8b, 0xa8, 0x6b, 0x03,
	0xd6, 0xd2, 0x49, 0xdc, 0x72, 0x44, 0x72, 0x89, 0xb3, 0x6e, 0x53, 0xbe, 0xc2, 0x8e, 0x4e, 0x43,
	0x70, 0x24, 0xef, 0xad, 0x92, 0x2d, 0x18, 0x9a, 0xe5, 0xa9, 0xf7, 0x91, 0xc8, 0x1d, 0xbe, 0x78,
	0x51, 0xad, 0x78, 0x53, 0x7b, 0xa8, 0xd7, 0xe0, 0xc4, 0x23, 0x28, 0xd9, 0x38, 0x3a, 0xcb, 0xd1,
	0x62, 0xb2, 0xfc, 0x2f, 0x7a, 0x78, 0xfa, 0xea, 0x19, 0x3a, 0xf4, 0x0c, 0xfd, 0xf4, 0x0c, 0x7d,
	0x0c, 0x2c, 0x39, 0x0c, 0x2c, 0xf9, 0x1e, 0x58, 0xb2, 0xe6, 0x52, 0xb9, 0x66, 0x53, 0x16, 0x95,
	0x7e, 0xe7, 0xbe, 0x8e, 0xdb, 0xf0, 0x59, 0x3e, 0x16, 0xb8, 0xfd, 0x1b, 0xdd, 0xae, 0x03, 0x5b,
	0x66, 0xa1, 0x9b, 0xfb, 0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x8c, 0x45, 0xe9, 0x64, 0x01,
	0x00, 0x00,
}

func (m *TSS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TSS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TSS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FinalizedZetaHeight != 0 {
		i = encodeVarintTss(dAtA, i, uint64(m.FinalizedZetaHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Signer) > 0 {
		for iNdEx := len(m.Signer) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signer[iNdEx])
			copy(dAtA[i:], m.Signer[iNdEx])
			i = encodeVarintTss(dAtA, i, uint64(len(m.Signer[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.Pubkey) > 0 {
		i -= len(m.Pubkey)
		copy(dAtA[i:], m.Pubkey)
		i = encodeVarintTss(dAtA, i, uint64(len(m.Pubkey)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTss(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Chain) > 0 {
		i -= len(m.Chain)
		copy(dAtA[i:], m.Chain)
		i = encodeVarintTss(dAtA, i, uint64(len(m.Chain)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTss(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTss(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTss(dAtA []byte, offset int, v uint64) int {
	offset -= sovTss(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TSS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	l = len(m.Chain)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	l = len(m.Pubkey)
	if l > 0 {
		n += 1 + l + sovTss(uint64(l))
	}
	if len(m.Signer) > 0 {
		for _, s := range m.Signer {
			l = len(s)
			n += 1 + l + sovTss(uint64(l))
		}
	}
	if m.FinalizedZetaHeight != 0 {
		n += 1 + sovTss(uint64(m.FinalizedZetaHeight))
	}
	return n
}

func sovTss(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTss(x uint64) (n int) {
	return sovTss(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TSS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTss
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TSS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TSS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pubkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pubkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTss
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTss
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signer = append(m.Signer, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FinalizedZetaHeight", wireType)
			}
			m.FinalizedZetaHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTss
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FinalizedZetaHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTss(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTss
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTss(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTss
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTss
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTss
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTss
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTss
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTss        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTss          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTss = fmt.Errorf("proto: unexpected end of group")
)
