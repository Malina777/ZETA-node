// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetacore/tx_list.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Tx struct {
	SendHash   string `protobuf:"bytes,1,opt,name=sendHash,proto3" json:"sendHash,omitempty"`
	RecvHash   string `protobuf:"bytes,2,opt,name=recvHash,proto3" json:"recvHash,omitempty"`
	InTxHash   string `protobuf:"bytes,3,opt,name=inTxHash,proto3" json:"inTxHash,omitempty"`
	InTxChain  string `protobuf:"bytes,4,opt,name=inTxChain,proto3" json:"inTxChain,omitempty"`
	OutTxHash  string `protobuf:"bytes,5,opt,name=outTxHash,proto3" json:"outTxHash,omitempty"`
	OutTxChain string `protobuf:"bytes,6,opt,name=outTxChain,proto3" json:"outTxChain,omitempty"`
}

func (m *Tx) Reset()         { *m = Tx{} }
func (m *Tx) String() string { return proto.CompactTextString(m) }
func (*Tx) ProtoMessage()    {}
func (*Tx) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f8be5fd39dec6a, []int{0}
}
func (m *Tx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Tx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Tx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Tx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Tx.Merge(m, src)
}
func (m *Tx) XXX_Size() int {
	return m.Size()
}
func (m *Tx) XXX_DiscardUnknown() {
	xxx_messageInfo_Tx.DiscardUnknown(m)
}

var xxx_messageInfo_Tx proto.InternalMessageInfo

func (m *Tx) GetSendHash() string {
	if m != nil {
		return m.SendHash
	}
	return ""
}

func (m *Tx) GetRecvHash() string {
	if m != nil {
		return m.RecvHash
	}
	return ""
}

func (m *Tx) GetInTxHash() string {
	if m != nil {
		return m.InTxHash
	}
	return ""
}

func (m *Tx) GetInTxChain() string {
	if m != nil {
		return m.InTxChain
	}
	return ""
}

func (m *Tx) GetOutTxHash() string {
	if m != nil {
		return m.OutTxHash
	}
	return ""
}

func (m *Tx) GetOutTxChain() string {
	if m != nil {
		return m.OutTxChain
	}
	return ""
}

type TxList struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Tx      []*Tx  `protobuf:"bytes,2,rep,name=tx,proto3" json:"tx,omitempty"`
}

func (m *TxList) Reset()         { *m = TxList{} }
func (m *TxList) String() string { return proto.CompactTextString(m) }
func (*TxList) ProtoMessage()    {}
func (*TxList) Descriptor() ([]byte, []int) {
	return fileDescriptor_f2f8be5fd39dec6a, []int{1}
}
func (m *TxList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TxList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TxList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TxList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TxList.Merge(m, src)
}
func (m *TxList) XXX_Size() int {
	return m.Size()
}
func (m *TxList) XXX_DiscardUnknown() {
	xxx_messageInfo_TxList.DiscardUnknown(m)
}

var xxx_messageInfo_TxList proto.InternalMessageInfo

func (m *TxList) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *TxList) GetTx() []*Tx {
	if m != nil {
		return m.Tx
	}
	return nil
}

func init() {
	proto.RegisterType((*Tx)(nil), "zetachain.zetacore.zetacore.Tx")
	proto.RegisterType((*TxList)(nil), "zetachain.zetacore.zetacore.TxList")
}

func init() { proto.RegisterFile("zetacore/tx_list.proto", fileDescriptor_f2f8be5fd39dec6a) }

var fileDescriptor_f2f8be5fd39dec6a = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xb1, 0x4e, 0xf3, 0x30,
	0x14, 0x85, 0x63, 0xf7, 0xff, 0x03, 0x35, 0x9b, 0x85, 0x50, 0x54, 0x90, 0xa9, 0x3a, 0x75, 0xc1,
	0x96, 0xe0, 0x0d, 0x60, 0x01, 0x89, 0xa9, 0x64, 0x62, 0x41, 0x69, 0xb0, 0x12, 0x4b, 0x10, 0x57,
	0xf6, 0x2d, 0x32, 0x3c, 0x05, 0x0f, 0xc3, 0x43, 0x30, 0x76, 0x64, 0x44, 0xc9, 0x8b, 0x20, 0xdb,
	0x4d, 0xca, 0xc4, 0x76, 0xce, 0xf9, 0xee, 0xb1, 0xae, 0xae, 0xc9, 0xd1, 0x9b, 0x84, 0xa2, 0xd4,
	0x46, 0x0a, 0x70, 0x0f, 0x4f, 0xca, 0x02, 0x5f, 0x19, 0x0d, 0x9a, 0x1e, 0x87, 0xbc, 0x2e, 0x54,
	0xc3, 0xfb, 0x89, 0x41, 0x4c, 0x0e, 0x2b, 0x5d, 0xe9, 0x30, 0x27, 0xbc, 0x8a, 0x95, 0xd9, 0x07,
	0x22, 0x38, 0x77, 0x74, 0x42, 0xf6, 0xad, 0x6c, 0x1e, 0xaf, 0x0b, 0x5b, 0x67, 0x68, 0x8a, 0xe6,
	0xe3, 0xc5, 0xe0, 0x3d, 0x33, 0xb2, 0x7c, 0x09, 0x0c, 0x47, 0xd6, 0x7b, 0xcf, 0x54, 0x93, 0xbb,
	0xc0, 0x46, 0x91, 0xf5, 0x9e, 0x9e, 0x90, 0xb1, 0xd7, 0x57, 0x7e, 0x9f, 0xec, 0x5f, 0x80, 0xbb,
	0xc0, 0x53, 0xbd, 0x86, 0x6d, 0xf5, 0x7f, 0xa4, 0x43, 0x40, 0x19, 0x21, 0xc1, 0xc4, 0x72, 0x1a,
	0xf0, 0xaf, 0x64, 0x76, 0x47, 0xd2, 0xdc, 0xdd, 0x2a, 0x0b, 0x34, 0x23, 0x7b, 0xa5, 0x91, 0x05,
	0x68, 0xb3, 0x5d, 0xbc, 0xb7, 0x54, 0x10, 0x0c, 0x2e, 0xc3, 0xd3, 0xd1, 0xfc, 0xe0, 0xfc, 0x94,
	0xff, 0x71, 0x1a, 0x9e, 0xbb, 0x05, 0x06, 0x77, 0x79, 0xf3, 0xd9, 0x32, 0xb4, 0x69, 0x19, 0xfa,
	0x6e, 0x19, 0x7a, 0xef, 0x58, 0xb2, 0xe9, 0x58, 0xf2, 0xd5, 0xb1, 0xe4, 0x5e, 0x54, 0x0a, 0xea,
	0xf5, 0x92, 0x97, 0xfa, 0x59, 0xf8, 0xd6, 0x59, 0x78, 0x49, 0x0c, 0xdf, 0xe0, 0x76, 0x12, 0x5e,
	0x57, 0xd2, 0x2e, 0xd3, 0x70, 0xdd, 0x8b, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd4, 0x67, 0x9a,
	0x9a, 0xaa, 0x01, 0x00, 0x00,
}

func (m *Tx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Tx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Tx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OutTxChain) > 0 {
		i -= len(m.OutTxChain)
		copy(dAtA[i:], m.OutTxChain)
		i = encodeVarintTxList(dAtA, i, uint64(len(m.OutTxChain)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OutTxHash) > 0 {
		i -= len(m.OutTxHash)
		copy(dAtA[i:], m.OutTxHash)
		i = encodeVarintTxList(dAtA, i, uint64(len(m.OutTxHash)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.InTxChain) > 0 {
		i -= len(m.InTxChain)
		copy(dAtA[i:], m.InTxChain)
		i = encodeVarintTxList(dAtA, i, uint64(len(m.InTxChain)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.InTxHash) > 0 {
		i -= len(m.InTxHash)
		copy(dAtA[i:], m.InTxHash)
		i = encodeVarintTxList(dAtA, i, uint64(len(m.InTxHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RecvHash) > 0 {
		i -= len(m.RecvHash)
		copy(dAtA[i:], m.RecvHash)
		i = encodeVarintTxList(dAtA, i, uint64(len(m.RecvHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SendHash) > 0 {
		i -= len(m.SendHash)
		copy(dAtA[i:], m.SendHash)
		i = encodeVarintTxList(dAtA, i, uint64(len(m.SendHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TxList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TxList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TxList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tx) > 0 {
		for iNdEx := len(m.Tx) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Tx[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTxList(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTxList(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTxList(dAtA []byte, offset int, v uint64) int {
	offset -= sovTxList(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Tx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SendHash)
	if l > 0 {
		n += 1 + l + sovTxList(uint64(l))
	}
	l = len(m.RecvHash)
	if l > 0 {
		n += 1 + l + sovTxList(uint64(l))
	}
	l = len(m.InTxHash)
	if l > 0 {
		n += 1 + l + sovTxList(uint64(l))
	}
	l = len(m.InTxChain)
	if l > 0 {
		n += 1 + l + sovTxList(uint64(l))
	}
	l = len(m.OutTxHash)
	if l > 0 {
		n += 1 + l + sovTxList(uint64(l))
	}
	l = len(m.OutTxChain)
	if l > 0 {
		n += 1 + l + sovTxList(uint64(l))
	}
	return n
}

func (m *TxList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTxList(uint64(l))
	}
	if len(m.Tx) > 0 {
		for _, e := range m.Tx {
			l = e.Size()
			n += 1 + l + sovTxList(uint64(l))
		}
	}
	return n
}

func sovTxList(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTxList(x uint64) (n int) {
	return sovTxList(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Tx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SendHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SendHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecvHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecvHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InTxChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InTxChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTxChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTxChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TxList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTxList
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TxList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TxList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTxList
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTxList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tx", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTxList
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTxList
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tx = append(m.Tx, &Tx{})
			if err := m.Tx[len(m.Tx)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTxList(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTxList
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTxList(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTxList
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTxList
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTxList
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTxList
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTxList
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTxList        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTxList          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTxList = fmt.Errorf("proto: unexpected end of group")
)
