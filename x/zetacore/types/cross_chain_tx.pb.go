// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetacore/cross_chain_tx.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CctxStatus int32

const (
	CctxStatus_PendingInbound  CctxStatus = 0
	CctxStatus_PendingOutbound CctxStatus = 1
	CctxStatus_OutboundMined   CctxStatus = 2
	CctxStatus_Confirmed       CctxStatus = 3
	CctxStatus_PendingRevert   CctxStatus = 4
	CctxStatus_Reverted        CctxStatus = 5
	CctxStatus_Aborted         CctxStatus = 6
)

var CctxStatus_name = map[int32]string{
	0: "PendingInbound",
	1: "PendingOutbound",
	2: "OutboundMined",
	3: "Confirmed",
	4: "PendingRevert",
	5: "Reverted",
	6: "Aborted",
}

var CctxStatus_value = map[string]int32{
	"PendingInbound":  0,
	"PendingOutbound": 1,
	"OutboundMined":   2,
	"Confirmed":       3,
	"PendingRevert":   4,
	"Reverted":        5,
	"Aborted":         6,
}

func (x CctxStatus) String() string {
	return proto.EnumName(CctxStatus_name, int32(x))
}

func (CctxStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f920bbe25fbee994, []int{0}
}

type InBoundTxParams struct {
	Sender                   string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	SenderChain              string `protobuf:"bytes,2,opt,name=senderChain,proto3" json:"senderChain,omitempty"`
	InBoundTxObservedHash    string `protobuf:"bytes,3,opt,name=inBoundTxObservedHash,proto3" json:"inBoundTxObservedHash,omitempty"`
	InBoundTxObservedHeight  uint64 `protobuf:"varint,4,opt,name=inBoundTxObservedHeight,proto3" json:"inBoundTxObservedHeight,omitempty"`
	InBoundTxFinalizedHeight uint64 `protobuf:"varint,5,opt,name=inBoundTxFinalizedHeight,proto3" json:"inBoundTxFinalizedHeight,omitempty"`
}

func (m *InBoundTxParams) Reset()         { *m = InBoundTxParams{} }
func (m *InBoundTxParams) String() string { return proto.CompactTextString(m) }
func (*InBoundTxParams) ProtoMessage()    {}
func (*InBoundTxParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f920bbe25fbee994, []int{0}
}
func (m *InBoundTxParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InBoundTxParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InBoundTxParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InBoundTxParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InBoundTxParams.Merge(m, src)
}
func (m *InBoundTxParams) XXX_Size() int {
	return m.Size()
}
func (m *InBoundTxParams) XXX_DiscardUnknown() {
	xxx_messageInfo_InBoundTxParams.DiscardUnknown(m)
}

var xxx_messageInfo_InBoundTxParams proto.InternalMessageInfo

func (m *InBoundTxParams) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *InBoundTxParams) GetSenderChain() string {
	if m != nil {
		return m.SenderChain
	}
	return ""
}

func (m *InBoundTxParams) GetInBoundTxObservedHash() string {
	if m != nil {
		return m.InBoundTxObservedHash
	}
	return ""
}

func (m *InBoundTxParams) GetInBoundTxObservedHeight() uint64 {
	if m != nil {
		return m.InBoundTxObservedHeight
	}
	return 0
}

func (m *InBoundTxParams) GetInBoundTxFinalizedHeight() uint64 {
	if m != nil {
		return m.InBoundTxFinalizedHeight
	}
	return 0
}

type OutBoundTxParams struct {
	Receiver                  string `protobuf:"bytes,1,opt,name=receiver,proto3" json:"receiver,omitempty"`
	ReceiverChain             string `protobuf:"bytes,2,opt,name=receiverChain,proto3" json:"receiverChain,omitempty"`
	Broadcaster               uint64 `protobuf:"varint,3,opt,name=broadcaster,proto3" json:"broadcaster,omitempty"`
	OutBoundTxHash            string `protobuf:"bytes,4,opt,name=outBoundTxHash,proto3" json:"outBoundTxHash,omitempty"`
	OutBoundTxTSSNonce        uint64 `protobuf:"varint,5,opt,name=outBoundTxTSSNonce,proto3" json:"outBoundTxTSSNonce,omitempty"`
	OutBoundTxGasLimit        uint64 `protobuf:"varint,6,opt,name=outBoundTxGasLimit,proto3" json:"outBoundTxGasLimit,omitempty"`
	OutBoundTxGasPrice        string `protobuf:"bytes,7,opt,name=outBoundTxGasPrice,proto3" json:"outBoundTxGasPrice,omitempty"`
	OutBoundTXReceiveIndex    string `protobuf:"bytes,8,opt,name=outBoundTXReceiveIndex,proto3" json:"outBoundTXReceiveIndex,omitempty"`
	OutBoundTxFinalizedHeight uint64 `protobuf:"varint,9,opt,name=outBoundTxFinalizedHeight,proto3" json:"outBoundTxFinalizedHeight,omitempty"`
}

func (m *OutBoundTxParams) Reset()         { *m = OutBoundTxParams{} }
func (m *OutBoundTxParams) String() string { return proto.CompactTextString(m) }
func (*OutBoundTxParams) ProtoMessage()    {}
func (*OutBoundTxParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f920bbe25fbee994, []int{1}
}
func (m *OutBoundTxParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OutBoundTxParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OutBoundTxParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OutBoundTxParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OutBoundTxParams.Merge(m, src)
}
func (m *OutBoundTxParams) XXX_Size() int {
	return m.Size()
}
func (m *OutBoundTxParams) XXX_DiscardUnknown() {
	xxx_messageInfo_OutBoundTxParams.DiscardUnknown(m)
}

var xxx_messageInfo_OutBoundTxParams proto.InternalMessageInfo

func (m *OutBoundTxParams) GetReceiver() string {
	if m != nil {
		return m.Receiver
	}
	return ""
}

func (m *OutBoundTxParams) GetReceiverChain() string {
	if m != nil {
		return m.ReceiverChain
	}
	return ""
}

func (m *OutBoundTxParams) GetBroadcaster() uint64 {
	if m != nil {
		return m.Broadcaster
	}
	return 0
}

func (m *OutBoundTxParams) GetOutBoundTxHash() string {
	if m != nil {
		return m.OutBoundTxHash
	}
	return ""
}

func (m *OutBoundTxParams) GetOutBoundTxTSSNonce() uint64 {
	if m != nil {
		return m.OutBoundTxTSSNonce
	}
	return 0
}

func (m *OutBoundTxParams) GetOutBoundTxGasLimit() uint64 {
	if m != nil {
		return m.OutBoundTxGasLimit
	}
	return 0
}

func (m *OutBoundTxParams) GetOutBoundTxGasPrice() string {
	if m != nil {
		return m.OutBoundTxGasPrice
	}
	return ""
}

func (m *OutBoundTxParams) GetOutBoundTXReceiveIndex() string {
	if m != nil {
		return m.OutBoundTXReceiveIndex
	}
	return ""
}

func (m *OutBoundTxParams) GetOutBoundTxFinalizedHeight() uint64 {
	if m != nil {
		return m.OutBoundTxFinalizedHeight
	}
	return 0
}

type Status struct {
	Status              CctxStatus `protobuf:"varint,1,opt,name=status,proto3,enum=zetachain.zetacore.zetacore.CctxStatus" json:"status,omitempty"`
	StatusMessage       string     `protobuf:"bytes,2,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	LastUpdateTimestamp int64      `protobuf:"varint,3,opt,name=lastUpdateTimestamp,proto3" json:"lastUpdateTimestamp,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_f920bbe25fbee994, []int{2}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(m, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

func (m *Status) GetStatus() CctxStatus {
	if m != nil {
		return m.Status
	}
	return CctxStatus_PendingInbound
}

func (m *Status) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func (m *Status) GetLastUpdateTimestamp() int64 {
	if m != nil {
		return m.LastUpdateTimestamp
	}
	return 0
}

type CrossChainTx struct {
	Creator          string                                  `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Index            string                                  `protobuf:"bytes,2,opt,name=index,proto3" json:"index,omitempty"`
	ZetaBurnt        github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,3,opt,name=zetaBurnt,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"zetaBurnt" yaml:"zetaBurnt"`
	ZetaMint         github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,4,opt,name=zetaMint,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"zetaMint" yaml:"zetaMint"`
	RelayedMessage   string                                  `protobuf:"bytes,5,opt,name=relayedMessage,proto3" json:"relayedMessage,omitempty"`
	Signers          []string                                `protobuf:"bytes,6,rep,name=signers,proto3" json:"signers,omitempty"`
	CctxStatus       *Status                                 `protobuf:"bytes,7,opt,name=cctx_status,json=cctxStatus,proto3" json:"cctx_status,omitempty"`
	InBoundTxParams  *InBoundTxParams                        `protobuf:"bytes,8,opt,name=InBoundTxParams,proto3" json:"InBoundTxParams,omitempty"`
	OutBoundTxParams *OutBoundTxParams                       `protobuf:"bytes,9,opt,name=OutBoundTxParams,proto3" json:"OutBoundTxParams,omitempty"`
}

func (m *CrossChainTx) Reset()         { *m = CrossChainTx{} }
func (m *CrossChainTx) String() string { return proto.CompactTextString(m) }
func (*CrossChainTx) ProtoMessage()    {}
func (*CrossChainTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_f920bbe25fbee994, []int{3}
}
func (m *CrossChainTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CrossChainTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CrossChainTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CrossChainTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CrossChainTx.Merge(m, src)
}
func (m *CrossChainTx) XXX_Size() int {
	return m.Size()
}
func (m *CrossChainTx) XXX_DiscardUnknown() {
	xxx_messageInfo_CrossChainTx.DiscardUnknown(m)
}

var xxx_messageInfo_CrossChainTx proto.InternalMessageInfo

func (m *CrossChainTx) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CrossChainTx) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *CrossChainTx) GetRelayedMessage() string {
	if m != nil {
		return m.RelayedMessage
	}
	return ""
}

func (m *CrossChainTx) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *CrossChainTx) GetCctxStatus() *Status {
	if m != nil {
		return m.CctxStatus
	}
	return nil
}

func (m *CrossChainTx) GetInBoundTxParams() *InBoundTxParams {
	if m != nil {
		return m.InBoundTxParams
	}
	return nil
}

func (m *CrossChainTx) GetOutBoundTxParams() *OutBoundTxParams {
	if m != nil {
		return m.OutBoundTxParams
	}
	return nil
}

func init() {
	proto.RegisterEnum("zetachain.zetacore.zetacore.CctxStatus", CctxStatus_name, CctxStatus_value)
	proto.RegisterType((*InBoundTxParams)(nil), "zetachain.zetacore.zetacore.InBoundTxParams")
	proto.RegisterType((*OutBoundTxParams)(nil), "zetachain.zetacore.zetacore.OutBoundTxParams")
	proto.RegisterType((*Status)(nil), "zetachain.zetacore.zetacore.Status")
	proto.RegisterType((*CrossChainTx)(nil), "zetachain.zetacore.zetacore.CrossChainTx")
}

func init() { proto.RegisterFile("zetacore/cross_chain_tx.proto", fileDescriptor_f920bbe25fbee994) }

var fileDescriptor_f920bbe25fbee994 = []byte{
	// 769 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xcd, 0x6e, 0x23, 0x45,
	0x10, 0xf6, 0xc4, 0x3f, 0xb1, 0xcb, 0xf9, 0x31, 0x9d, 0x10, 0x86, 0x20, 0x1c, 0xcb, 0x20, 0x12,
	0x21, 0x62, 0x23, 0x83, 0x10, 0x8a, 0x90, 0x10, 0x36, 0x02, 0x2c, 0x11, 0x12, 0x4d, 0x1c, 0x04,
	0x1c, 0x88, 0xda, 0x33, 0x8d, 0xdd, 0xc2, 0xd3, 0x6d, 0x75, 0xb7, 0x23, 0x27, 0xaf, 0xb0, 0x97,
	0x7d, 0x85, 0x95, 0x72, 0xd8, 0x87, 0xd8, 0x07, 0xc8, 0x31, 0xc7, 0xd5, 0x1e, 0xa2, 0x55, 0xf2,
	0x06, 0x7b, 0xd9, 0xeb, 0xaa, 0x7b, 0x7e, 0xfc, 0x6f, 0x69, 0x4f, 0xae, 0xfa, 0xbe, 0xaa, 0xea,
	0xa9, 0xaa, 0xaf, 0xdb, 0xf0, 0xe9, 0x35, 0x51, 0xd8, 0xe5, 0x82, 0x54, 0x5d, 0xc1, 0xa5, 0xbc,
	0x70, 0xbb, 0x98, 0xb2, 0x0b, 0x35, 0xac, 0xf4, 0x05, 0x57, 0x1c, 0x7d, 0x62, 0x68, 0x8d, 0x55,
	0xa2, 0xc0, 0xd8, 0xd8, 0xdd, 0xee, 0xf0, 0x0e, 0x37, 0x71, 0x55, 0x6d, 0x05, 0x29, 0xe5, 0xb7,
	0x16, 0x6c, 0x36, 0x59, 0x9d, 0x0f, 0x98, 0xd7, 0x1a, 0x9e, 0x62, 0x81, 0x7d, 0x89, 0x76, 0x20,
	0x23, 0x09, 0xf3, 0x88, 0xb0, 0xad, 0x92, 0x75, 0x90, 0x73, 0x42, 0x0f, 0x95, 0x20, 0x1f, 0x58,
	0x0d, 0x7d, 0x84, 0xbd, 0x62, 0xc8, 0x71, 0x08, 0x7d, 0x0b, 0x1f, 0xd2, 0xa8, 0xd8, 0x49, 0x5b,
	0x12, 0x71, 0x49, 0xbc, 0xdf, 0xb0, 0xec, 0xda, 0x49, 0x13, 0x3b, 0x9f, 0x44, 0xdf, 0xc3, 0x47,
	0xb3, 0x04, 0xa1, 0x9d, 0xae, 0xb2, 0x53, 0x25, 0xeb, 0x20, 0xe5, 0x2c, 0xa2, 0xd1, 0x11, 0xd8,
	0x31, 0xf5, 0x0b, 0x65, 0xb8, 0x47, 0xaf, 0xe3, 0xd4, 0xb4, 0x49, 0x5d, 0xc8, 0x97, 0x6f, 0x92,
	0x50, 0x38, 0x19, 0xa8, 0xc9, 0xd6, 0x77, 0x21, 0x2b, 0x88, 0x4b, 0xe8, 0x65, 0xdc, 0x7c, 0xec,
	0xa3, 0xcf, 0x61, 0x3d, 0xb2, 0xc7, 0x07, 0x30, 0x09, 0xea, 0x21, 0xb5, 0x05, 0xc7, 0x9e, 0x8b,
	0xa5, 0x22, 0xc2, 0x34, 0x9e, 0x72, 0xc6, 0x21, 0xf4, 0x05, 0x6c, 0xf0, 0xf8, 0x5c, 0x33, 0x9d,
	0x94, 0x29, 0x34, 0x85, 0xa2, 0x0a, 0xa0, 0x11, 0xd2, 0x3a, 0x3b, 0xfb, 0x83, 0x33, 0x97, 0x84,
	0x6d, 0xcd, 0x61, 0x26, 0xe3, 0x7f, 0xc5, 0xf2, 0x77, 0xea, 0x53, 0x65, 0x67, 0xa6, 0xe3, 0x23,
	0x66, 0x26, 0xfe, 0x54, 0x50, 0x97, 0xd8, 0xab, 0xe6, 0x5b, 0xe6, 0x30, 0xe8, 0x3b, 0xd8, 0x89,
	0xd1, 0xbf, 0x9c, 0xa0, 0xe9, 0x26, 0xf3, 0xc8, 0xd0, 0xce, 0x9a, 0x9c, 0x05, 0x2c, 0xfa, 0x01,
	0x3e, 0x1e, 0x55, 0x9b, 0xde, 0x52, 0xce, 0x7c, 0xde, 0xe2, 0x80, 0xf2, 0x33, 0x0b, 0x32, 0x67,
	0x0a, 0xab, 0x81, 0x44, 0x3f, 0x42, 0x46, 0x1a, 0xcb, 0xac, 0x66, 0xa3, 0xb6, 0x5f, 0x59, 0xa2,
	0xf7, 0x4a, 0xc3, 0x55, 0xc3, 0x20, 0xd1, 0x09, 0xd3, 0xf4, 0x06, 0x03, 0xeb, 0x98, 0x48, 0x89,
	0x3b, 0x24, 0xda, 0xe0, 0x04, 0x88, 0xbe, 0x86, 0xad, 0x1e, 0x96, 0xea, 0xbc, 0xef, 0x61, 0x45,
	0x5a, 0xd4, 0x27, 0x52, 0x61, 0xbf, 0x6f, 0x36, 0x99, 0x74, 0xe6, 0x51, 0xe5, 0x17, 0x29, 0x58,
	0x6b, 0xe8, 0x0b, 0x69, 0x24, 0xd0, 0x1a, 0x22, 0x1b, 0x56, 0x5d, 0x41, 0xb0, 0xe2, 0x91, 0x8a,
	0x22, 0x17, 0x6d, 0x43, 0x9a, 0x9a, 0x99, 0x05, 0x47, 0x07, 0x0e, 0xc2, 0x90, 0xd3, 0xdf, 0x5d,
	0x1f, 0x08, 0xa6, 0x82, 0xbb, 0x52, 0x6f, 0xdc, 0xde, 0xef, 0x25, 0x5e, 0xdd, 0xef, 0xed, 0x77,
	0xa8, 0xea, 0x0e, 0xda, 0x15, 0x97, 0xfb, 0x55, 0x97, 0x4b, 0x9f, 0xcb, 0xf0, 0xe7, 0x50, 0x7a,
	0xff, 0x57, 0xd5, 0x55, 0x9f, 0xc8, 0xca, 0x39, 0x65, 0xea, 0xcd, 0xfd, 0x5e, 0xe1, 0x0a, 0xfb,
	0xbd, 0xa3, 0x72, 0x5c, 0xa9, 0xec, 0x8c, 0xaa, 0xa2, 0x7f, 0x21, 0xab, 0x9d, 0x63, 0xca, 0x82,
	0x5b, 0x95, 0xab, 0xd7, 0xdf, 0xff, 0x84, 0xcd, 0xd1, 0x09, 0xba, 0x50, 0xd9, 0x89, 0x6b, 0x6a,
	0x55, 0x0b, 0xd2, 0xc3, 0x57, 0xc4, 0x8b, 0x86, 0x9b, 0x0e, 0x54, 0x3d, 0x89, 0xea, 0xd1, 0x48,
	0xda, 0x61, 0x44, 0x48, 0x3b, 0x53, 0x4a, 0xea, 0xd1, 0x84, 0x2e, 0xfa, 0x19, 0xf2, 0xae, 0xab,
	0x86, 0x17, 0xe1, 0x8e, 0xb5, 0x10, 0xf3, 0xb5, 0xcf, 0x96, 0xee, 0x38, 0xdc, 0x2f, 0xb8, 0xf1,
	0xae, 0xd1, 0x9f, 0x33, 0xef, 0x99, 0x91, 0x67, 0xbe, 0xf6, 0xd5, 0xd2, 0x4a, 0x53, 0x39, 0xce,
	0xcc, 0xa3, 0xf8, 0xf7, 0xec, 0x6b, 0x61, 0xc4, 0x9b, 0xaf, 0x1d, 0x2e, 0x2d, 0x3c, 0x9d, 0xe4,
	0xcc, 0x94, 0xf9, 0xf2, 0x89, 0x05, 0x30, 0x52, 0x2b, 0x42, 0xb0, 0x71, 0x4a, 0x98, 0x47, 0x59,
	0xa7, 0xc9, 0xda, 0x3a, 0xb0, 0x90, 0x40, 0x5b, 0xb0, 0x19, 0x62, 0x27, 0x03, 0x15, 0x80, 0x16,
	0xfa, 0x00, 0xd6, 0x23, 0xef, 0x98, 0x32, 0xe2, 0x15, 0x56, 0xd0, 0x3a, 0xe4, 0x1a, 0x9c, 0xfd,
	0x47, 0x85, 0x4f, 0xbc, 0x42, 0x52, 0x47, 0x84, 0x69, 0x0e, 0xb9, 0x24, 0x42, 0x15, 0x52, 0x68,
	0x0d, 0xb2, 0x81, 0x4d, 0xbc, 0x42, 0x1a, 0xe5, 0x61, 0xf5, 0xa7, 0x36, 0x37, 0x4e, 0x66, 0x37,
	0xf5, 0xfc, 0xa6, 0x68, 0xd5, 0x9b, 0xb7, 0x0f, 0x45, 0xeb, 0xee, 0xa1, 0x68, 0xbd, 0x7e, 0x28,
	0x5a, 0x4f, 0x1f, 0x8b, 0x89, 0xbb, 0xc7, 0x62, 0xe2, 0xe5, 0x63, 0x31, 0xf1, 0x4f, 0x75, 0x4c,
	0x28, 0xba, 0xbf, 0x43, 0xd3, 0x73, 0x35, 0xfe, 0x4f, 0x1a, 0x8e, 0x4c, 0xa3, 0x9a, 0x76, 0xc6,
	0xfc, 0xc7, 0x7c, 0xf3, 0x2e, 0x00, 0x00, 0xff, 0xff, 0xad, 0xa0, 0x00, 0xc8, 0xb7, 0x06, 0x00,
	0x00,
}

func (m *InBoundTxParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InBoundTxParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InBoundTxParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InBoundTxFinalizedHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.InBoundTxFinalizedHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.InBoundTxObservedHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.InBoundTxObservedHeight))
		i--
		dAtA[i] = 0x20
	}
	if len(m.InBoundTxObservedHash) > 0 {
		i -= len(m.InBoundTxObservedHash)
		copy(dAtA[i:], m.InBoundTxObservedHash)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.InBoundTxObservedHash)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SenderChain) > 0 {
		i -= len(m.SenderChain)
		copy(dAtA[i:], m.SenderChain)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.SenderChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OutBoundTxParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OutBoundTxParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OutBoundTxParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutBoundTxFinalizedHeight != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.OutBoundTxFinalizedHeight))
		i--
		dAtA[i] = 0x48
	}
	if len(m.OutBoundTXReceiveIndex) > 0 {
		i -= len(m.OutBoundTXReceiveIndex)
		copy(dAtA[i:], m.OutBoundTXReceiveIndex)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.OutBoundTXReceiveIndex)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.OutBoundTxGasPrice) > 0 {
		i -= len(m.OutBoundTxGasPrice)
		copy(dAtA[i:], m.OutBoundTxGasPrice)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.OutBoundTxGasPrice)))
		i--
		dAtA[i] = 0x3a
	}
	if m.OutBoundTxGasLimit != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.OutBoundTxGasLimit))
		i--
		dAtA[i] = 0x30
	}
	if m.OutBoundTxTSSNonce != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.OutBoundTxTSSNonce))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OutBoundTxHash) > 0 {
		i -= len(m.OutBoundTxHash)
		copy(dAtA[i:], m.OutBoundTxHash)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.OutBoundTxHash)))
		i--
		dAtA[i] = 0x22
	}
	if m.Broadcaster != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.Broadcaster))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ReceiverChain) > 0 {
		i -= len(m.ReceiverChain)
		copy(dAtA[i:], m.ReceiverChain)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.ReceiverChain)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Receiver) > 0 {
		i -= len(m.Receiver)
		copy(dAtA[i:], m.Receiver)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Receiver)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Status) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastUpdateTimestamp != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.LastUpdateTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if len(m.StatusMessage) > 0 {
		i -= len(m.StatusMessage)
		copy(dAtA[i:], m.StatusMessage)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.StatusMessage)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintCrossChainTx(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CrossChainTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CrossChainTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CrossChainTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OutBoundTxParams != nil {
		{
			size, err := m.OutBoundTxParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.InBoundTxParams != nil {
		{
			size, err := m.InBoundTxParams.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x42
	}
	if m.CctxStatus != nil {
		{
			size, err := m.CctxStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.RelayedMessage) > 0 {
		i -= len(m.RelayedMessage)
		copy(dAtA[i:], m.RelayedMessage)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.RelayedMessage)))
		i--
		dAtA[i] = 0x2a
	}
	{
		size := m.ZetaMint.Size()
		i -= size
		if _, err := m.ZetaMint.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.ZetaBurnt.Size()
		i -= size
		if _, err := m.ZetaBurnt.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintCrossChainTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCrossChainTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrossChainTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrossChainTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InBoundTxParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.SenderChain)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.InBoundTxObservedHash)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.InBoundTxObservedHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.InBoundTxObservedHeight))
	}
	if m.InBoundTxFinalizedHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.InBoundTxFinalizedHeight))
	}
	return n
}

func (m *OutBoundTxParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Receiver)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.ReceiverChain)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.Broadcaster != 0 {
		n += 1 + sovCrossChainTx(uint64(m.Broadcaster))
	}
	l = len(m.OutBoundTxHash)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.OutBoundTxTSSNonce != 0 {
		n += 1 + sovCrossChainTx(uint64(m.OutBoundTxTSSNonce))
	}
	if m.OutBoundTxGasLimit != 0 {
		n += 1 + sovCrossChainTx(uint64(m.OutBoundTxGasLimit))
	}
	l = len(m.OutBoundTxGasPrice)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.OutBoundTXReceiveIndex)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.OutBoundTxFinalizedHeight != 0 {
		n += 1 + sovCrossChainTx(uint64(m.OutBoundTxFinalizedHeight))
	}
	return n
}

func (m *Status) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovCrossChainTx(uint64(m.Status))
	}
	l = len(m.StatusMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.LastUpdateTimestamp != 0 {
		n += 1 + sovCrossChainTx(uint64(m.LastUpdateTimestamp))
	}
	return n
}

func (m *CrossChainTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	l = m.ZetaBurnt.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	l = m.ZetaMint.Size()
	n += 1 + l + sovCrossChainTx(uint64(l))
	l = len(m.RelayedMessage)
	if l > 0 {
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovCrossChainTx(uint64(l))
		}
	}
	if m.CctxStatus != nil {
		l = m.CctxStatus.Size()
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.InBoundTxParams != nil {
		l = m.InBoundTxParams.Size()
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	if m.OutBoundTxParams != nil {
		l = m.OutBoundTxParams.Size()
		n += 1 + l + sovCrossChainTx(uint64(l))
	}
	return n
}

func sovCrossChainTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrossChainTx(x uint64) (n int) {
	return sovCrossChainTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InBoundTxParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InBoundTxParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InBoundTxParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SenderChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SenderChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBoundTxObservedHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InBoundTxObservedHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBoundTxObservedHeight", wireType)
			}
			m.InBoundTxObservedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBoundTxObservedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBoundTxFinalizedHeight", wireType)
			}
			m.InBoundTxFinalizedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InBoundTxFinalizedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OutBoundTxParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OutBoundTxParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OutBoundTxParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Receiver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Receiver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReceiverChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReceiverChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Broadcaster", wireType)
			}
			m.Broadcaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Broadcaster |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBoundTxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutBoundTxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBoundTxTSSNonce", wireType)
			}
			m.OutBoundTxTSSNonce = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutBoundTxTSSNonce |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBoundTxGasLimit", wireType)
			}
			m.OutBoundTxGasLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutBoundTxGasLimit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBoundTxGasPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutBoundTxGasPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBoundTXReceiveIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutBoundTXReceiveIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBoundTxFinalizedHeight", wireType)
			}
			m.OutBoundTxFinalizedHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OutBoundTxFinalizedHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CctxStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StatusMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StatusMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdateTimestamp", wireType)
			}
			m.LastUpdateTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastUpdateTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CrossChainTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CrossChainTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CrossChainTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaBurnt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZetaBurnt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZetaMint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ZetaMint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RelayedMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RelayedMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CctxStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CctxStatus == nil {
				m.CctxStatus = &Status{}
			}
			if err := m.CctxStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InBoundTxParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.InBoundTxParams == nil {
				m.InBoundTxParams = &InBoundTxParams{}
			}
			if err := m.InBoundTxParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutBoundTxParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OutBoundTxParams == nil {
				m.OutBoundTxParams = &OutBoundTxParams{}
			}
			if err := m.OutBoundTxParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrossChainTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrossChainTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrossChainTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrossChainTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrossChainTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrossChainTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrossChainTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrossChainTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrossChainTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrossChainTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrossChainTx = fmt.Errorf("proto: unexpected end of group")
)
