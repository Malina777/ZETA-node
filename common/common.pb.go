// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: zetacore/common/common.proto

package common

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ReceiveStatus int32

const (
	ReceiveStatus_Created ReceiveStatus = 0
	ReceiveStatus_Success ReceiveStatus = 1
	ReceiveStatus_Failed  ReceiveStatus = 2
)

var ReceiveStatus_name = map[int32]string{
	0: "Created",
	1: "Success",
	2: "Failed",
}

var ReceiveStatus_value = map[string]int32{
	"Created": 0,
	"Success": 1,
	"Failed":  2,
}

func (x ReceiveStatus) String() string {
	return proto.EnumName(ReceiveStatus_name, int32(x))
}

func (ReceiveStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5a87dc7f6a30b47, []int{0}
}

type CoinType int32

const (
	CoinType_Zeta  CoinType = 0
	CoinType_Gas   CoinType = 1
	CoinType_ERC20 CoinType = 2
)

var CoinType_name = map[int32]string{
	0: "Zeta",
	1: "Gas",
	2: "ERC20",
}

var CoinType_value = map[string]int32{
	"Zeta":  0,
	"Gas":   1,
	"ERC20": 2,
}

func (x CoinType) String() string {
	return proto.EnumName(CoinType_name, int32(x))
}

func (CoinType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5a87dc7f6a30b47, []int{1}
}

type ChainName int32

const (
	ChainName_empty           ChainName = 0
	ChainName_eth_mainnet     ChainName = 1
	ChainName_zeta_mainnet    ChainName = 2
	ChainName_btc_mainnet     ChainName = 3
	ChainName_polygon_mainnet ChainName = 4
	ChainName_bsc_mainnet     ChainName = 5
	//  Testnet
	ChainName_goerli_testnet  ChainName = 6
	ChainName_mumbai_testnet  ChainName = 7
	ChainName_ganache_testnet ChainName = 8
	ChainName_baobab_testnet  ChainName = 9
	ChainName_bsc_testnet     ChainName = 10
	ChainName_zeta_testnet    ChainName = 11
	ChainName_btc_testnet     ChainName = 12
	//  LocalNet
	//  zeta_localnet = 13;
	ChainName_goerli_localnet ChainName = 14
	ChainName_btc_regtest     ChainName = 15
)

var ChainName_name = map[int32]string{
	0:  "empty",
	1:  "eth_mainnet",
	2:  "zeta_mainnet",
	3:  "btc_mainnet",
	4:  "polygon_mainnet",
	5:  "bsc_mainnet",
	6:  "goerli_testnet",
	7:  "mumbai_testnet",
	8:  "ganache_testnet",
	9:  "baobab_testnet",
	10: "bsc_testnet",
	11: "zeta_testnet",
	12: "btc_testnet",
	14: "goerli_localnet",
	15: "btc_regtest",
}

var ChainName_value = map[string]int32{
	"empty":           0,
	"eth_mainnet":     1,
	"zeta_mainnet":    2,
	"btc_mainnet":     3,
	"polygon_mainnet": 4,
	"bsc_mainnet":     5,
	"goerli_testnet":  6,
	"mumbai_testnet":  7,
	"ganache_testnet": 8,
	"baobab_testnet":  9,
	"bsc_testnet":     10,
	"zeta_testnet":    11,
	"btc_testnet":     12,
	"goerli_localnet": 14,
	"btc_regtest":     15,
}

func (x ChainName) String() string {
	return proto.EnumName(ChainName_name, int32(x))
}

func (ChainName) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b5a87dc7f6a30b47, []int{2}
}

// PubKeySet contains two pub keys , secp256k1 and ed25519
type PubKeySet struct {
	Secp256k1 PubKey `protobuf:"bytes,1,opt,name=secp256k1,proto3,casttype=PubKey" json:"secp256k1,omitempty"`
	Ed25519   PubKey `protobuf:"bytes,2,opt,name=ed25519,proto3,casttype=PubKey" json:"ed25519,omitempty"`
}

func (m *PubKeySet) Reset()         { *m = PubKeySet{} }
func (m *PubKeySet) String() string { return proto.CompactTextString(m) }
func (*PubKeySet) ProtoMessage()    {}
func (*PubKeySet) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5a87dc7f6a30b47, []int{0}
}
func (m *PubKeySet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeySet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeySet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeySet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeySet.Merge(m, src)
}
func (m *PubKeySet) XXX_Size() int {
	return m.Size()
}
func (m *PubKeySet) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeySet.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeySet proto.InternalMessageInfo

func (m *PubKeySet) GetSecp256k1() PubKey {
	if m != nil {
		return m.Secp256k1
	}
	return ""
}

func (m *PubKeySet) GetEd25519() PubKey {
	if m != nil {
		return m.Ed25519
	}
	return ""
}

type Chain struct {
	ChainName ChainName `protobuf:"varint,1,opt,name=chain_name,json=chainName,proto3,enum=zetacore.common.ChainName" json:"chain_name,omitempty"`
	ChainId   int64     `protobuf:"varint,2,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *Chain) Reset()         { *m = Chain{} }
func (m *Chain) String() string { return proto.CompactTextString(m) }
func (*Chain) ProtoMessage()    {}
func (*Chain) Descriptor() ([]byte, []int) {
	return fileDescriptor_b5a87dc7f6a30b47, []int{1}
}
func (m *Chain) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Chain) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Chain.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Chain) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chain.Merge(m, src)
}
func (m *Chain) XXX_Size() int {
	return m.Size()
}
func (m *Chain) XXX_DiscardUnknown() {
	xxx_messageInfo_Chain.DiscardUnknown(m)
}

var xxx_messageInfo_Chain proto.InternalMessageInfo

func (m *Chain) GetChainName() ChainName {
	if m != nil {
		return m.ChainName
	}
	return ChainName_empty
}

func (m *Chain) GetChainId() int64 {
	if m != nil {
		return m.ChainId
	}
	return 0
}

func init() {
	proto.RegisterEnum("zetacore.common.ReceiveStatus", ReceiveStatus_name, ReceiveStatus_value)
	proto.RegisterEnum("zetacore.common.CoinType", CoinType_name, CoinType_value)
	proto.RegisterEnum("zetacore.common.ChainName", ChainName_name, ChainName_value)
	proto.RegisterType((*PubKeySet)(nil), "zetacore.common.PubKeySet")
	proto.RegisterType((*Chain)(nil), "zetacore.common.Chain")
}

func init() { proto.RegisterFile("zetacore/common/common.proto", fileDescriptor_b5a87dc7f6a30b47) }

var fileDescriptor_b5a87dc7f6a30b47 = []byte{
	// 475 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x92, 0x4f, 0x8b, 0xd3, 0x40,
	0x14, 0xc0, 0x93, 0xfe, 0x4b, 0xf3, 0xba, 0xb6, 0x61, 0x14, 0x5c, 0x8b, 0x64, 0x65, 0x51, 0x90,
	0x05, 0x53, 0xb7, 0x52, 0x61, 0xf1, 0x20, 0x6c, 0x51, 0x11, 0x41, 0x24, 0xf5, 0xb4, 0x20, 0x65,
	0x32, 0x79, 0x24, 0xc1, 0x24, 0x13, 0x92, 0x89, 0x50, 0x3f, 0x85, 0x5f, 0x41, 0xf0, 0xe0, 0x47,
	0xf1, 0xb8, 0x47, 0x4f, 0x8b, 0xb4, 0xdf, 0xc2, 0x93, 0xcc, 0xc4, 0x49, 0x97, 0x3d, 0xe5, 0xcd,
	0xef, 0xfd, 0xde, 0xbc, 0x97, 0x99, 0x81, 0xfb, 0x5f, 0x51, 0x50, 0xc6, 0x4b, 0x9c, 0x31, 0x9e,
	0x65, 0x3c, 0xff, 0xff, 0xf1, 0x8a, 0x92, 0x0b, 0x4e, 0x26, 0x3a, 0xeb, 0x35, 0x78, 0x7a, 0x27,
	0xe2, 0x11, 0x57, 0xb9, 0x99, 0x8c, 0x1a, 0xed, 0x38, 0x06, 0xfb, 0x43, 0x1d, 0xbc, 0xc3, 0xcd,
	0x0a, 0x05, 0x59, 0x80, 0x5d, 0x21, 0x2b, 0xe6, 0x8b, 0xe7, 0x9f, 0x4f, 0x0f, 0xcd, 0x07, 0xe6,
	0x63, 0xfb, 0xfc, 0xee, 0xf6, 0xea, 0xc8, 0x5e, 0x69, 0xf8, 0xf7, 0xea, 0x68, 0xd0, 0xe8, 0xfe,
	0xde, 0x24, 0x0f, 0xc1, 0xc2, 0x70, 0xbe, 0x58, 0x9c, 0x9e, 0x1d, 0x76, 0x54, 0x11, 0x5c, 0xf3,
	0x74, 0xea, 0xf8, 0x13, 0xf4, 0x97, 0x31, 0x4d, 0x72, 0x72, 0x06, 0xc0, 0x64, 0xb0, 0xce, 0x69,
	0x86, 0xaa, 0xcd, 0x78, 0x3e, 0xf5, 0x6e, 0x8c, 0xeb, 0x29, 0xf7, 0x3d, 0xcd, 0xd0, 0xb7, 0x99,
	0x0e, 0xc9, 0x3d, 0x18, 0x36, 0xa5, 0x49, 0xa8, 0x5a, 0x75, 0x7d, 0x4b, 0xad, 0xdf, 0x86, 0x27,
	0x2f, 0xe0, 0x96, 0x8f, 0x0c, 0x93, 0x2f, 0xb8, 0x12, 0x54, 0xd4, 0x15, 0x19, 0x81, 0xb5, 0x2c,
	0x91, 0x0a, 0x0c, 0x1d, 0x43, 0x2e, 0x56, 0x35, 0x63, 0x58, 0x55, 0x8e, 0x49, 0x00, 0x06, 0xaf,
	0x69, 0x92, 0x62, 0xe8, 0x74, 0xa6, 0xbd, 0x9f, 0x3f, 0x5c, 0xf3, 0xc4, 0x83, 0xe1, 0x92, 0x27,
	0xf9, 0xc7, 0x4d, 0x81, 0x64, 0x08, 0xbd, 0x0b, 0x14, 0xd4, 0x31, 0x88, 0x05, 0xdd, 0x37, 0x54,
	0x16, 0xd8, 0xd0, 0x7f, 0xe5, 0x2f, 0xe7, 0x4f, 0x5b, 0xff, 0x7b, 0x07, 0xec, 0x76, 0x40, 0x99,
	0xc6, 0xac, 0x10, 0x1b, 0xc7, 0x20, 0x13, 0x18, 0xa1, 0x88, 0xd7, 0x19, 0x4d, 0xf2, 0x1c, 0x85,
	0x63, 0x12, 0x07, 0x0e, 0xe4, 0x9f, 0xb5, 0xa4, 0x23, 0x95, 0x40, 0xb0, 0x16, 0x74, 0xc9, 0x6d,
	0x98, 0x14, 0x3c, 0xdd, 0x44, 0x3c, 0x6f, 0x61, 0x4f, 0x59, 0xd5, 0xde, 0xea, 0x13, 0x02, 0xe3,
	0x88, 0x63, 0x99, 0x26, 0x6b, 0x81, 0x95, 0x90, 0x6c, 0x20, 0x59, 0x56, 0x67, 0x01, 0xdd, 0x33,
	0x4b, 0xee, 0x16, 0xd1, 0x9c, 0xb2, 0x18, 0x5b, 0x38, 0x94, 0x62, 0x40, 0x79, 0x40, 0x83, 0x96,
	0xd9, 0xba, 0x83, 0x06, 0xd0, 0x8e, 0xaa, 0xc9, 0x48, 0x8f, 0xaa, 0xc1, 0x81, 0xda, 0xbc, 0x19,
	0x22, 0xe5, 0x8c, 0xa6, 0x12, 0x8e, 0xb5, 0x55, 0x62, 0x24, 0x45, 0x67, 0xd2, 0x9c, 0xd1, 0xf9,
	0xcb, 0x5f, 0x5b, 0xd7, 0xbc, 0xdc, 0xba, 0xe6, 0x9f, 0xad, 0x6b, 0x7e, 0xdb, 0xb9, 0xc6, 0xe5,
	0xce, 0x35, 0x7e, 0xef, 0x5c, 0xe3, 0xe2, 0x51, 0x94, 0x88, 0xb8, 0x0e, 0xe4, 0x4d, 0xcf, 0x64,
	0xc7, 0x27, 0xea, 0x0e, 0x67, 0x37, 0x9e, 0x73, 0x30, 0x50, 0x2f, 0xf4, 0xd9, 0xbf, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x1e, 0xbf, 0xd8, 0x2b, 0xe8, 0x02, 0x00, 0x00,
}

func (m *PubKeySet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeySet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PubKeySet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ed25519) > 0 {
		i -= len(m.Ed25519)
		copy(dAtA[i:], m.Ed25519)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Ed25519)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Secp256k1) > 0 {
		i -= len(m.Secp256k1)
		copy(dAtA[i:], m.Secp256k1)
		i = encodeVarintCommon(dAtA, i, uint64(len(m.Secp256k1)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Chain) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Chain) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Chain) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChainId != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ChainId))
		i--
		dAtA[i] = 0x10
	}
	if m.ChainName != 0 {
		i = encodeVarintCommon(dAtA, i, uint64(m.ChainName))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCommon(dAtA []byte, offset int, v uint64) int {
	offset -= sovCommon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PubKeySet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Secp256k1)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	l = len(m.Ed25519)
	if l > 0 {
		n += 1 + l + sovCommon(uint64(l))
	}
	return n
}

func (m *Chain) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ChainName != 0 {
		n += 1 + sovCommon(uint64(m.ChainName))
	}
	if m.ChainId != 0 {
		n += 1 + sovCommon(uint64(m.ChainId))
	}
	return n
}

func sovCommon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCommon(x uint64) (n int) {
	return sovCommon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PubKeySet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeySet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeySet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Secp256k1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Secp256k1 = PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ed25519", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCommon
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCommon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ed25519 = PubKey(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Chain) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Chain: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Chain: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainName", wireType)
			}
			m.ChainName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainName |= ChainName(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			m.ChainId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChainId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCommon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCommon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCommon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCommon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCommon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCommon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCommon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCommon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCommon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCommon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCommon = fmt.Errorf("proto: unexpected end of group")
)
