syntax = "proto3";
package zetachain.zetacore.crosschain;
import "gogoproto/gogo.proto";
option go_package = "github.com/zeta-chain/zetacore/x/crosschain/types";

enum CctxStatus {
  option (gogoproto.goproto_enum_stringer) = true;
  PendingInbound = 0; // some observer sees inbound tx
  PendingOutbound = 1; // super majority observer see inbound tx
  OutboundMined = 3;  // the corresponding outbound tx is mined
  PendingRevert = 4; // outbound cannot succeed; should revert inbound
  Reverted =5; // inbound reverted.
  Aborted = 6; // inbound tx error or invalid paramters and cannot revert; just abort
}

message InBoundTxParams{
  string sender = 1;
  string senderChain = 2;
  string inBoundTxObservedHash = 3;
  uint64 inBoundTxObservedExternalHeight = 4;
  uint64 inBoundTxFinalizedZetaHeight = 5;
  string inBoundTXBallotIndex=6;
}

message OutBoundTxParams {
  string receiver = 1;
  string receiverChain = 2;
  uint64 broadcaster = 3; // Can be removed
  string outBoundTxHash = 4;
  uint64 outBoundTxTSSNonce = 5;
  uint64 outBoundTxGasLimit = 6;
  string outBoundTxGasPrice = 7;
  string outBoundTXBallotIndex = 8;
  uint64 outBoundTxFinalizedZetaHeight = 9;
  uint64 outBoundTxObservedExternalHeight = 10;
}

message Status {
  CctxStatus status = 1;
  string statusMessage = 2;
  int64  lastUpdateTimestamp = 3;
}

message CrossChainTx {
  string creator = 1;
  string index = 2;
  string zetaBurnt = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"zetaBurnt\""
  ];
  string zetaMint = 4 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"zetaMint\""
  ];
  string zetaFees = 5 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Uint",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"zetaFees\""
  ];
  string relayedMessage = 6; // Not used by protocol , just relayed across
  Status cctx_status = 8;
  InBoundTxParams  InBoundTxParams = 9;
  OutBoundTxParams OutBoundTxParams = 10;
}

message CctxPendingQueue {
  string index = 1;
  string chain = 2;
  uint64 nonce = 3;
  string cctxIndex = 4;
}