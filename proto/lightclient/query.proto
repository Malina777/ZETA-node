syntax = "proto3";
package zetachain.zetacore.lightclient;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "lightclient/chain_state.proto";
import "pkg/proofs/proofs.proto";

option go_package = "github.com/zeta-chain/zetacore/x/lightclient/types";

// Query defines the gRPC querier service.
service Query {
  rpc GetAllBlockHeaders(QueryAllBlockHeaderRequest) returns (QueryAllBlockHeaderResponse) {
    option (google.api.http).get = "/zeta-chain/lightclient/get_all_block_headers";
  }

  rpc GetBlockHeaderByHash(QueryGetBlockHeaderByHashRequest) returns (QueryGetBlockHeaderByHashResponse) {
    option (google.api.http).get = "/zeta-chain/lightclient/get_block_header_by_hash/{block_hash}";
  }

  rpc GetChainStateByChain(QueryGetChainStateRequest) returns (QueryGetChainStateResponse) {
    option (google.api.http).get = "/zeta-chain/lightclient/get_chain_state_by_chain_id/{chain_id}";
  }

  // Prove performs merkle proof verification
  rpc Prove(QueryProveRequest) returns (QueryProveResponse) {
    option (google.api.http).get = "/zeta-chain/lightclient/prove";
  }
}

message QueryAllBlockHeaderRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllBlockHeaderResponse {
  repeated proofs.BlockHeader block_headers = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetBlockHeaderByHashRequest {
  bytes block_hash = 1;
}

message QueryGetBlockHeaderByHashResponse {
  proofs.BlockHeader block_header = 1;
}

message QueryGetChainStateRequest {
  int64 chain_id = 1;
}

message QueryGetChainStateResponse {
  ChainState chain_state = 1;
}

message QueryProveRequest {
  int64 chain_id = 1;
  string tx_hash = 2;
  proofs.Proof proof = 3;
  string block_hash = 4;
  int64 tx_index = 5;
}

message QueryProveResponse {
  bool valid = 1;
}
