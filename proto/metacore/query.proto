syntax = "proto3";
package MetaProtocol.metacore.metacore;

import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
// this line is used by starport scaffolding # 1
import "metacore/receive.proto";
import "metacore/send.proto";
import "metacore/node_account.proto";

option go_package = "github.com/Meta-Protocol/metacore/x/metacore/types";

// Query defines the gRPC querier service.
service Query {
    // this line is used by starport scaffolding # 2

	// Queries a receive by index.
	rpc Receive(QueryGetReceiveRequest) returns (QueryGetReceiveResponse) {
		option (google.api.http).get = "/Meta-Protocol/metacore/metacore/receive/{index}";
	}

	// Queries a list of receive items.
	rpc ReceiveAll(QueryAllReceiveRequest) returns (QueryAllReceiveResponse) {
		option (google.api.http).get = "/Meta-Protocol/metacore/metacore/receive";
	}


	// Queries a send by index.
	rpc Send(QueryGetSendRequest) returns (QueryGetSendResponse) {
		option (google.api.http).get = "/Meta-Protocol/metacore/metacore/send/{index}";
	}

	// Queries a list of send items.
	rpc SendAll(QueryAllSendRequest) returns (QueryAllSendResponse) {
		option (google.api.http).get = "/Meta-Protocol/metacore/metacore/send";
	}


	// Queries a nodeAccount by index.
	rpc NodeAccount(QueryGetNodeAccountRequest) returns (QueryGetNodeAccountResponse) {
		option (google.api.http).get = "/Meta-Protocol/metacore/metacore/nodeAccount/{index}";
	}

	// Queries a list of nodeAccount items.
	rpc NodeAccountAll(QueryAllNodeAccountRequest) returns (QueryAllNodeAccountResponse) {
		option (google.api.http).get = "/Meta-Protocol/metacore/metacore/nodeAccount";
	}


	// Queries a list of lastMetaHeight items.
	rpc LastMetaHeight(QueryLastMetaHeightRequest) returns (QueryLastMetaHeightResponse) {
		option (google.api.http).get = "/Meta-Protocol/metacore/metacore/lastMetaHeight";
	}



}

// this line is used by starport scaffolding # 3
message QueryGetReceiveRequest {
	string index = 1;
}

message QueryGetReceiveResponse {
	Receive Receive = 1;
}

message QueryAllReceiveRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllReceiveResponse {
	repeated Receive Receive = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryGetSendRequest {
	string index = 1;
}

message QueryGetSendResponse {
	Send Send = 1;
}

message QueryAllSendRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllSendResponse {
	repeated Send Send = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryGetNodeAccountRequest {
	string index = 1;
}

message QueryGetNodeAccountResponse {
	NodeAccount NodeAccount = 1;
}

message QueryAllNodeAccountRequest {
	cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryAllNodeAccountResponse {
	repeated NodeAccount NodeAccount = 1;
	cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
message QueryLastMetaHeightRequest {
}

message QueryLastMetaHeightResponse {
	uint64 Height = 1;
}
