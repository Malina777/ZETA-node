syntax = "proto3";
package zetachain.zetacore.observer;

// this line is used by starport scaffolding # proto/tx/import

import "common/common.proto";
import "gogoproto/gogo.proto";
import "observer/observer.proto";
import "observer/params.proto";
import "observer/permission_flags.proto";
import "observer/keygen.proto";



option go_package = "github.com/zeta-chain/zetacore/x/observer/types";

// Msg defines the Msg service.
service Msg {
//  rpc SetSupportedChains(MsgSetSupportedChains) returns (MsgSetSupportedChainsResponse);
   rpc AddObserver(MsgAddObserver) returns (MsgAddObserverResponse);
   rpc UpdateCoreParams(MsgUpdateCoreParams) returns (MsgUpdateCoreParamsResponse);
   rpc UpdatePermissionFlags(MsgUpdatePermissionFlags) returns (MsgUpdatePermissionFlagsResponse);
  rpc UpdateKeygen(MsgUpdateKeygen) returns (MsgUpdateKeygenResponse);
// this line is used by starport scaffolding # proto/tx/rpc

}

//message MsgSetSupportedChains {
//  string creator = 1;
//  int64 chain_id=2;
//  common.ChainName ChainName=3;
//}
message MsgUpdateCoreParams {
  string creator = 1;
  CoreParams coreParams = 2;
}

message MsgUpdateCoreParamsResponse {
}

message MsgAddObserver {
  string creator = 1;
  int64 chain_id = 2;
  ObservationType observationType = 3;
}

message MsgAddObserverResponse {
}

message MsgUpdatePermissionFlags {
  string creator = 1;
  bool isInboundEnabled = 3;
}
message MsgUpdatePermissionFlagsResponse {}

message MsgUpdateKeygen {
  string creator = 1;
  int64 block = 2;
}

message MsgUpdateKeygenResponse {
}

// this line is used by starport scaffolding # proto/tx/message