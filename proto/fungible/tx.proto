syntax = "proto3";
package zetachain.zetacore.fungible;

import "common/common.proto";


// this line is used by starport scaffolding # proto/tx/import

option go_package = "github.com/zeta-chain/zetacore/x/fungible/types";

// Msg defines the Msg service.
service Msg {
      rpc FungibleTestMsg(MsgFungibleTestMsg) returns (MsgFungibleTestMsgResponse);
  rpc DeployFungibleCoinZRC4(MsgDeployFungibleCoinZRC4) returns (MsgDeployFungibleCoinZRC4Response);
  rpc DeployGasPriceOracle(MsgDeployGasPriceOracle) returns (MsgDeployGasPriceOracleResponse);
  rpc SetZetaGasPool(MsgSetZetaGasPool) returns (MsgSetZetaGasPoolResponse);
// this line is used by starport scaffolding # proto/tx/rpc
}

message MsgFungibleTestMsg {
  string creator = 1;
}

message MsgFungibleTestMsgResponse {
}

message MsgDeployFungibleCoinZRC4 {
  string creator = 1;
  string ERC20 = 2;
  string foreignChain = 3;
  uint32 decimals = 4;
  string name = 5;
  string symbol = 6;
  common.CoinType coinType = 7;
  uint64 gasLimit = 8;
}

message MsgDeployFungibleCoinZRC4Response {
}

message MsgDeployGasPriceOracle {
  string creator = 1;
}

message MsgDeployGasPriceOracleResponse {
}

message MsgSetZetaGasPool {
  string creator = 1;
  string address = 2;
  string poolType = 3;
  string chain = 4;
}

message MsgSetZetaGasPoolResponse {
}

// this line is used by starport scaffolding # proto/tx/message
