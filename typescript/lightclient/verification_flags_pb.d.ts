// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file lightclient/verification_flags.proto (package zetachain.zetacore.lightclient, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * VerificationFlags is a structure containing information of weather a chain is enabled or not for block header verification
 *
 * @generated from message zetachain.zetacore.lightclient.EnabledChain
 */
export declare class EnabledChain extends Message<EnabledChain> {
  /**
   * @generated from field: int64 chain_id = 1;
   */
  chainId: bigint;

  /**
   * @generated from field: bool enabled = 2;
   */
  enabled: boolean;

  constructor(data?: PartialMessage<EnabledChain>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.lightclient.EnabledChain";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EnabledChain;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EnabledChain;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EnabledChain;

  static equals(a: EnabledChain | PlainMessage<EnabledChain> | undefined, b: EnabledChain | PlainMessage<EnabledChain> | undefined): boolean;
}

/**
 * @generated from message zetachain.zetacore.lightclient.BlockHeaderVerification
 */
export declare class BlockHeaderVerification extends Message<BlockHeaderVerification> {
  /**
   * @generated from field: repeated zetachain.zetacore.lightclient.EnabledChain enabled_chains = 1;
   */
  enabledChains: EnabledChain[];

  constructor(data?: PartialMessage<BlockHeaderVerification>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.lightclient.BlockHeaderVerification";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BlockHeaderVerification;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BlockHeaderVerification;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BlockHeaderVerification;

  static equals(a: BlockHeaderVerification | PlainMessage<BlockHeaderVerification> | undefined, b: BlockHeaderVerification | PlainMessage<BlockHeaderVerification> | undefined): boolean;
}

