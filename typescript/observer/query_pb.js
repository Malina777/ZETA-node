// @generated by protoc-gen-es v1.3.0
// @generated from file observer/query.proto (package zetachain.zetacore.observer, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import { proto3 } from "@bufbuild/protobuf";
import { CoreParams, CoreParamsList, Params } from "./params_pb.js";
import { BallotStatus, VoteType } from "./ballot_pb.js";
import { ObservationType, ObserverMapper } from "./observer_pb.js";
import { Chain } from "../common/common_pb.js";

/**
 * @generated from message zetachain.zetacore.observer.QueryParamsRequest
 */
export const QueryParamsRequest = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryParamsRequest",
  [],
);

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message zetachain.zetacore.observer.QueryParamsResponse
 */
export const QueryParamsResponse = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryParamsResponse",
  () => [
    { no: 1, name: "params", kind: "message", T: Params },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryBallotByIdentifierRequest
 */
export const QueryBallotByIdentifierRequest = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryBallotByIdentifierRequest",
  () => [
    { no: 1, name: "ballot_identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.VoterList
 */
export const VoterList = proto3.makeMessageType(
  "zetachain.zetacore.observer.VoterList",
  () => [
    { no: 1, name: "voter_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "vote_type", kind: "enum", T: proto3.getEnumType(VoteType) },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryBallotByIdentifierResponse
 */
export const QueryBallotByIdentifierResponse = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryBallotByIdentifierResponse",
  () => [
    { no: 1, name: "BallotIdentifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "voters", kind: "message", T: VoterList, repeated: true },
    { no: 3, name: "observation_type", kind: "enum", T: proto3.getEnumType(ObservationType) },
    { no: 4, name: "ballot_status", kind: "enum", T: proto3.getEnumType(BallotStatus) },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryObserversByChainRequest
 */
export const QueryObserversByChainRequest = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryObserversByChainRequest",
  () => [
    { no: 1, name: "observation_chain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryObserversByChainResponse
 */
export const QueryObserversByChainResponse = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryObserversByChainResponse",
  () => [
    { no: 1, name: "observers", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryAllObserverMappersRequest
 */
export const QueryAllObserverMappersRequest = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryAllObserverMappersRequest",
  [],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryAllObserverMappersResponse
 */
export const QueryAllObserverMappersResponse = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryAllObserverMappersResponse",
  () => [
    { no: 1, name: "observer_mappers", kind: "message", T: ObserverMapper, repeated: true },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QuerySupportedChains
 */
export const QuerySupportedChains = proto3.makeMessageType(
  "zetachain.zetacore.observer.QuerySupportedChains",
  [],
);

/**
 * @generated from message zetachain.zetacore.observer.QuerySupportedChainsResponse
 */
export const QuerySupportedChainsResponse = proto3.makeMessageType(
  "zetachain.zetacore.observer.QuerySupportedChainsResponse",
  () => [
    { no: 1, name: "chains", kind: "message", T: Chain, repeated: true },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryGetCoreParamsForChainRequest
 */
export const QueryGetCoreParamsForChainRequest = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryGetCoreParamsForChainRequest",
  () => [
    { no: 1, name: "chainID", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryGetCoreParamsForChainResponse
 */
export const QueryGetCoreParamsForChainResponse = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryGetCoreParamsForChainResponse",
  () => [
    { no: 1, name: "core_params", kind: "message", T: CoreParams },
  ],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryGetCoreParamsRequest
 */
export const QueryGetCoreParamsRequest = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryGetCoreParamsRequest",
  [],
);

/**
 * @generated from message zetachain.zetacore.observer.QueryGetCoreParamsResponse
 */
export const QueryGetCoreParamsResponse = proto3.makeMessageType(
  "zetachain.zetacore.observer.QueryGetCoreParamsResponse",
  () => [
    { no: 1, name: "core_params", kind: "message", T: CoreParamsList },
  ],
);

