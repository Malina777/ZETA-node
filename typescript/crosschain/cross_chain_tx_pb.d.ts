// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file crosschain/cross_chain_tx.proto (package zetachain.zetacore.crosschain, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import type { CoinType } from "../common/common_pb.js";

/**
 * @generated from enum zetachain.zetacore.crosschain.CctxStatus
 */
export declare enum CctxStatus {
  /**
   * some observer sees inbound tx
   *
   * @generated from enum value: PendingInbound = 0;
   */
  PendingInbound = 0,

  /**
   * super majority observer see inbound tx
   *
   * @generated from enum value: PendingOutbound = 1;
   */
  PendingOutbound = 1,

  /**
   * the corresponding outbound tx is mined
   *
   * @generated from enum value: OutboundMined = 3;
   */
  OutboundMined = 3,

  /**
   * outbound cannot succeed; should revert inbound
   *
   * @generated from enum value: PendingRevert = 4;
   */
  PendingRevert = 4,

  /**
   * inbound reverted.
   *
   * @generated from enum value: Reverted = 5;
   */
  Reverted = 5,

  /**
   * inbound tx error or invalid paramters and cannot revert; just abort
   *
   * @generated from enum value: Aborted = 6;
   */
  Aborted = 6,
}

/**
 * @generated from message zetachain.zetacore.crosschain.InboundTxParams
 */
export declare class InboundTxParams extends Message<InboundTxParams> {
  /**
   * this address is the immediate contract/EOA that calls the Connector.send()
   *
   * @generated from field: string sender = 1;
   */
  sender: string;

  /**
   * @generated from field: int64 sender_chain_id = 2;
   */
  senderChainId: bigint;

  /**
   * this address is the EOA that signs the inbound tx
   *
   * @generated from field: string tx_origin = 3;
   */
  txOrigin: string;

  /**
   * @generated from field: common.CoinType coin_type = 4;
   */
  coinType: CoinType;

  /**
   * for ERC20 coin type, the asset is an address of the ERC20 contract
   *
   * @generated from field: string asset = 5;
   */
  asset: string;

  /**
   * @generated from field: string amount = 6;
   */
  amount: string;

  /**
   * @generated from field: string inbound_tx_observed_hash = 7;
   */
  inboundTxObservedHash: string;

  /**
   * @generated from field: uint64 inbound_tx_observed_external_height = 8;
   */
  inboundTxObservedExternalHeight: bigint;

  /**
   * @generated from field: string inbound_tx_ballot_index = 9;
   */
  inboundTxBallotIndex: string;

  /**
   * @generated from field: uint64 inbound_tx_finalized_zeta_height = 10;
   */
  inboundTxFinalizedZetaHeight: bigint;

  constructor(data?: PartialMessage<InboundTxParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.InboundTxParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InboundTxParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InboundTxParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InboundTxParams;

  static equals(a: InboundTxParams | PlainMessage<InboundTxParams> | undefined, b: InboundTxParams | PlainMessage<InboundTxParams> | undefined): boolean;
}

/**
 * @generated from message zetachain.zetacore.crosschain.ZetaAccounting
 */
export declare class ZetaAccounting extends Message<ZetaAccounting> {
  /**
   * This stores the total aborted amount for cctx of coin-type ZETA
   *
   * @generated from field: string aborted_zeta_amount = 1;
   */
  abortedZetaAmount: string;

  /**
   * This stores the total aborted amount for cctx of coin-type GAS
   *
   * @generated from field: string aborted_gas_amount = 2;
   */
  abortedGasAmount: string;

  /**
   * This stores the total aborted amount for cctx of coin-type ERC20
   *
   * @generated from field: string aborted_erc20_amount = 3;
   */
  abortedErc20Amount: string;

  constructor(data?: PartialMessage<ZetaAccounting>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.ZetaAccounting";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ZetaAccounting;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ZetaAccounting;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ZetaAccounting;

  static equals(a: ZetaAccounting | PlainMessage<ZetaAccounting> | undefined, b: ZetaAccounting | PlainMessage<ZetaAccounting> | undefined): boolean;
}

/**
 * @generated from message zetachain.zetacore.crosschain.OutboundTxParams
 */
export declare class OutboundTxParams extends Message<OutboundTxParams> {
  /**
   * @generated from field: string receiver = 1;
   */
  receiver: string;

  /**
   * @generated from field: int64 receiver_chainId = 2;
   */
  receiverChainId: bigint;

  /**
   * @generated from field: common.CoinType coin_type = 3;
   */
  coinType: CoinType;

  /**
   * @generated from field: string amount = 4;
   */
  amount: string;

  /**
   * @generated from field: uint64 outbound_tx_tss_nonce = 5;
   */
  outboundTxTssNonce: bigint;

  /**
   * @generated from field: uint64 outbound_tx_gas_limit = 6;
   */
  outboundTxGasLimit: bigint;

  /**
   * @generated from field: string outbound_tx_gas_price = 7;
   */
  outboundTxGasPrice: string;

  /**
   * the above are commands for zetaclients
   * the following fields are used when the outbound tx is mined
   *
   * @generated from field: string outbound_tx_hash = 8;
   */
  outboundTxHash: string;

  /**
   * @generated from field: string outbound_tx_ballot_index = 9;
   */
  outboundTxBallotIndex: string;

  /**
   * @generated from field: uint64 outbound_tx_observed_external_height = 10;
   */
  outboundTxObservedExternalHeight: bigint;

  /**
   * @generated from field: uint64 outbound_tx_gas_used = 20;
   */
  outboundTxGasUsed: bigint;

  /**
   * @generated from field: string outbound_tx_effective_gas_price = 21;
   */
  outboundTxEffectiveGasPrice: string;

  /**
   * @generated from field: uint64 outbound_tx_effective_gas_limit = 22;
   */
  outboundTxEffectiveGasLimit: bigint;

  /**
   * @generated from field: string tss_pubkey = 11;
   */
  tssPubkey: string;

  constructor(data?: PartialMessage<OutboundTxParams>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.OutboundTxParams";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OutboundTxParams;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OutboundTxParams;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OutboundTxParams;

  static equals(a: OutboundTxParams | PlainMessage<OutboundTxParams> | undefined, b: OutboundTxParams | PlainMessage<OutboundTxParams> | undefined): boolean;
}

/**
 * @generated from message zetachain.zetacore.crosschain.Status
 */
export declare class Status extends Message<Status> {
  /**
   * @generated from field: zetachain.zetacore.crosschain.CctxStatus status = 1;
   */
  status: CctxStatus;

  /**
   * @generated from field: string status_message = 2;
   */
  statusMessage: string;

  /**
   * @generated from field: int64 lastUpdate_timestamp = 3;
   */
  lastUpdateTimestamp: bigint;

  constructor(data?: PartialMessage<Status>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.Status";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Status;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Status;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Status;

  static equals(a: Status | PlainMessage<Status> | undefined, b: Status | PlainMessage<Status> | undefined): boolean;
}

/**
 * @generated from message zetachain.zetacore.crosschain.CrossChainTx
 */
export declare class CrossChainTx extends Message<CrossChainTx> {
  /**
   * @generated from field: string creator = 1;
   */
  creator: string;

  /**
   * @generated from field: string index = 2;
   */
  index: string;

  /**
   * @generated from field: string zeta_fees = 5;
   */
  zetaFees: string;

  /**
   * Not used by protocol , just relayed across
   *
   * @generated from field: string relayed_message = 6;
   */
  relayedMessage: string;

  /**
   * @generated from field: zetachain.zetacore.crosschain.Status cctx_status = 8;
   */
  cctxStatus?: Status;

  /**
   * @generated from field: zetachain.zetacore.crosschain.InboundTxParams inbound_tx_params = 9;
   */
  inboundTxParams?: InboundTxParams;

  /**
   * @generated from field: repeated zetachain.zetacore.crosschain.OutboundTxParams outbound_tx_params = 10;
   */
  outboundTxParams: OutboundTxParams[];

  constructor(data?: PartialMessage<CrossChainTx>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "zetachain.zetacore.crosschain.CrossChainTx";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CrossChainTx;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CrossChainTx;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CrossChainTx;

  static equals(a: CrossChainTx | PlainMessage<CrossChainTx> | undefined, b: CrossChainTx | PlainMessage<CrossChainTx> | undefined): boolean;
}

