// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file common/common.proto (package common, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum common.ReceiveStatus
 */
export declare enum ReceiveStatus {
  /**
   * some observer sees inbound tx
   *
   * @generated from enum value: Created = 0;
   */
  Created = 0,

  /**
   * @generated from enum value: Success = 1;
   */
  Success = 1,

  /**
   * @generated from enum value: Failed = 2;
   */
  Failed = 2,
}

/**
 * @generated from enum common.CoinType
 */
export declare enum CoinType {
  /**
   * @generated from enum value: Zeta = 0;
   */
  Zeta = 0,

  /**
   * Ether, BNB, Matic, Klay, BTC, etc
   *
   * @generated from enum value: Gas = 1;
   */
  Gas = 1,

  /**
   * ERC20 token
   *
   * @generated from enum value: ERC20 = 2;
   */
  ERC20 = 2,
}

/**
 * @generated from enum common.ChainName
 */
export declare enum ChainName {
  /**
   * @generated from enum value: empty = 0;
   */
  empty = 0,

  /**
   * @generated from enum value: eth_mainnet = 1;
   */
  eth_mainnet = 1,

  /**
   * @generated from enum value: zeta_mainnet = 2;
   */
  zeta_mainnet = 2,

  /**
   * @generated from enum value: btc_mainnet = 3;
   */
  btc_mainnet = 3,

  /**
   * @generated from enum value: polygon_mainnet = 4;
   */
  polygon_mainnet = 4,

  /**
   * @generated from enum value: bsc_mainnet = 5;
   */
  bsc_mainnet = 5,

  /**
   *  Testnet
   *
   * @generated from enum value: goerli_testnet = 6;
   */
  goerli_testnet = 6,

  /**
   * @generated from enum value: mumbai_testnet = 7;
   */
  mumbai_testnet = 7,

  /**
   * @generated from enum value: ganache_testnet = 8;
   */
  ganache_testnet = 8,

  /**
   * @generated from enum value: baobab_testnet = 9;
   */
  baobab_testnet = 9,

  /**
   * @generated from enum value: bsc_testnet = 10;
   */
  bsc_testnet = 10,

  /**
   * @generated from enum value: zeta_testnet = 11;
   */
  zeta_testnet = 11,

  /**
   * @generated from enum value: btc_testnet = 12;
   */
  btc_testnet = 12,

  /**
   *  LocalNet
   *  zeta_localnet = 13;
   *
   * @generated from enum value: goerli_localnet = 14;
   */
  goerli_localnet = 14,

  /**
   * Athens
   *  zeta_athensnet=15;
   *
   * @generated from enum value: btc_regtest = 15;
   */
  btc_regtest = 15,
}

/**
 * PubKeySet contains two pub keys , secp256k1 and ed25519
 *
 * @generated from message common.PubKeySet
 */
export declare class PubKeySet extends Message<PubKeySet> {
  /**
   * @generated from field: string secp256k1 = 1;
   */
  secp256k1: string;

  /**
   * @generated from field: string ed25519 = 2;
   */
  ed25519: string;

  constructor(data?: PartialMessage<PubKeySet>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "common.PubKeySet";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PubKeySet;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PubKeySet;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PubKeySet;

  static equals(a: PubKeySet | PlainMessage<PubKeySet> | undefined, b: PubKeySet | PlainMessage<PubKeySet> | undefined): boolean;
}

/**
 * @generated from message common.Chain
 */
export declare class Chain extends Message<Chain> {
  /**
   * @generated from field: common.ChainName chain_name = 1;
   */
  chainName: ChainName;

  /**
   * @generated from field: int64 chain_id = 2;
   */
  chainId: bigint;

  constructor(data?: PartialMessage<Chain>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "common.Chain";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chain;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chain;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chain;

  static equals(a: Chain | PlainMessage<Chain> | undefined, b: Chain | PlainMessage<Chain> | undefined): boolean;
}

