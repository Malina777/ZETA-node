// @generated by protoc-gen-es v1.3.0 with parameter "target=dts"
// @generated from file pkg/chains/chains.proto (package chains, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum chains.ReceiveStatus
 */
export declare enum ReceiveStatus {
  /**
   * some observer sees inbound tx
   *
   * @generated from enum value: Created = 0;
   */
  Created = 0,

  /**
   * @generated from enum value: Success = 1;
   */
  Success = 1,

  /**
   * @generated from enum value: Failed = 2;
   */
  Failed = 2,
}

/**
 * ChainName represents the name of the chain
 *
 * @generated from enum chains.ChainName
 */
export declare enum ChainName {
  /**
   * @generated from enum value: empty = 0;
   */
  empty = 0,

  /**
   * @generated from enum value: eth_mainnet = 1;
   */
  eth_mainnet = 1,

  /**
   * @generated from enum value: zeta_mainnet = 2;
   */
  zeta_mainnet = 2,

  /**
   * @generated from enum value: btc_mainnet = 3;
   */
  btc_mainnet = 3,

  /**
   * @generated from enum value: polygon_mainnet = 4;
   */
  polygon_mainnet = 4,

  /**
   * @generated from enum value: bsc_mainnet = 5;
   */
  bsc_mainnet = 5,

  /**
   * @generated from enum value: goerli_testnet = 6;
   */
  goerli_testnet = 6,

  /**
   * @generated from enum value: mumbai_testnet = 7;
   */
  mumbai_testnet = 7,

  /**
   * @generated from enum value: ganache_testnet = 8;
   */
  ganache_testnet = 8,

  /**
   * @generated from enum value: baobab_testnet = 9;
   */
  baobab_testnet = 9,

  /**
   * @generated from enum value: bsc_testnet = 10;
   */
  bsc_testnet = 10,

  /**
   * @generated from enum value: zeta_testnet = 11;
   */
  zeta_testnet = 11,

  /**
   * @generated from enum value: btc_testnet = 12;
   */
  btc_testnet = 12,

  /**
   * @generated from enum value: sepolia_testnet = 13;
   */
  sepolia_testnet = 13,

  /**
   * @generated from enum value: goerli_localnet = 14;
   */
  goerli_localnet = 14,

  /**
   * @generated from enum value: btc_regtest = 15;
   */
  btc_regtest = 15,

  /**
   * @generated from enum value: amoy_testnet = 16;
   */
  amoy_testnet = 16,
}

/**
 * Network represents the network type of the chain
 *
 * @generated from enum chains.Network
 */
export declare enum Network {
  /**
   * @generated from enum value: ETH = 0;
   */
  ETH = 0,

  /**
   * @generated from enum value: ZETA = 1;
   */
  ZETA = 1,

  /**
   * @generated from enum value: BTC = 2;
   */
  BTC = 2,

  /**
   * @generated from enum value: POLYGON = 3;
   */
  POLYGON = 3,

  /**
   * @generated from enum value: BSC = 4;
   */
  BSC = 4,
}

/**
 * NetworkType represents the network type of the chain
 *
 * @generated from enum chains.NetworkType
 */
export declare enum NetworkType {
  /**
   * @generated from enum value: MAINNET = 0;
   */
  MAINNET = 0,

  /**
   * @generated from enum value: TESTNET = 1;
   */
  TESTNET = 1,

  /**
   * @generated from enum value: PRIVNET = 2;
   */
  PRIVNET = 2,

  /**
   * @generated from enum value: DEVNET = 3;
   */
  DEVNET = 3,
}

/**
 * Vm represents the virtual machine type of the chain to support smart contracts
 *
 * @generated from enum chains.Vm
 */
export declare enum Vm {
  /**
   * @generated from enum value: NO_VM = 0;
   */
  NO_VM = 0,

  /**
   * @generated from enum value: EVM = 1;
   */
  EVM = 1,
}

/**
 * Consensus represents the consensus algorithm used by the chain
 *
 * @generated from enum chains.Consensus
 */
export declare enum Consensus {
  /**
   * @generated from enum value: Ethereum = 0;
   */
  Ethereum = 0,

  /**
   * @generated from enum value: Tendermint = 1;
   */
  Tendermint = 1,

  /**
   * @generated from enum value: Bitcoin = 2;
   */
  Bitcoin = 2,
}

/**
 * @generated from message chains.Chain
 */
export declare class Chain extends Message<Chain> {
  /**
   * @generated from field: chains.ChainName chain_name = 1;
   */
  chainName: ChainName;

  /**
   * @generated from field: int64 chain_id = 2;
   */
  chainId: bigint;

  /**
   * @generated from field: chains.Network network = 3;
   */
  network: Network;

  /**
   * @generated from field: chains.NetworkType network_type = 4;
   */
  networkType: NetworkType;

  /**
   * @generated from field: chains.Vm vm = 5;
   */
  vm: Vm;

  /**
   * @generated from field: chains.Consensus consensus = 6;
   */
  consensus: Consensus;

  /**
   * @generated from field: bool is_external = 7;
   */
  isExternal: boolean;

  /**
   * @generated from field: bool is_header_supported = 8;
   */
  isHeaderSupported: boolean;

  constructor(data?: PartialMessage<Chain>);

  static readonly runtime: typeof proto3;
  static readonly typeName = "chains.Chain";
  static readonly fields: FieldList;

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Chain;

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Chain;

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Chain;

  static equals(a: Chain | PlainMessage<Chain> | undefined, b: Chain | PlainMessage<Chain> | undefined): boolean;
}

