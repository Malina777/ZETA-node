/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ZetaInterfaces {
  export type ZetaMessageStruct = {
    originSenderAddress: BytesLike;
    originChainId: BigNumberish;
    destinationAddress: string;
    zetaAmount: BigNumberish;
    message: BytesLike;
  };

  export type ZetaMessageStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    originSenderAddress: string;
    originChainId: BigNumber;
    destinationAddress: string;
    zetaAmount: BigNumber;
    message: string;
  };

  export type ZetaRevertStruct = {
    originSenderAddress: string;
    originChainId: BigNumberish;
    destinationAddress: BytesLike;
    destinationChainId: BigNumberish;
    zetaAmount: BigNumberish;
    message: BytesLike;
  };

  export type ZetaRevertStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string
  ] & {
    originSenderAddress: string;
    originChainId: BigNumber;
    destinationAddress: string;
    destinationChainId: BigNumber;
    zetaAmount: BigNumber;
    message: string;
  };
}

export interface ZetaReceiverMockInterface extends utils.Interface {
  functions: {
    "onZetaMessage((bytes,uint256,address,uint256,bytes))": FunctionFragment;
    "onZetaRevert((address,uint256,bytes,uint256,uint256,bytes))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "onZetaMessage" | "onZetaRevert"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "onZetaMessage",
    values: [ZetaInterfaces.ZetaMessageStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "onZetaRevert",
    values: [ZetaInterfaces.ZetaRevertStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "onZetaMessage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onZetaRevert",
    data: BytesLike
  ): Result;

  events: {
    "MockOnZetaMessage(address)": EventFragment;
    "MockOnZetaRevert(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MockOnZetaMessage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MockOnZetaRevert"): EventFragment;
}

export interface MockOnZetaMessageEventObject {
  destinationAddress: string;
}
export type MockOnZetaMessageEvent = TypedEvent<
  [string],
  MockOnZetaMessageEventObject
>;

export type MockOnZetaMessageEventFilter =
  TypedEventFilter<MockOnZetaMessageEvent>;

export interface MockOnZetaRevertEventObject {
  originSenderAddress: string;
}
export type MockOnZetaRevertEvent = TypedEvent<
  [string],
  MockOnZetaRevertEventObject
>;

export type MockOnZetaRevertEventFilter =
  TypedEventFilter<MockOnZetaRevertEvent>;

export interface ZetaReceiverMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ZetaReceiverMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    onZetaMessage(
      _zetaMessage: ZetaInterfaces.ZetaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    onZetaRevert(
      _zetaRevert: ZetaInterfaces.ZetaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  onZetaMessage(
    _zetaMessage: ZetaInterfaces.ZetaMessageStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  onZetaRevert(
    _zetaRevert: ZetaInterfaces.ZetaRevertStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    onZetaMessage(
      _zetaMessage: ZetaInterfaces.ZetaMessageStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    onZetaRevert(
      _zetaRevert: ZetaInterfaces.ZetaRevertStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "MockOnZetaMessage(address)"(
      destinationAddress?: null
    ): MockOnZetaMessageEventFilter;
    MockOnZetaMessage(destinationAddress?: null): MockOnZetaMessageEventFilter;

    "MockOnZetaRevert(address)"(
      originSenderAddress?: null
    ): MockOnZetaRevertEventFilter;
    MockOnZetaRevert(originSenderAddress?: null): MockOnZetaRevertEventFilter;
  };

  estimateGas: {
    onZetaMessage(
      _zetaMessage: ZetaInterfaces.ZetaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    onZetaRevert(
      _zetaRevert: ZetaInterfaces.ZetaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    onZetaMessage(
      _zetaMessage: ZetaInterfaces.ZetaMessageStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    onZetaRevert(
      _zetaRevert: ZetaInterfaces.ZetaRevertStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
