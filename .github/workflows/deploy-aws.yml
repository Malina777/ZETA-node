name: Build & Deploy To EC2 (aws/staging)

on:
  push:
    branches:
      - aws/development

env:
  S3_BUCKET: s3://source-files-821351686724/deployment-files
  # AWS_REGION: us-east-1

jobs:
  # set-env-vars: TODO - Set Env Vars based on environment or branch
  #     runs-on: ubuntu-latest
  #     steps:
  #       - uses: actions/checkout@v3

  build-aws:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      # - name: Set up Go
      #   uses: actions/setup-go@v3
      #   with:
      #     go-version: 1.17

      # - name: Build
      #   run: make install

      # ## - name: Test
      # ##   run: go test -v -coverprofile coverage.out  ./...

      # - name: Create Package
      #   run: |
      #     export PACKAGE_TIMESTAMP=$(date +"%s")
      #     echo "::set-env name=PACKAGE_TIMESTAMP::$PACKAGE_TIMESTAMP"
      #     mkdir deployment-${PACKAGE_TIMESTAMP}
      #     mv $HOME/go/bin/zetacored deployment-${PACKAGE_TIMESTAMP}
      #     mv $HOME/go/bin/zetaclientd deployment-${PACKAGE_TIMESTAMP}
      #     mv build/zetaclient-start.sh deployment-${PACKAGE_TIMESTAMP}
      #     mv build/zetacored-start.sh deployment-${PACKAGE_TIMESTAMP}
      #     tar -czvf deployment-${PACKAGE_TIMESTAMP}.tar.gz deployment-${PACKAGE_TIMESTAMP}/*

      # - name: Install AWS CLI
      #   run: |
      #     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
      #     unzip awscliv2.zip
      #     sudo ./aws/install

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_SPARTA }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_SPARTA }}
      #     aws-region: us-east-1

      # - name: s3
      #   run: |
      #     echo $PACKAGE_TIMESTAMP
      #     aws s3 cp deployment-${PACKAGE_TIMESTAMP}.tar.gz $S3_BUCKET/deployment-${PACKAGE_TIMESTAMP}.tar.gz

      # - name: Update SSM Parameter - /deployments/latest-deployment-id
      #   run: aws ssm put-parameter --overwrite --name '/deployments/latest-deployment-id' --value deployment-${PACKAGE_TIMESTAMP}  > /dev/null 2>&1

  deploy:
    needs: build-aws
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_SPARTA }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_SPARTA }}
          aws-region: us-east-1

      - name: Get Deployment ID
        run: |
          export DEPLOYMENT_ID=$(aws ssm get-parameter --name '/deployments/latest-deployment-id' | jq .Parameter.Value -r)
          echo "::set-env name=DEPLOYMENT_ID::$DEPLOYMENT_ID"

      # - name: Snapshot Instances
      #   run: |
      #     aws ec2 describe-instances --filters "Name=tag-key,Values=Chain" "Name=tag-value,Values=zetachain"

      - name: Copy Package Files
        run: |
          source build/bash_functions
          COMMAND_ID=$(run_ssm_commands "aws s3 cp $S3_BUCKET/$DEPLOYMENT_ID.tar.gz /tmp, tar -xzvf /tmp/$DEPLOYMENT_ID.tar.gz -C /deployment-files")
          check_cmd_status $COMMAND_ID

      - name: Stop ZetaChain
        run: |
          source build/bash_functions
          COMMAND_ID=$(run_ssm_commands "systemctl stop zetaclientd, systemctl stop zetacored")
          check_cmd_status $COMMAND_ID

      - name: Update Binaries
        run: |
          source build/bash_functions
          COMMAND_ID=$(run_ssm_commands "\
              cp /deployment-files/${DEPLOYMENT_ID}/zetaclientd /root/go/bin/zetaclientd, \
              cp /deployment-files/${DEPLOYMENT_ID}/zetacored /root/go/bin/zetacored, \
              cp /deployment-files/${DEPLOYMENT_ID}/zetaclient-start.sh /root/zetaclient-start.sh, \
              cp /deployment-files/${DEPLOYMENT_ID}/zetacored-start.sh /root/zetacored-start.sh")
          check_cmd_status $COMMAND_ID

      - name: Restart ZetaChain
        run: |
          source build/bash_functions
          COMMAND_ID=$(run_ssm_commands "systemctl restart zetaclientd, systemctl restart zetacored")
          check_cmd_status $COMMAND_ID


  test:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install AWS CLI 
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_SPARTA }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_SPARTA }}
          aws-region: us-east-1

      - name: Get Deployment ID
        run: |
          export DEPLOYMENT_ID=$(aws ssm get-parameter --name '/deployments/latest-deployment-id' | jq .Parameter.Value -r)
          echo "::set-env name=DEPLOYMENT_ID::$DEPLOYMENT_ID"

      # TODO - TESTS HERE

      - name: Update Last Successful Deployment ID - /deployments/latest-successful-deployment-id
        run: |
          aws ssm put-parameter --overwrite --name '/deployments/latest-successful-deployment-id' --value $DEPLOYMENT_ID > /dev/null 2>&1

  rollback: # Setup RollBack actions in case of failure
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      

# COMMAND_ID=$(aws ssm send-command \
#   --targets Key=tag:Chain,Values=zetachain \
#   --document-name "AWS-RunShellScript" \
#   --parameters "commands=[\"aws s3 cp $S3_BUCKET/$DEPLOYMENT_ID.tar.gz /tmp/\"]" | jq .Command.CommandId -r)

## Testing

## Fail/Rollback
# Get last working Binary name from SSM
# SSM Commands - Download File, Unzip, Stop ZetaChain, MV files, Start ZetaChain ( Check each command is successful before moving onto the nex)

## EXTRA
# Snapshot disks before deployment
