name: Build

on:
  push:
    branches:
      - develop
      - athens2-develop
      - cicd/buildjet-runners
    tags:
      - "*"
  pull_request:
    branches:
      - develop
      - athens2-develop
    types:
      - synchronize
      - opened
      - reopened
      - ready_for_review

env:
  S3_BUCKET_PATH: "zetachain-deployment-files/builds/zeta-node"
  AWS_REGION: "us-east-1"
  GITHUB_REF_NAME: "$(echo ${{ github.ref_name }} | tr '//' '-')"

jobs:

  build-and-test-x86-jet:
    runs-on: buildjet-4vcpu-ubuntu-2204
    timeout-minutes: 30
    steps:

    - uses: actions/checkout@v3

    - name: Install Pipeline Dependencies
      uses:  ./.github/actions/install-dependencies

    - name: setup-git-credentials
      uses: de-vri-es/setup-git-credentials@v2.0.8
      with:
        credentials: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build zetacored and zetaclientd
      env:
        CGO_ENABLED: 1
        GOOS: linux
        GOARCH: amd64
      run: |
        make install-testnet
        cp "$HOME"/go/bin/* ./

    - name: Test
      if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
      run: |
        echo "Running Build Tests"
        go test -v -coverprofile coverage.out  $(go list ./... | grep -v /x/zetacore/)

    - name: Binary Docker Test
      run: |
        chmod a+x ./zetacored
        ./zetacored version
        cp zetacored zetacored-ubuntu
        cp zetaclientd zetaclientd-ubuntu

    - name: Save Binaries as Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ github.sha }}
        path: |
            zetacored-ubuntu
            zetaclientd-ubuntu



  build-and-test-buildjet-arm:
    runs-on: buildjet-4vcpu-ubuntu-2204-arm
    timeout-minutes: 30
    steps:

    - uses: actions/checkout@v3

    - name: Install Pipeline Dependencies
      uses:  ./.github/actions/install-dependencies

    - name: setup-git-credentials
      uses: de-vri-es/setup-git-credentials@v2.0.8
      with:
        credentials: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}

    - uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build zetacored and zetaclientd
      env:
        CGO_ENABLED: 1
        GOOS: linux
        GOARCH: amd64
      run: |
        make install-testnet
        cp "$HOME"/go/bin/* ./

    - name: Test
      if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
      run: |
        echo "Running Build Tests"
        go test -v -coverprofile coverage.out  $(go list ./... | grep -v /x/zetacore/)

    - name: Binary Docker Test
      run: |
        chmod a+x ./zetacored
        ./zetacored version
        cp zetacored zetacored-ubuntu
        cp zetaclientd zetaclientd-ubuntu

    - name: Save Binaries as Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ github.sha }}
        path: |
            zetacored-ubuntu
            zetaclientd-ubuntu


  # build-and-test:
  #   runs-on: ["zeta-runners"]
  #   timeout-minutes: 30
  #   steps:

  #   - uses: actions/checkout@v3

  #   - name: Install Pipeline Dependencies
  #     uses:  ./.github/actions/install-dependencies

  #   - name: setup-git-credentials
  #     uses: de-vri-es/setup-git-credentials@v2.0.8
  #     with:
  #       credentials: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}

  #   - uses: actions/cache@v3
  #     with:
  #       path: |
  #         ~/.cache/go-build
  #         ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #       restore-keys: |
  #         ${{ runner.os }}-go-

  #   - name: Build zetacored and zetaclientd
  #     env:
  #       CGO_ENABLED: 1
  #       GOOS: linux
  #       GOARCH: amd64
  #     run: |
  #       make install-testnet
  #       cp "$HOME"/go/bin/* ./

  #   - name: Test
  #     if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
  #     run: |
  #       echo "Running Build Tests"
  #       go test -v -coverprofile coverage.out  $(go list ./... | grep -v /x/zetacore/)

  #   - name: Binary Docker Test
  #     run: |
  #       chmod a+x ./zetacored
  #       ./zetacored version
  #       cp zetacored zetacored-ubuntu
  #       cp zetaclientd zetaclientd-ubuntu

  #   - name: Save Binaries as Artifacts
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: binaries-${{ github.sha }}
  #       path: |
  #           zetacored-ubuntu
  #           zetaclientd-ubuntu

  # build-alpine-and-test:
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 30
  #   steps:

  #   - uses: actions/checkout@v3


  #   - name: Install Pipeline Dependencies
  #     uses:  ./.github/actions/install-dependencies

  #   - uses: jirutka/setup-alpine@v1
  #     with:
  #       arch: x86_64
  #       packages: >
  #         build-base
  #         pkgconf
  #         lld
  #         go 
  #         gcc 
  #         g++
  #       shell-name: alpine.sh


  #   - name: setup-git-credentials
  #     uses: de-vri-es/setup-git-credentials@v2.0.8
  #     with:
  #       credentials: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}

  #   - uses: actions/cache@v3
  #     with:
  #       path: |
  #         ~/.cache/go-build
  #         ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #       restore-keys: |
  #         ${{ runner.os }}-go-

  #   - name: Build zetacored and zetaclientd
  #     env:
  #       CGO_ENABLED: 1
  #       GOOS: linux
  #       GOARCH: amd64
  #     shell: alpine.sh --root {0}
  #     run: |
  #       apk add --no-cache --update
  #       go mod tidy
  #       make install-testnet
  #       cp "$HOME"/go/bin/* ./

  #   - name: Test
  #     if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
  #     shell: alpine.sh --root {0}
  #     run: |
  #       echo "Running Build Tests"
  #       go test -v -coverprofile coverage.out  $(go list ./... | grep -v /x/zetacore/)

  #   - name: Binary Docker Test
  #     shell: alpine.sh --root {0}
  #     run: |
  #       chmod a+x ./zetacored
  #       ./zetacored version
  #       mv zetacored zetacored-alpine
  #       mv zetaclientd zetaclientd-alpine

  #   - name: Save Binaries as Artifacts
  #     uses: actions/upload-artifact@v3
  #     with:
  #       name: binaries-${{ github.sha }}
  #       path: |
  #           zetacored-alpine
  #           zetaclientd-alpine

  # smoke-test:
  #   runs-on: ["zeta-runners"]
  #   timeout-minutes: 30
  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: Install Pipeline Dependencies
  #     uses:  ./.github/actions/install-dependencies

  #   - name: Start Private Network
  #     if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
  #     run: |
  #       cd contrib/localnet
  #       docker compose down || echo "not running or error"
  #       docker compose build zetacore0 eth && docker compose build orchestrator
  #       docker compose up -d zetacore0 zetacore1 zetaclient0 zetaclient1 eth bitcoin

  #   - name: Run Smoke Test
  #     if: ${{ env.GITHUB_REF_NAME != 'athens2-develop' }}
  #     run: |
  #       cd contrib/localnet
  #       docker-compose up orchestrator --exit-code-from orchestrator
  #       if [ $? -ne 0 ]; then
  #         echo "Smoke Test Failed"
  #         exit 1
  #       fi

  # upload:
  #   runs-on: ["zeta-runners"]
  #   timeout-minutes: 15
  #   if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/develop')
  #   needs:
  #     - build-and-test
  #     - smoke-test
  #     - build-alpine-and-test

  #   steps:
  #   - uses: actions/checkout@v3

  #   - name: setup-git-credentials
  #     uses: de-vri-es/setup-git-credentials@v2.0.8
  #     with:
  #       credentials: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}

  #   - name: Install Pipeline Dependencies
  #     uses:  ./.github/actions/install-dependencies

  #   - name: Get branch name
  #     id: branch-name
  #     uses: tj-actions/branch-names@v6

  #   - name: Git Hash
  #     run: |
  #       echo "GIT_HASH=$(git rev-parse --short HEAD)" >> ${GITHUB_ENV}
  #       echo "WORKSPACE_DIR=$(pwd)" >> ${GITHUB_ENV}

  #   - name: set-branch-name
  #     uses: ./.github/actions/set-branch-name
  #     with:
  #       github_ref: "${{github.ref}}"
  #       github_event: "${{ github.event_name }}"
  #       github_head_ref: "${{ github.event.pull_request.head.ref }}"
  #       github_commit_sha: "${{ env.GIT_HASH }}"
  #       current_branch_name: "${{ steps.branch-name.outputs.current_branch }}"

  #   - uses: actions/cache@v3
  #     with:
  #       path: |
  #         ~/.cache/go-build
  #         ~/go/pkg/mod
  #       key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
  #       restore-keys: |
  #         ${{ runner.os }}-go-

  #   - uses: actions/download-artifact@v3
  #     with:
  #       name: binaries-${{ github.sha }}
  #       path: ./

  #   - name: Configure AWS Credentials
  #     uses: aws-actions/configure-aws-credentials@v1
  #     with:
  #       aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       aws-secret-access-key:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #       aws-region: ${{ env.AWS_REGION }}

  #   - name: upload-files-to-s3
  #     uses: ./.github/actions/upload-to-s3
  #     with:
  #       bucket-name: ${{ env.S3_BUCKET_PATH }}
  #       release-name: ${{ env.RELEASE_NAME }}
  #       git-sha: ${{ github.sha }}
  #       files: |
  #         zetacored-ubuntu
  #         zetaclientd-ubuntu
  #         zetacored-alpine
  #         zetaclientd-alpine

  #   - name: Build, tag, and push docker images
  #     uses:  ./.github/actions/build-docker-images
  #     with:
  #       DOCKER_FILENAME: Dockerfile
  #       REPOSITORY_NAME: zeta-node
  #       IMAGE_TAG: ${{ env.TAG_NAME }}
  #       GHCR_USERNAME: ${{ secrets.PAT_GITHUB_SERVICE_ACCT_USERNAME }}
  #       GHCR_TOKEN: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}

  #   # # Approval will be required closer to mainnet
  #   # - name: Require Approval To Create a Release
  #   #   uses: softprops/action-gh-release@v1
  #   #   if: startsWith(github.ref, 'refs/tags/v')
  #   #   with:
  #   #     token: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}
  #   #     files: |
  #   #       zetacored
  #   #       zetaclientd

  #   - name: Create GitHub Release for ZetaCore/ZetaClient
  #     uses: softprops/action-gh-release@v1
  #     if: startsWith(github.ref, 'refs/tags/v')
  #     with:
  #       token: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}
  #       files: |
  #         zetacored-ubuntu
  #         zetaclientd-ubuntu
  #         zetacored-alpine
  #         zetaclientd-alpine

  # upgrade_path_testing:
  #   runs-on: ["zeta-runners"]
  #   timeout-minutes: 60
  #   if: startsWith(github.ref, 'refs/tags/') || startsWith(github.ref, 'refs/heads/develop')
  #   needs:
  #     - build-and-test
  #     - build-alpine-and-test
      
  #   steps:
  #   - uses: actions/checkout@v3
  #     with:
  #       fetch-depth: 0

  #   - name: upgrade-path-testing
  #     uses: ./.github/actions/upgrade-testing
  #     with:
  #       github_token: ${{ secrets.PAT_GITHUB_SERVICE_ACCT }}
