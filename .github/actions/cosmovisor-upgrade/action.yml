name: 'Create Cosmovisor Proposal'
description: 'Creates Cosmovisor Upgrade Proposal and Votes On All TestNet Valiators'
inputs:
  UPGRADE_NAME:  
    description: 'Name of the upgrade (0.0.1)'
    required: true
  DESCRIPTION:  
    description: 'Description of the upgrade'
    required: false
    default: "Description"
  ZETACORED_CHECKSUM:  
    description: 'Hash value of the zetacored binary'
    required: true
  ZETACORED_URL:  
    description: 'URL to download the zetacored binary'
    required: false
    default: ""
  ZETACLIENTD_CHECKSUM:  
    description: 'Hash value of the zetaclientd binary'
    required: true
  ZETACLIENTD_URL:  
    description: 'URL to download the zetaclientd binary'
    required: false
    default: ""
  CHAIN_ID:  
    description: 'Chain ID for the upgrade'
    required: true
  API_ENDPOINT:  
    description: 'Endpoint for the ZetaChain API'
    required: false
    default: "https://api.development.zetachain.com"
  UPGRADE_BLOCK_HEIGHT:
    description: 'What block height to upgrade at'
    required: true

runs:
  using: "composite"
  steps:

    - name: Set ENV Variables
      shell: bash
      run: |
        echo Running Cosmovisor Upgrade Action
        echo "API_ENDPOINT=${{ inputs.API_ENDPOINT }}" >> $GITHUB_ENV
        echo PATH="$PATH:$(pwd)" >> $GITHUB_ENV

    - name: Get Upgrade Height 
      shell: bash
      run: |
        UPGRADE_HEIGHT=${{ inputs.UPGRADE_BLOCK_HEIGHT }}
        echo "UPGRADE_HEIGHT=$UPGRADE_HEIGHT" >> $GITHUB_ENV
        echo "Proposed Upgrade Height: ${UPGRADE_HEIGHT}"

    - name: Check Inputs & Env Vars - Testing Only
      shell: bash 
      if: ${{ env.ACT }}
      run: |
        echo  "github.ref_name = ${{ github.ref_name }}"
        echo  "github.event.inputs.ENVIRONMENT = ${{ github.event.inputs.ENVIRONMENT }}"
        echo "DESCRIPTION=${{ inputs.DESCRIPTION }}"
        echo "ZETACORED_CHECKSUM=${{ env.ZETACORED_CHECKSUM }}"
        echo "ZETACLIENTD_CHECKSUM=${{ env.ZETACLIENTD_CHECKSUM }}"
        echo "CHAIN_ID=${{ env.CHAIN_ID }}"
        echo "API_ENDPOINT=${{ inputs.API_ENDPOINT }}"
        echo "ZETACORED_URL=${{ inputs.ZETACORED_URL }}"
        echo "ZETACLIENTD_URL=${{ inputs.ZETACLIENTD_URL }}"

    - name: Prepare Validators # Temporary solution until we fix the "account sequence mismatch" GitHub Issue #359
      shell: bash
      run: |
        source ${{ github.action_path }}/functions

        COMMAND_ID=$(run_validators 'systemctl stop zetaclientd')
        echo COMMAND_ID:$COMMAND_ID
        check_cmd_status $COMMAND_ID

        COMMAND_ID=$(run_validators "systemctl restart cosmovisor")
        check_cmd_status $COMMAND_ID
        sleep 20

    # - name: Create & Submit Proposal 
    #   shell: bash
    #   run: |
    #     source ${{ github.action_path }}/functions    
    #     UPGRADE_INFO="{"binaries":{"linux/arm64":"${{ inputs.ZETACLIENTD_URL }}","linux/amd64":"${{ inputs.ZETACORED_URL }}"}}"   
    #     COMMAND_ID=$(aws ssm send-command \
    #       --targets Key=tag:Name,Values=validator0 \
    #       --document-name "AWS-RunShellScript" \
    #       --parameters "commands=['export HOME=/home/zetachain && \
    #         zetacored tx gov submit-proposal software-upgrade ${{ inputs.UPGRADE_NAME }} \
    #           --from val \
    #           --deposit 10000000azeta \
    #           --upgrade-height ${{ inputs.UPGRADE_BLOCK_HEIGHT }} \
    #           --description \"${{ inputs.DESCRIPTION }}\" \
    #           --title \"${{ inputs.UPGRADE_NAME }}\" \
    #           --keyring-backend test \
    #           --chain-id \"${{ env.CHAIN_ID }}\" \
    #           --upgrade-info \'{\"binaries\":{\"zetacored-linux/amd64\":\"${{ inputs.ZETACORED_URL }}?checksum=sha256:${{ env.ZETACLIENTD_CHECKSUM }}\", \"zetaclientd-linux/amd64\":\"${{ inputs.ZETACLIENTD_URL }}?checksum=sha256:${{ env.ZETACLIENTD_CHECKSUM }}\" }}\' \
    #           --yes']" | jq .Command.CommandId -r || exit 1)
    #     echo COMMAND_ID: $COMMAND_ID
    #     check_cmd_status $COMMAND_ID
    #     sleep 20

  - name: Create & Submit Proposal 
      shell: bash
      run: |
        source ${{ github.action_path }}/functions    
        UPGRADE_INFO="{"binaries":{"linux/arm64":"${{ inputs.ZETACLIENTD_URL }}","linux/amd64":"${{ inputs.ZETACORED_URL }}"}}"   
        COMMAND_ID=$(aws ssm send-command \
          --targets Key=tag:Name,Values=validator0 \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=['export HOME=/home/zetachain && \
            zetacored tx gov submit-proposal software-upgrade ${{ inputs.UPGRADE_NAME }} \
              --from val \
              --deposit 10000000azeta \
              --upgrade-height ${{ inputs.UPGRADE_BLOCK_HEIGHT }} \
              --description \"${{ inputs.DESCRIPTION }}\" \
              --title \"${{ inputs.UPGRADE_NAME }}\" \
              --keyring-backend test \
              --chain-id \"${{ env.CHAIN_ID }}\" \
              --upgrade-info \'{\"binaries\":{\"zetacored-linux/amd64\":\"${{ inputs.ZETACORED_URL }}\", \"zetaclientd-linux/amd64\":\"${{ inputs.ZETACLIENTD_URL }}\" }}\' \
              --yes']" | jq .Command.CommandId -r || exit 1)
        echo COMMAND_ID: $COMMAND_ID
        check_cmd_status $COMMAND_ID
        sleep 20

    - name: Vote on Proposal (All Validator Nodes)
      run: |
        source ${{ github.action_path }}/functions
        COMMAND_ID=$(aws ssm send-command \
          --targets Key=tag:Role,Values=validator \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=['export HOME=/home/zetachain && zetacored tx gov vote \$(zetacored q gov proposals --status voting_period --reverse -o json | jq -r .proposals[0].proposal_id) yes --from val --keyring-backend test --chain-id $CHAIN_ID --yes']" | jq .Command.CommandId -r || exit 1)
        
        echo COMMAND_ID: $COMMAND_ID
        check_cmd_status $COMMAND_ID
      shell: bash

    - name: Resume zetaclientd
      shell: bash
      run: |
        source ${{ github.action_path }}/functions
        COMMAND_ID=$(run_validators "systemctl restart zetaclientd")
        echo COMMAND_ID: $COMMAND_ID
        check_cmd_status $COMMAND_ID