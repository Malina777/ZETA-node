# Make sure to check the documentation at https://goreleaser.com

## Test locally with `make release-dry-run`

## TODO 
# - Add SBOMs
# - Add Docker Builds
# - SLSA - https://github.com/goreleaser/goreleaser-example-slsa-provenance
# - Add Code Signing

env:
  - CGO_ENABLED=1
  - CC_darwin_arm64=oa64-clang
  - CXX_darwin_arm64=oa64-clang++
  - CC_darwin_amd64=o64-clang
  - CXX_darwin_amd64=o64-clang+
  - CC_linux_arm64=aarch64-linux-gnu-gcc
  - CXX_linux_arm64=aarch64-linux-gnu-g++
  - CC_linux_amd64=x86_64-linux-gnu-gcc
  - CXX_linux_amd64=x86_64-linux-gnu-g++
  - CC_windows_amd64=x86_64-w64-mingw32-gcc
  - CXX_windows_amd64=x86_64-w64-mingw32-g++   
  - VERSION={{ .Version }}
  - COMMIT={{ .Commit }}
  - BUILDTIME={{ .Date }}
  # - CC_windows_arm64= NOT_CREATING_WINDOWS_ARM64_BINARIES
  # - CXX_windows_arm64= NOT_CREATING_WINDOWS_ARM64_BINARIES

before:
  hooks:
    - go mod download
    - go mod tidy

builds:

  - id: "zetacored_testnet"
    main: ./cmd/zetacored
    binary: "zetacored_testnet_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
    env:
      - 'CC={{ index .Env (print "CC_" .Os "_" .Arch) }}'
      - 'CXX={{ index .Env (print "CXX_" .Os "_" .Arch) }}'
    goos:
      - linux
      # - darwin
      # - windows
    goarch:
      - arm64
      # - amd64
    ignore:
      - goos: windows
        goarch: arm64
    flags: &default_testnet_flags
      - -tags=TESTNET,pebbledb,ledger,cgo
    ldflags: &default_ldflags
      - -X github.com/cosmos/cosmos-sdk/version.Name=zetacore
      - -X github.com/cosmos/cosmos-sdk/version.ServerName=zetacored
      - -X github.com/cosmos/cosmos-sdk/version.ClientName=zetaclientd
      - -X github.com/cosmos/cosmos-sdk/version.Version={{ .Version }}
      - -X github.com/cosmos/cosmos-sdk/version.Commit={{ .Env.COMMIT }}
      - -X github.com/zeta-chain/zetacore/common.Name=zetacored
      - -X github.com/zeta-chain/zetacore/common.Version={{ .Version }}
      - -X github.com/zeta-chain/zetacore/common.CommitHash={{ .Env.COMMIT }}
      - -X github.com/zeta-chain/zetacore/common.BuildTime=={{ .Env.BUILDTIME }}
      - -X github.com/cosmos/cosmos-sdk/types.DBBackend=pebbledb

  # - id: "zetaclientd_testnet"
  #   main: ./cmd/zetaclientd
  #   binary: "zetaclientd_testnet_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
  #   env:
  #     - 'CC={{ index .Env (print "CC_" .Os "_" .Arch) }}'
  #     - 'CXX={{ index .Env (print "CXX_" .Os "_" .Arch) }}'
  #   goos:
  #     - linux
  #     # - darwin
  #     # - windows
  #   goarch:
  #     - arm64
  #     - amd64
  #   ignore:
  #     - goos: windows
  #       goarch: arm64
  #   flags: *default_testnet_flags
  #   ldflags: *default_ldflags

  # - id: "zetacored_mock_mainnet"
  #   main: ./cmd/zetacored
  #   binary: "zetacored_mock_mainnet_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
  #   env:
  #     - 'CC={{ index .Env (print "CC_" .Os "_" .Arch) }}'
  #     - 'CXX={{ index .Env (print "CXX_" .Os "_" .Arch) }}'
  #   goos:
  #     - linux
  #     - darwin
  #     - windows
  #   goarch:
  #     - arm64
  #     - amd64
  #   ignore:
  #     - goos: windows
  #       goarch: arm64
  #   flags: &default_mock_mainnet_flags
  #     - -tags=MOCK_MAINNET,pebbledb,ledger,cgo
  #   ldflags: *default_ldflags

  # - id: "zetaclientd_mock_mainnet"
  #   main: ./cmd/zetaclientd
  #   binary: "zetaclientd_mock_mainnet_{{ .Version }}_{{ .Os }}_{{ .Arch }}"
  #   env:
  #     - 'CC={{ index .Env (print "CC_" .Os "_" .Arch) }}'
  #     - 'CXX={{ index .Env (print "CXX_" .Os "_" .Arch) }}'
  #   goos:
  #     - linux
  #     # - darwin
  #     # - windows
  #   goarch:
  #     - arm64
  #     - amd64
  #   ignore:
  #     - goos: windows
  #       goarch: arm64
  #   flags: *default_mock_mainnet_flags
  #   ldflags: *default_ldflags

# archives:
#   - id: "zetacored_testnet"
#     format: zip
#     builds:
#       - "" # builds all


#   - id: "zetaclientd_testnet"
#     format: zip


checksum:
  name_template: "checksums.txt"
changelog:
  sort: asc
  filters:
    exclude:
      - "^docs:"
      - "^test:"
snapshot:
  name_template: "{{ .Tag }}-next"

release:
  # If set to true, will not auto-publish the release.
  # Available only for GitHub and Gitea.
  draft: false

  target_commitish: "{{ .Commit }}"

  # If set, will create a release discussion in the category specified.
  #
  # Warning: do not use categories in the 'Announcement' format.
  #  Check https://github.com/goreleaser/goreleaser/issues/2304 for more info.
  #
  # Default is empty.
  # discussion_category_name: General

  # If set to auto, will mark the release as not ready for production
  # in case there is an indicator for this in the tag e.g. v1.0.0-rc1
  # If set to true, will mark the release as not ready for production.
  # Default is false.
  prerelease: auto

  # What to do with the release notes in case there the release already exists.
  #
  # Valid options are:
  # - `keep-existing`: keep the existing notes
  # - `append`: append the current release notes to the existing notes
  # - `prepend`: prepend the current release notes to the existing notes
  # - `replace`: replace existing notes
  #
  # Default is `keep-existing`.
  mode: append