/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ZetaEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaEth__factory>;
    getContractFactory(
      name: "ZetaMPIEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaMPIEth__factory>;
    getContractFactory(
      name: "ZetaMPINonEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaMPINonEth__factory>;
    getContractFactory(
      name: "ZetaToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaToken__factory>;
    getContractFactory(
      name: "ZetaNonEth",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaNonEth__factory>;
    getContractFactory(
      name: "ZetaReceiverMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaReceiverMock__factory>;
    getContractFactory(
      name: "ZetaMPIBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaMPIBase__factory>;
    getContractFactory(
      name: "ZetaReceiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ZetaReceiver__factory>;

    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ZetaEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaEth>;
    getContractAt(
      name: "ZetaMPIEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaMPIEth>;
    getContractAt(
      name: "ZetaMPINonEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaMPINonEth>;
    getContractAt(
      name: "ZetaToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaToken>;
    getContractAt(
      name: "ZetaNonEth",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaNonEth>;
    getContractAt(
      name: "ZetaReceiverMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaReceiverMock>;
    getContractAt(
      name: "ZetaMPIBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaMPIBase>;
    getContractAt(
      name: "ZetaReceiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ZetaReceiver>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
