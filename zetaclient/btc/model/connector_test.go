package model

import (
	"math/big"
	"testing"

	"github.com/ethereum/go-ethereum/common"
	"github.com/stretchr/testify/suite"
)

type testCase struct {
	amount        *big.Float
	input         []byte
	expected      *ConnectorEvent
	expectedError string
}

type ConnectorEventTestSuite struct {
	suite.Suite
	testCases []*testCase
}

func (suite *ConnectorEventTestSuite) SetupTest() {
	suite.testCases = []*testCase{
		{
			amount: big.NewFloat(0.006),
			// dump of vout ix 1 on testnet3
			// block : 5a6162303132333435363738393031323334353637383930313233343536373839303148656c6c6f20576f726c6421
			// tx : 31a3cc0c7651b022380f736f6322dc2accde80e882e641b2d63c22c2b320c7ea
			input: []byte{0x5a, 0x61, 0x62, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21},
			expected: &ConnectorEvent{
				Amount:  big.NewFloat(float64(0.006)),
				Address: common.HexToAddress("0x6162303132333435363738393031323334353637"),
				Message: []byte("89012345678901Hello World!"),
			},
		},
		{
			input:         []byte{0x5a, 0x61, 0x62, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21},
			expectedError: "invalid amount",
		},
		{
			amount:        big.NewFloat(0.02),
			input:         []byte{0x0a, 0x61, 0x62, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x31, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x21},
			expectedError: "no magic number",
		},
		{
			amount:        big.NewFloat(0.05),
			input:         []byte{0x5a, 0x61},
			expectedError: "invalid input",
		},
	}
}

func (suite *ConnectorEventTestSuite) TearDownSuite() {
}

func (suite *ConnectorEventTestSuite) TestEncode() {
	for _, tc := range suite.testCases {
		connectorEvent, err := NewConnectorEvent(tc.amount, tc.input)
		if tc.expectedError == "" {
			suite.Require().NoError(err)
			suite.Assert().Equal(tc.expected.String(), connectorEvent.String())
		} else {
			suite.Require().Error(err)
			suite.Assert().Equal(tc.expectedError, err.Error())
		}
	}
}

func (suite *ConnectorEventTestSuite) TestDecode() {
}

// TestConnectorEvents is the entry point of this test suite
func TestConnectorEvents(t *testing.T) {
	suite.Run(t, new(ConnectorEventTestSuite))
}
